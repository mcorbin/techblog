<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='https://mcorbin.fr' rel='self' type='application/rss+xml'/>
<title>
(mcorbin.fr)
</title>
<link>
https://mcorbin.fr
</link>
<description>
Blog de mcorbin
</description>
<lastBuildDate>
Sun, 16 May 2021 21:33:38 +0200
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
https://mcorbin.fr/posts/2021-05-12-langage-prog-important/
</guid>
<link>
https://mcorbin.fr/posts/2021-05-12-langage-prog-important/
</link>
<title>
Choix du langage de programmation pour un projet: vraiment important ?
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Source infinie de trolls, les débats sur les langages de programmation sont vieux comme le monde. Mais est ce que le choix du langage est vraiment important ? D&amp;#8217;ailleurs, comment choisir ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe probablement des centaines de langage de programmations, certains très populaires, d&amp;#8217;autres non. Il peut être difficile de faire le tri (et donc de faire des choix) à cause de cela. Dans cet article, je décrirai comment je classe les langages, des critères importants selon moi, de comment je fais mes choix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En effet, c&amp;#8217;est d&amp;#8217;abord le type de projet qui va vous permettre de faire un premier filtre sur les langages à utiliser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_catégogies_de_langages&quot;&gt;Catégogies de langages&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_langages_spécialisés&quot;&gt;Langages spécialisés&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La première catégorie de langage que je souhaite aborder est celle des langages spécialisés. Dans certains domaines, vous n&amp;#8217;avez finalement pas ou peu le choix du langage. Ce sont souvent des langages utilisés dans des domaines bien précis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/VHDL&quot;&gt;VHDL&lt;/a&gt;, que j&amp;#8217;ai eu l&amp;#8217;occasion de pratiquer pendant mes études, rentre par exemple dans cette catégorie. Il fait partie de ces quelques langages de niches permettant de décrire du hardware. C&amp;#8217;est d&amp;#8217;ailleurs un langage super fun, j&amp;#8217;ai parfois presque envie d&amp;#8217;acheter un peu de matériel pour rejouer avec.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bref, ces langages one une niche où la question du choix se pose moins qu&amp;#8217;ailleurs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_gargage_collector_ou_non&quot;&gt;Gargage collector ou non ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si on veut comparer les langages &quot;grands publics&quot;, un premier critère important est la présence ou non d&amp;#8217;un garbage collector. Rappelez vous, le gargage collector (GC) est un composant vous permettant de ne pas gérer l&amp;#8217;allocation et la libération de la mémoire de vos programmes. Cela simplifie grandement les programmes (on y reviendra), mais a un coût plus ou moins important en consommation mémoire, et en performance (notamment sur la latence de votre programme par exemple).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Certains programmes très spécifiques (kernel, temps réel&amp;#8230;&amp;#8203;) ne peuvent pas se permettre un garbage collector. On compare généralement trois langages lorsqu&amp;#8217;on parle de langages sans GC: C, C++, et Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C est le langage historique. Présent partout (comme dans le kernel Linux par exemple), on est pas prêt de pouvoir se passer complètement de lui. De même, C++ est un langage populaire qu&amp;#8217;on retrouve dans de nombreux programmes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le soucis de ces deux derniers langages est qu&amp;#8217;ils demandent une grande rigueur pour le développeur: en effet, gérer la mémoire manuellement est difficile, et des bugs peuvent rapidement apparaître. Cette catégorie de bug est assez dangereuse car elle peut permettre à un attaquant de prendre le contrôle de la machine par exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust a été inventé pour résoudre ce problème: avoir un langage sans garbage collector mais qui évite à la compilation les bugs de gestion de mémoire. Rust n&amp;#8217;apporte pas que cela (on parlera de typage et d&amp;#8217;écosystème plus tard), mais c&amp;#8217;est déjà un bon point pour lui.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est un peu hors du scope de cet article mais j&amp;#8217;ai toujours trouvé la programmation système très difficilement accessible. C&amp;#8217;est plein de subtilités et de bonnes pratiques très difficiles à assimiler (et si les gens d&amp;#8217;OpenSSL arrivent à introduire des bugs en lien avec la mémoire, on sait direct que ce sera le cas pour nous aussi), plein d&amp;#8217;incantations obscures à base de préprocesseurs, de processus de build incompréhensibles à moins d&amp;#8217;avoir un doctorat en Makefile et en installation de dépendances&amp;#8230;&amp;#8203; Bref, quoi qu&amp;#8217;on pense de Rust, il permet au moins de rendre le truc accessible pour le commun des mortels que nous sommes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_donc_gc_ou_pas&quot;&gt;Donc, GC ou pas ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pense que 97 % des programmes (chiffre sorti de mon chapeau) peuvent tolérer un garbage collector. L&amp;#8217;intêret du garbage collector est multiple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Facilité de développement: Rust apporte par exemple une lourdeur énorme (mais justifiée vu ses objectifs) pour se passer de GC ET être safe. J&amp;#8217;aime le code simple et concis, et j&amp;#8217;aime mon confort de développement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La majorité des applications peuvent tolérer un GC: les garbage collectors d&amp;#8217;aujourd&amp;#8217;hui sont &lt;strong&gt;très&lt;/strong&gt; performants. On a récemment beaucoup parlé de &lt;a href=&quot;https://malloc.se/blog/zgc-jdk16&quot;&gt;ZGC&lt;/a&gt; sur la machine virtuelle Java (JVM) récemment par exemple. Demandez vous si c&amp;#8217;est grave si parfois, quelques requêtes mettent quelques dizaines de millisecondes de plus à s&amp;#8217;exécuter parce que vous avez le GC qui tourne. Pour la majorité des applications, c&amp;#8217;est négligeable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bien sûr, gérer des programmes consommant d&amp;#8217;énormes quantités de RAM (centaines de GB, voir TB) est un challenge, mais on est ici sur des besoins très particuliers et on voit que des solutions comme ZGC peuvent convenir pour ces besoins. Et de toute façon, GC ou pas, je pense que coder ce genre d&amp;#8217;applications est toujours difficile. Peut être que la productivité amenée par l&amp;#8217;utilisation d&amp;#8217;un GC est plus intéressante ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;TL:DR: je ne vois aucun intêret à utiliser par exemple Rust pour faire des applications web standards. Je préfère un langage de plus haut niveau qui me permettra d&amp;#8217;être beaucoup plus productif et avec selon moi un code plus clair.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On aura toujours quelques trolls, connus ou non, qui affirmeront que le VRAI code et les VRAIS langages sont des langages sans GC, je préfère ignorer ce genre de remarques.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_typage&quot;&gt;Typage&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un autre grand débat est le typage statique vs le typage dynamique. Comparons le même code écrit en Python et en Rust:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les variables dans un programme ont généralement un type (string, int, double, ou des types plus complexes). Ecrivons par exemple en Python et en Rust la même fonction permettant d&amp;#8217;additionner deux entiers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;#!/usr/bin/env python

def sum(a, b):
    return a + b

print(sum(1, 1))
print(sum(1, &quot;hello&quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce code Python peut être exécuté. Cela donnera:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;python main.py
2
Traceback (most recent call last):
  File &quot;main.py&quot;, line 7, in &amp;lt;module&amp;gt;
    print(sum(1, &quot;hello&quot;))
  File &quot;main.py&quot;, line 4, in sum
    return a + b
TypeError: unsupported operand type(s) for +: 'int' and 'str'&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ecrivons la même fonction en Rust&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn sum(a: i32, b: i32) -&amp;gt; i32 {
    a + b
}

fn main() {
    println!(&quot;{}&quot;, sum(1, 1));
    println!(&quot;{}&quot;, sum(1, &quot;hello&quot;));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On remarque déjà que contrairement à Python, nous devons déclarer les types de nos variables pour notre function &lt;code&gt;sum&lt;/code&gt;. On spécifie ici que la fonction prend deux paramètres de type &lt;code&gt;i32&lt;/code&gt; (un entier), et returne également un &lt;code&gt;i32&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Rust, ce code ne compile même pas:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error[E0308]: mismatched types
 --&amp;gt; src/main.rs:8:27
  |
8 |     println!(&quot;{}&quot;, sum(1, &quot;hello&quot;));
  |                           ^^^^^^^ expected `i32`, found `&amp;amp;str`

error: aborting due to previous error

For more information about this error, try `rustc --explain E0308`.
error: could not compile `example`

To learn more, run the command again with --verbose.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est donc impossible d&amp;#8217;exécuter ce code. Le compilateur a en effet détecté mon erreur (passer une chaine de caractère à ma fonction) et me l&amp;#8217;indique immédiatement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le premier intérêt des types est donc de détecter à la compilation un certain nombre d&amp;#8217;erreurs. Ils permettent aussi de structurer son programme. Bien sûr, il existe aussi des outils et techniques pour structurer un programme dans un langage dynamiquement typé (nous y reviendrons), mais il existe de nombreux mécanismes (par exemple en Rust les &lt;code&gt;Enum&lt;/code&gt;, &lt;code&gt;Option&lt;/code&gt;, &lt;code&gt;Result&lt;/code&gt;, &lt;code&gt;Generic&lt;/code&gt;, &lt;code&gt;Trait&lt;/code&gt;&amp;#8230;&amp;#8203;) pour encoder certaines propriétés de son programmes qui seront ensuite vérifiées à la compilation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le typage statique permet également parfois de meilleures performances grâce au compilateur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On pourrait donc se dire &lt;code&gt;mais les langages de programmations fortement typés sont forcément supérieurs ?&lt;/code&gt; Je pense que ce n&amp;#8217;est pas si simple. Déjà, il y a d&amp;#8217;autres critères de choix (les autres catégories de cet article), mais les langages dynamiques sont aussi très intéressants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Le typage dynamique a aussi des avantages&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mon langage de prédilection est &lt;a href=&quot;https://clojure.org/&quot;&gt;Clojure&lt;/a&gt;, un langage fonctionnel et dynamique sur la JVM. Je l&amp;#8217;utilise depuis fin 2014, et je travaille depuis 3 ans avec professionnellement chez &lt;a href=&quot;https://www.exoscale.com/&quot;&gt;Exoscale&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai eu l&amp;#8217;occasion de développer des programmes complexes avec: &lt;a href=&quot;https://community.exoscale.com/documentation/compute/network-load-balancer/&quot;&gt;piloter des load balancers&lt;/a&gt;, &lt;a href=&quot;https://www.exoscale.com/sks/&quot;&gt;orchestrer des control planes Kubernetes&lt;/a&gt;, &lt;a href=&quot;https://community.exoscale.com/documentation/compute/instance-pools/&quot;&gt;gérer des groupes de machines virtuelles&lt;/a&gt;&amp;#8230;&amp;#8203; Tout ça en Clojure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Est ce que mes programmes sont moins fiables parce que codés en Clojure. Non.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, le typage n&amp;#8217;est pas le seul critère: la programmation fonctionnelle et l&amp;#8217;immuabilité, l&amp;#8217;expressivité, la simplicité, la productivité, la cohérence du langage, son écosystème&amp;#8230;&amp;#8203; sont autant de sujets importants. Nous reviendrons sur ces sujets un peu plus loin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans le cas de Clojure, le fait de pouvoir représenter le monde sous la forme de structures de données simples, immuables, et de pouvoir facilement ensuite intéragir sur ces données, fait sa force. Notre job c&amp;#8217;est à 80 % d&amp;#8217;écrire des programmes qui prennent des trucs en entrée, les traitent, les envoient à d&amp;#8217;autres systèmes, les retournent&amp;#8230;&amp;#8203; Et Clojure est parfait pour ça. De plus, des outils comme &lt;a href=&quot;https://clojure.org/guides/spec&quot;&gt;Clojure Spec&lt;/a&gt; peuvent aider pour valider ces données.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il n&amp;#8217;existe aujourd&amp;#8217;hui &lt;strong&gt;aucune preuve&lt;/strong&gt; votre projet marcherait mieux dans un langage fortement typé. Il existe également des langages comme Golang (retrouvez &lt;a href=&quot;https://www.mcorbin.fr/posts/2019-06-13-one-year-of-go/&quot;&gt;mon article sur le sujet ici&lt;/a&gt;) qui sont statiquement typés mais avec un système de typage peu expressif, ce qui cause plus de problèmes qu&amp;#8217;autre chose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Parlons maintenant d&amp;#8217;expressivité.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_expressivité&quot;&gt;Expressivité&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pense que les langages dynamiquement typés (comme par exemple Clojure), comparés à des langages fortement typés, permettent:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;De prototyper plus vite, d&amp;#8217;arriver plus vite à un résultat&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De produire des programmes plus courts. Ce point est important. A compréhension égale (donc, sans utiliser de fonctionnalités ésotériques pour volontairement réduire la taille d&amp;#8217;un programme), je préfère maintenir un programme avec 1000 lignes de code que 10000.
Il existe je dirai &lt;strong&gt;au moins&lt;/strong&gt; un facteur de 5 à 10, voir plus par exemple entre le même programme en Java et en Clojure. C&amp;#8217;est énorme, et ça se ressent sur la maintenance des programmes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De se concentrer sur l&amp;#8217;essentiel.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le dernier point est également important. Un problème des langages fortement typés est de ne jamais s&amp;#8217;arrêter à sortir de nouvelles fonctionnalités sur le système de typage. Vous aurez toujours quelques personnes ayant 3 doctorats en types qui voudront utiliser une fonctionnalité incompréhensible, et chaque nouvelle fonctionnalité rajoute une couche de complexité au langage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ces langages sont également sujets à l&amp;#8217;explosion de types. Chaque petite variation de donnée doit avoir son propre types (même si les &lt;code&gt;Enum&lt;/code&gt;, &lt;code&gt;Option&lt;/code&gt; ou autre peuvent aider), ce qui alourdit la base de code, rajoute des fonctions de conversions entre types&amp;#8230;&amp;#8203; Manipuler et étendre des types est toute une cérémonie.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai ouvert dans le cadre de cet article un fichier aléatoire d&amp;#8217;un projet en Rust par exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;impl&amp;lt;T&amp;gt; futures_io::AsyncBufRead for Compat&amp;lt;T&amp;gt;
where
    T: tokio::io::AsyncBufRead,
{
    fn poll_fill_buf&amp;lt;'a&amp;gt;(
        self: Pin&amp;lt;&amp;amp;'a mut Self&amp;gt;,
        cx: &amp;amp;mut Context&amp;lt;'_&amp;gt;,
    ) -&amp;gt; Poll&amp;lt;io::Result&amp;lt;&amp;amp;'a [u8]&amp;gt;&amp;gt; {
        tokio::io::AsyncBufRead::poll_fill_buf(self.project().inner, cx)
    }

    fn consume(self: Pin&amp;lt;&amp;amp;mut Self&amp;gt;, amt: usize) {
        tokio::io::AsyncBufRead::consume(self.project().inner, amt)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wtf ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Certes, un expert Rust comprendrait cela (et en Rust les lifetimes n&amp;#8217;arrangent rien), mais je vois cette lourdeur dans tellement de langages fortement typés: types complexes à rallonge (avec plusieurs niveaux d&amp;#8217;imbrications: &lt;code&gt;Result&amp;lt;Option&amp;lt;Foo&amp;lt;Bar&amp;lt;Baz&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;, fonctionnalités obscures ajoutées à chaque release, symboles incantatoires&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans le cas de Rust, cela peut se justifier au vu de ses objectifs. Mais si j&amp;#8217;ai le choix, je veux un langage stable, simple, expressif. Je pense sérieusement que des programmes comme &lt;a href=&quot;http://riemann.io/&quot;&gt;Riemann&lt;/a&gt;, ou bien mon fork &lt;a href=&quot;https://www.mirabelle.mcorbin.fr/&quot;&gt;Mirabelle&lt;/a&gt; sont des programmes qui n&amp;#8217;auraient pas pu être construits simplement dans un langage fortement typé par exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_performances&quot;&gt;Performances&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a parlé de l&amp;#8217;impact du garbage collector sur les performances. Mais même entre langages ayant un garbage collector par exemple, il existe une énorme disparité entre langages sur le sujet de la performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les langages interprétés (comme Python pour sa version de base) sont généralement beaucoup plus lents que les langages compilés. Certaines plateformes, comme la JVM, sont connues pour leurs très bonnes performances (ce n&amp;#8217;est pas un hasard si la plupart des outils Big Data tournent sur la JVM).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais là aussi, il faut se poser la question: est ce que la performance du langage est vraiment importante ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La plupart des applications ont finalement peu de charges, peu de requêtes par seconde. La majorité du temps sera passée dans les I/O, et donc les performances du langage sont négligeables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour un projet d&amp;#8217;application web classique qui recevra quelques requêtes par seconde, je ne pense pas que le choix du langage ait un énorme impact. Bien sûr, sur des sites web conséquents, avec de nombreuses instances de l&amp;#8217;application, cela aura un impact et le gain en serveur (et donc en argent) d&amp;#8217;un langage plus performant peut se justifier. Et encore, si votre équipe est à l&amp;#8217;aise avec le langage actuellement utilisé c&amp;#8217;est sûrement ce qui est le plus important. A vous de gérer la balance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je rajouterai également que les performances brutes sont une chose, mais le fait de pouvoir facilement faire de la programmation concurrente et parallèle en est une autre. Selon les plateformes et langages c&amp;#8217;est plus ou moins compliqué, donc à vous d&amp;#8217;étudier la question avant de vous lancer.&lt;br&gt;
Certains plateformes (comme Erlang/OTP) peuvent répondre de manière élégante à ces problématiques par exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_programmation_fonctionnelle_objet&quot;&gt;Programmation fonctionnelle, objet&amp;#8230;&amp;#8203;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On découpe également souvent les langages en familles: langages objets, langages fonctionnels&amp;#8230;&amp;#8203; Il y en a d&amp;#8217;autre. Ces catégories ne sont pas simples à définir car certains langages peuvent rentrer dans plusieurs catégories, ou rajoutent des fonctionnalités dans un sens ou un autre, donc je ne vais pas m&amp;#8217;étendre sur le sujet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Néammoins, la programmation fonctionnelle est très intéressante. Le fait de pouvoir décrire son programme comme des données immuables sur lesquelles on va appliquer des fonctions limite grandement les bugs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En passant, programmation fonctionnelle != typage statique.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_ecosystème&quot;&gt;Ecosystème&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;écosystème est très important. Il y a plein de langages intéressants sur le papier mais qui ont au final un écosystème trop petit pour pouvoir être sérieusement utilisé.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si je ne peux pas faire de mTLS, d&amp;#8217;HTTP 2, que je ne peux pas intéragir avec des outils comme Kafka, Rabbit MQ, avec des outils cloud&amp;#8230;&amp;#8203; car l&amp;#8217;écosystème est absent, ce sera un problème.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est là la force de plateformes comme la JVM, Python, ou bien encore Golang. L&amp;#8217;écosystème est énorme, il existe des librairies de qualité pour un grand nombre de besoins, et donc je sais que je ne me retrouverai pas bloqué à cause d&amp;#8217;une manque de librairies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le packaging et la gestion des dépendances est aussi important. Avoir des outils comme &lt;code&gt;cargo&lt;/code&gt; en Rust, &lt;code&gt;maven&lt;/code&gt; en Java ou &lt;code&gt;lein&lt;/code&gt; en Clojure pour gérer proprement ses dépendances et ses builds est pour moi obligatoire.&lt;br&gt;
l&amp;#8217;outillage externes (linter par exemple) est également un gros plus (sur ça Golang est très fort par exemple).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;bref, l&amp;#8217;écosystème est vraiment un point à ne pas négliger.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_préférences_personnelles&quot;&gt;Préférences personnelles&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enfin, je pense qu&amp;#8217;on a tous le cerveau branché différement, et donc que l&amp;#8217;on va tomber sous le charme de certains langages pour des critères subjectifs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans mon cas, j&amp;#8217;espère par exemple ne jamais avoir à retravailler en Java &quot;entreprise&quot;. Attention, je trouve le langage Java largement utilisable et très intéressant, mais je pense que la façon de développer en Java aujourd&amp;#8217;hui au niveau des frameworks utilisés est une aberration. J&amp;#8217;ai d&amp;#8217;ailleurs quelques articles sur le sujet &lt;a href=&quot;https://www.mcorbin.fr/posts/2020-02-22-jvm-ecosysteme/&quot;&gt;ici&lt;/a&gt; et &lt;a href=&quot;https://www.mcorbin.fr/posts/2018-02-08-spring-generateur/&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et généralement, utiliser le langage que l&amp;#8217;on connait reste le plus intéressant.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une chose importante à comprendre est que le choix du langage est d&amp;#8217;abord en lien avec le type de projet. Comme expliqué avant, si vous ne pouvez pas tolérer un GC, vos choix sont limités. Si vous voulez vous inscrire dans un écosystème précis (Kubernetes par exemple), les choix sont aussi limités.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais souvent, plusieurs langages peuvent correspondre au besoin. Dans ce ca là, à vous de trancher. Mais je pense qu&amp;#8217;au final il n&amp;#8217;existe pas vraiment de mauvais langages dans les choix &quot;classiques&quot;, plus des mauvaises utilisations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous êtes maintenant libre de troller dans les commentaires.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 12 May 2021 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2021-03-27-cloud-marketing/
</guid>
<link>
https://mcorbin.fr/posts/2021-03-27-cloud-marketing/
</link>
<title>
Le cloud, seulement du marketing ?
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la suite du récent &lt;a href=&quot;https://www.leparisien.fr/faits-divers/strasbourg-un-important-incendie-sur-le-site-de-lentreprise-ovh-qui-abrite-des-serveurs-informatiques-10-03-2021-36SU6LXHHJF4BCZEOKNOAAKLVA.php&quot;&gt;incident&lt;/a&gt; chez OVH, de nombreuses personnes ont accusé &quot;le cloud&quot;, notamment sur les réseaux sociaux. Le cloud ne serait qu&amp;#8217;un argument marketing et n&amp;#8217;aurait aucune autre réalité. Qu&amp;#8217;en est-il vraiment ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_méchant_cloud&quot;&gt;Le méchant cloud&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cet article n&amp;#8217;est pas là pour discuter de l&amp;#8217;aspect &lt;em&gt;vous êtes responsable de vos sauvegardes&lt;/em&gt; ou encore &lt;em&gt;lisez les contrats de votre hébergeur&lt;/em&gt;, certains l&amp;#8217;ont déjà fait (comme cet article de &lt;a href=&quot;https://tferdinand.net/ovh-brule-internet-hurle/&quot;&gt;Teddy Ferdinand&lt;/a&gt;), mais d&amp;#8217;un autre sujet qui revient &lt;strong&gt;à chaque panne&lt;/strong&gt; chez un hébergeur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En cas de problèmes chez un cloud provider, on a un certain nombre d&amp;#8217;individus qui sortent du bois pour critiquer le cloud. Voici les arguments que l&amp;#8217;on voit principalement:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Le cloud, ce n&amp;#8217;est que du marketing, il n&amp;#8217;y a rien derrière.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Le cloud, ce n&amp;#8217;est pas fiable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_cloud_que_du_marketing&quot;&gt;Le cloud, que du marketing ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est une critique que l&amp;#8217;on voit beaucoup. Le cloud ne serait qu&amp;#8217;un outil permettant de vendre des choses qui existaient déjà. Il est vrai que certaines entreprises peuvent essayer de surfer sur la vague et de mettre le mot &quot;Cloud&quot; partout. Mais dire &quot;Le cloud ça n&amp;#8217;existe pas&quot; en parlant des fournisseurs d&amp;#8217;infrastructures (PaaS, IaaS&amp;#8230;&amp;#8203; je ne ferai pas la distinction dans cet article) est incompréhensible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je vois souvent ce discours dans la bouche de personnes ayant une certaine expérience de l&amp;#8217;informatique et qui n&amp;#8217;ont pas suivi (et compris) l&amp;#8217;apparition du Cloud. Le mécanisme traditionnel &quot;je ne comprends pas donc je critique&quot; apparaît très vite. Vous voyez les vieux du village critiquant Internet, les téléphones portables, ou la technologie en général ? C&amp;#8217;est exactement ça.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Etait-il possible avant le Cloud de piloter de l&amp;#8217;infrastructure 100 % via API, le tout géré par de l&amp;#8217;outillage permettant un travail collaboratif (via Git par exemple) ?&lt;br&gt;
De pouvoir provisionner des centaines de machines virtuelles, en gérant leurs templates, en les connectant via des réseaux privés, d&amp;#8217;en rajouter ou en enlever à la demande, de réaliser des snapshots et restorations, de démarrer des load balancers devant&amp;#8230;&amp;#8203; le tout en quelques commandes shell et en quelques minutes ?&lt;br&gt;
De créer des bases de données en quelques secondes, de démarrer des solutions d&amp;#8217;orchestration, de métriques, de gestion des logs&amp;#8230;&amp;#8203; Très facilement ?&lt;br&gt;
&lt;em&gt;Et surtout&lt;/em&gt;, de permettre à de petites équipes de gérer des infrastructures composées de dizaines ou centaines d&amp;#8217;applications, de centaines ou milliers de machines, de manière très flexible ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le dernier point est le plus important. Le cloud, en amenant sa flexibilité et sa tarification à l&amp;#8217;usage, aide les équipes dev et ops à construire des infrastructures répondant à leurs besoins sans avoir à gérer eux même un grand nombre de problèmes (gestion du matériel physique en datacenter notamment).&lt;br&gt;
Et comme dit précédemment, c&amp;#8217;est l&amp;#8217;automatisation des tâches et le contrôle de l&amp;#8217;infrastructure via API (et l&amp;#8217;outillage) qui permet également cela.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Est ce que tout cela est magique et ne demande aucune connaissance pour être utilisé ? Non. Des connaissances en système et réseaux, en architecture (que ce soit logicielle ou au niveau de l&amp;#8217;infrastructure du SI) sont toujours obligatoires.&lt;br&gt;
Est ce que des gens utilisent mal le cloud ? Probablement. Mais des gens qui faisaient n&amp;#8217;importe quoi, ça n&amp;#8217;existait donc pas avant le cloud ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je comprends également tout à fait les gens préférant gérer eux même de l&amp;#8217;infrastructure physique. Cela peut complètement se justifier, et cela peut même être très intéressant financièrement pour certains besoins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais au bout d&amp;#8217;un moment, les critiques à base de &quot;Olol le cloud, moi avec mes 2 machines dans mon salon, mon Nagios et 3 scripts shell je fais pareil&quot; sont assez pénibles (surtout venant de gens qui n&amp;#8217;ont &lt;em&gt;aucune&lt;/em&gt; idée de quoi ils parlent).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_cloud_n_est_pas_fiable&quot;&gt;Le cloud n&amp;#8217;est pas fiable&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quel que soit le Cloud Provider, lorsqu&amp;#8217;il y a une panne, on voit les traditionnels messages du type &quot;le Cloud n&amp;#8217;est pas fiable&quot; apparaître.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout d&amp;#8217;abord, &lt;strong&gt;personne&lt;/strong&gt; n&amp;#8217;a jamais dit que les cloud providers étaient 100 % fiables. Les cloud providers gèrent du matériel physique (et donc les pannes associées) et beaucoup de logiciels (car c&amp;#8217;est des programmes qui vont piloter l&amp;#8217;infrastructure), les problèmes réseaux arrivent&amp;#8230;&amp;#8203; le 100 % d&amp;#8217;uptime n&amp;#8217;existe pas, et c&amp;#8217;est (comme partout) à l&amp;#8217;utilisateur de prendre ses dispositions pour limiter l&amp;#8217;impact d&amp;#8217;une panne. Et on voit aussi que de très gros incidents peuvent malheureusement arriver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite, c&amp;#8217;est facile de critiquer le Cloud, mais les pannes n&amp;#8217;existaient pas avant ? Un rack de serveur dans un datacenter est subitement plus fiable si c&amp;#8217;est vous qui le gérez et pas le cloud provider ?&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et pour avoir travaillé dans une boîte où l&amp;#8217;infra était gérée dans des datacenters en interne (sauf quelques uns qui étaient sous les bureaux, je me rappelle qu&amp;#8217;une fois que quelqu&amp;#8217;un a fait le tour de tous les étages pour trouver un serveur physique essentiel qui répondait plus et qui était &quot;perdu&quot;, plus personne ne savait où il était posé), je peux vous dire que les équipes n&amp;#8217;attendaient qu&amp;#8217;une chose: passer sur le Cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sat, 27 Mar 2021 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2021-03-01-mirabelle-stream-processing/
</guid>
<link>
https://mcorbin.fr/posts/2021-03-01-mirabelle-stream-processing/
</link>
<title>
Mirabelle, a new stream processing engine for monitoring
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I started working one month ago on a new stream processing engine heavily inspired by &lt;a href=&quot;https://riemann.io&quot;&gt;Riemann&lt;/a&gt;. The project (named &lt;a href=&quot;https://github.com/mcorbin/mirabelle&quot;&gt;Mirabelle&lt;/a&gt;) is still in alpha state (but it starts/works), but I would like to explain what I try to achieve with this tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_riemann&quot;&gt;Riemann&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I discovered &lt;a href=&quot;https://riemann.io&quot;&gt;Riemann&lt;/a&gt; I think in 2015, and was immediately hooked (and contributed a lot to it at some point). The tool is amazing, well designed, and is full of good ideas:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Configuration as code: I&amp;#8217;m not speaking about YAML, TOML&amp;#8230;&amp;#8203; here, the Riemann configuration is real &lt;a href=&quot;https://clojure.org/&quot;&gt;Clojure&lt;/a&gt; code. The DLS and the built it integrations (Pagerduty, InfluxDB, Graphite, Elasticsearch&amp;#8230;&amp;#8203;) were enough for a lot of use cases, but it&amp;#8217;s super easy to write real code to extend the project if needed.&lt;br&gt;
After working with Riemann and its infinite possibilities, it&amp;#8217;s hard to work with limited DSL in other monitoring tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Good performances (JVM + Netty).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easy to deploy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Super useful: using Riemann to route events to external systems while doing computations on the stream of events (real time computation of rates, percentiles, detecting patterns by correlating events between multiples hosts and systems, sending alerts&amp;#8230;&amp;#8203;) is amazing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are interested by Riemann, I encourage you to watch Aphyr&amp;#8217;s &lt;a href=&quot;https://vimeo.com/131385889&quot;&gt;talk&lt;/a&gt; about it at Monitorama 2015.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clients are pushing events to Riemann. An event has some fields:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;service&lt;/code&gt;: The measurement name, like &lt;code&gt;cpu_percent&lt;/code&gt;, &lt;code&gt;http_request_second&lt;/code&gt;&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;time&lt;/code&gt;: The event time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tags&lt;/code&gt;: A list of tags, for example &lt;code&gt;[&quot;monitoring&quot;, &quot;database&quot;]&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ttl&lt;/code&gt;: A field indicating how long this event should be considered valid. It&amp;#8217;s used internally to expire events in some computations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt;: the event state (&lt;code&gt;ok&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, or &lt;code&gt;critical&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Additional keys, like &lt;code&gt;host&lt;/code&gt;, or custom ones, can be added.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of these fields are optional.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This format is very flexible. Riemann clients use protobuf, so performances are also good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Push has for me several advantages compared to pull for monitoring systems. First, I think push-based systems, especially combined with tools like Kafka, are open systems.&lt;br&gt;
You can route events to various databases, cloud services&amp;#8230;&amp;#8203; Want to try InfluxDB ? Deploy it, add a new rule to Riemann to forward events to it, and test it. Want to try Datadog ? Same. You want to send specific events in one tool and the others in another ? Easy ! Data are availables, even more with Kafka where everyone can write its own consumer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s also simpler to operate: one firewalling rule to open between your hosts/services and your Riemann (or Kafka if you use it as a buffer for example) instance. Compared to today&amp;#8217;s &quot;best practices&quot; where you have 10 HTTP servers exposing metrics per host scrapped periodically (and all the network configuration mess it involves), it&amp;#8217;s refreshing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would like to thank all the people involved into Riemann (for example Kyle Kingsbury aka &lt;a href=&quot;https://aphyr.com/&quot;&gt;Aphyr&lt;/a&gt;, the original Riemann author, &lt;a href=&quot;https://jamesturnbull.net/&quot;&gt;James Turnbull&lt;/a&gt;, another Riemann maintainer which also wrote a book about it) and its ecosystem.&lt;br&gt;
It&amp;#8217;s crazy how this tool evolved (the project itself but also the tooling: you can find Riemann integrations or Riemann clients a bit everywhere) without being backed by a company. I think it speaks about the tool quality, and shows that open source tools maintained by individuals can still have an impact.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the anecdote, I started to work at &lt;a href=&quot;https://www.exoscale.com/&quot;&gt;Exoscale&lt;/a&gt; almost 3 years ago because &lt;a href=&quot;http://spootnik.org/&quot;&gt;Pierre-Yves Ritschard&lt;/a&gt;, another Riemann contributor, proposed me to join the company. Thinking about it, Riemann is probably the piece of software which had the biggest impact on my career (met a lot of cool people, learned a lot about monitoring, Clojure, stream processing engines&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I do not contribute to Riemann anymore for a while. I still like the tool, but I had at some point the feeling that everything I could have done for the project was done, and that bringing Riemann to the next level would need a rewrite.&lt;br&gt;
Let&amp;#8217;s see what are currently the Riemann pain points for me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_what_could_be_improved_in_riemann&quot;&gt;What could be improved in Riemann&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I said, in Riemann the configuration is code. Real code. Your configuration file is a valid Clojure program which is evaluated at runtime by Riemann. It&amp;#8217;s nice but it also brings several issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Streams states on reloads&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When Riemann is reloaded (for example, you update its configuration and send a SIGHUP), the configuration is evaluated again but &lt;code&gt;all existing states are lost&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, if you were working with time windows, doing computations on group of events&amp;#8230;&amp;#8203; all of this would be lost, and new events (after the reload) would not have any knowledge of the old states.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In practice, it&amp;#8217;s an issue if you reload your configuration often. For a lot of use cases it was not important, but for some of mine it was an issue. It would be nice to only reset streams which were updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;I/O and stateful objects directly created in streams&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I said before, you can in Riemann forward events to timeseries databases, cloud services, send alerts to Pagerduty&amp;#8230;&amp;#8203; In short, perform side effects. These clients usually have stuff like threadpools etc&amp;#8230;&amp;#8203; which should be correctly initialized and stopped if needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Riemann, these kind of clients are also directly initialized and used inside streams, and it was hard to manage them cleanly, especially on reloads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Event time vs scheduler&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Riemann, some streams perform actions based on the events &lt;code&gt;time&lt;/code&gt;, but some also use a scheduler to execute tasks periodically.&lt;br&gt;
For example, some time windows streams use the events &lt;code&gt;time&lt;/code&gt; to know when a window is closed. If you have a 60 seconds window, you could consider the window closed if an event arrives at &lt;strong&gt;start of the window + 60&lt;/strong&gt;.
But other streams would use the scheduler to periodically flush states (windows for example) every N seconds (flushing events every N seconds, no matter what is received).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having two ways to manage the time was an issue. It was sometimes difficult to understand exactly the outputs of some streams because of that, and simulating the scheduler side effects complicated the unit test framework (yes, in Riemann, you can write unit tests to test your streams to me sure about your computations and alerting rules, which is super nice).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This and a couple of small issues motivated me to try to write a new tool heavily inspired by Riemann, using the same protocol/event format, which feels like Riemann but with more capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_mirabelle&quot;&gt;Mirabelle&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My tool named &lt;a href=&quot;https://github.com/mcorbin/mirabelle&quot;&gt;Mirabelle&lt;/a&gt; is still a work in progress, but I will explain the ideas behind it and how it differs compared to Riemann.
It should be noted that parts of the code were directly taken from Riemann, and that Mirabelle is also licensed under EPL, like Riemann. Again, I would like to thank all Riemann contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_an_intermediate_serializable_representation_of_streams&quot;&gt;An intermediate, serializable representation of streams&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I said, in Riemann, the configuration is a real Clojure program. Mirabelle mimics the Riemann DLS (I already reimplemented or backported tons of actions) but actually produces an &lt;a href=&quot;https://github.com/edn-format/edn&quot;&gt;edn&lt;/a&gt; representation of the streams. An example with a Mirabelle stream:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;;; keep only events with service = &quot;ram_percent&quot;
(where [:= :service &quot;ram_percent&quot;]
  ;; split children actions by host, each children being independant
  (by [:host]
    ;; check if the event metric is &amp;gt; 90 (so 90 %) during more than 30 sec
    (above-dt 90 30
      ;; set the state to critical
      (with :state &quot;critical&quot;
        ;; only send one event every 30 minutes to downstream systems
        ;; to avoid generating too many alerts for example
        (throttle 1 1800
          ;; log the message (could be forwarded to pagerduty for example)
          (error))))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you look at the &lt;a href=&quot;http://riemann.io/howto.html&quot;&gt;Riemann howto&lt;/a&gt;, this configuration looks like Riemann. But actually, in Mirabelle, this code only produces an edn datastructure, it does not evaluates to a function like in Riemann. The edn generated is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:action :where,
 :params [[:= :service &quot;ram_percent&quot;]],
 :children
 ({:action :by,
   :params [[:host]],
   :children
   ({:action :above-dt,
     :params [[:&amp;gt; :metric 90] 30],
     :children
     ({:action :with,
       :children
       ({:action :throttle,
         :params [1],
         :children (1800 {:action :error, :children nil})}),
       :params [{:state &quot;critical&quot;}]})})})}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can easily understand the structure while comparing it to the DSL. Each step contains an &lt;code&gt;:action&lt;/code&gt; key, (optional) parameters, and (optional) children.&lt;br&gt;
Another example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;;; imagine we gather events representing the duration of a job
(where [:= :service &quot;job_execution_time&quot;]
  ;; create a 120 second time window for all events
  (fixed-time-window 120
    ;; compute quantiles about them (like that, you have quantiles for all of your hosts grouped together)
    (percentiles [0.5 0.75 0.98 0.99]
      ;; log (could be forwarded to a TSDB for example)
      (info)))
  ;; in another action, split everything by host
  (by [:host]
    ;; for each host, create a 120 second time window
    (fixed-time-window 120
      ;; compute the percentiles for each host independently on the windows results
      (percentiles [0.5 0.75 0.98 0.99]
        ;; log
        (info)))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, like in Riemann, it&amp;#8217;s OK to have various computations/actions running in parallel (in differents &quot;branches&quot;) for the same event because of the amazing Clojure persistent datastructures. No side effects between actions, never, even between threads. &lt;strong&gt;You&lt;/strong&gt; choose what should be forwarded to downstream systems, what should be computed, and for the same events several actions can be done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The generated edn is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:action :where,
 :params [[:= :service &quot;job_execution_time&quot;]],
 :children
 ({:action :coalesce,
   :children
   ({:action :percentiles,
     :params [[0.5 0.75 0.98 0.99]],
     :children ({:action :info, :children nil})}),
   :params [60 [:host]]}
  {:action :by,
   :params [[:host]],
   :children
   ({:action :fixed-time-window,
     :params [120],
     :children
     ({:action :percentiles,
       :params [[0.5 0.75 0.98 0.99]],
       :children ({:action :info, :children nil})})})})}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This edn can then be &quot;compiled&quot; into functions on which you can inject events (it&amp;#8217;s done automatically for you when you send events to the Mirabelle TCP server).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having this edn repsentation brings several things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Streams configurations &lt;strong&gt;can be compared&lt;/strong&gt;. On a reload, Mirabelle will compare them and only reload streams which were changed. &lt;strong&gt;No more state loss&lt;/strong&gt; between reloads like in Riemann.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They can be used by Mirabelle to &lt;strong&gt;dynamically create&lt;/strong&gt; streams instances. I will talk about it later, but Mirabelle has an API to dynamically create streams based on a configuration passed by an HTTP request for example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The configurations can &lt;strong&gt;be validated&lt;/strong&gt; (I actually do it using &lt;a href=&quot;https://clojure.org/guides/spec&quot;&gt;Clojure spec&lt;/a&gt;), statically analyzed. For example, I will soon work on a tool to draw (using gnuplot for example) the streams graphes based on the configurations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think having this format between the DSL and Mirabelle is a huge win.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;IO at clearly identified, and managed outside of streams&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I said before, in Riemann I/O are directly created inside streams, and can be difficult to manage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Mirabelle, I/O are clearly identified and have their own lifecycles. They are also defined as edn, and the I/O configurations should live in dedicated files. Here is an example I/0 which will write events into a file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:file-example {:config {:path &quot;/tmp/events.edn&quot;}
                :type :file}}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can then use it into a stream:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(where [:= :service &quot;ram_percent&quot;]
  (push-io! :file-example))

;; this example would generate this edn configuration:

{:action :where,
 :params [[:= :service &quot;ram_percent&quot;]],
 :children ({:action :push-io!, :params [:file-example]})}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, my stream will write into the file &lt;code&gt;&quot;/tmp/events.edn&quot;&lt;/code&gt; all events with service &lt;code&gt;ram_percent&lt;/code&gt;. You see that I reference the I/O by name into &lt;code&gt;push-io!&lt;/code&gt; in order to do that.
The stateful I/O object (imagine a timeserie client using a threadpool, or more complex examples) are injected by Mirabelle when the stream is compiled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Multiple streams can use the same I/O. In Mirabelle, I/O are easy to maintain (start, stop, share between streams).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Streams in Mirabelle always use the events time&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I said before, some streams in Riemann use a scheduler to periodically do action (flushing time windows for example).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Mirabelle, &lt;strong&gt;all&lt;/strong&gt; streams use the events time as a source of truth. It means streams will &lt;strong&gt;always&lt;/strong&gt; produce the same output for a given list of input events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has several advantages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Easier to unit test and to reason about (yes, you can &lt;strong&gt;test everything&lt;/strong&gt; in Mirabelle, by writing tests which create your stream, and then you inject events into it, and check the outputs).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easier to maintain (no global side effects in streams).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can in Mirabelle have various streams, each one advancing at its own pace (each one will advance depending of the time of the received events).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s develop the third point a bit more, and discuss a bit about stream processing in general.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In stream processing engines, events can arrive out of order, especially if you aggregate and do computations on events arriving from multiple sources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have a host pushing every 10 seconds events, and if you write a stream which will for example create time windows only for this host, most of the time events will arrive in order (or else it means someone modified the host clock :D).&lt;br&gt;
In Mirabelle/Riemann, you can even use the &lt;code&gt;by&lt;/code&gt; action to create computation per host (you can check the previous example in this article), and so compute things for each host (or other label) in isolation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But sometimes, you want to aggregate data from multiple hosts. In that case, you don&amp;#8217;t have any guarantee on the events order (because even if the hosts clocks are synchronized, some events from some hosts will arrive first).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Riemann philosophy is &lt;code&gt;mostly correct information right now is more useful, than totally correct information only available once the failure is over&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/mirabelle/events-ordering.jpg&quot; alt=&quot;late events can cause issues&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, these issues can be mitigated by having moving time windows for example, in order to allow events to arrive &lt;em&gt;a bit late&lt;/em&gt; (&lt;em&gt;a bit&lt;/em&gt; depending of the stream configuration). But at some point, old events are lost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What could we do to solve this issue ? Unfortunately, we have to live with this trade-off in real time stream processing engines. We could try to &quot;wait&quot;, buffer events for a while, sort them by timestamp, and then perform the computations. You could easily write a stream to do that in Mirabelle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But what if we could replay all events, in order, and on demand ? Mirabelle allows that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Mirabelle, some streams from the configuration are used by default for events received by the TCP server. But you can also create streams (from the configuration, or dynamically using the API, remember, streams are just edn), and add a label to events to push them into these dedicated streams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/mirabelle/dyn-stream.jpg&quot; alt=&quot;Events can be reinjected into Mirabelle in order&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this schema, events arrive into Mirabelle and are then pushed into a timeserie database. You could already perform real-time computations on the events in order to quickly alert on some patterns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, you can at any time create (or use an existing one) a stream into Mirabelle, do a query on your timeserie database (like, give me the events for these series from yesterday between 5AM and 9AM, in order), and inject these events into the stream.&lt;br&gt;
Remember, in Mirabelle, each streams has its own view of the time. It&amp;#8217;s OK to have one stream working on real time events, and another working on events from yesterday for example. Streams work in isolation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That way, you can if needed perform new computations on your events, do tests (for example, if you want to define a threshold for alerting, you could replay last week events to see how many alerts would be triggered), or even move data between systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example using the API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{&quot;config&quot;: &quot;ezphY3Rpb25zIHs6YWN0aW9uIDpzZG8sCiAgICAgICAgICAgOmNoaWxkcmVuCiAgICAgICAgICAgKHs6YWN0aW9uIDp3aGVyZSwKICAgICAgICAgICAgIDpwYXJhbXMgW1s6PiA6bWV0cmljIDMwXV0sCiAgICAgICAgICAgICA6Y2hpbGRyZW4KICAgICAgICAgICAgICh7OmFjdGlvbiA6aW5jcmVtZW50LAogICAgICAgICAgICAgICA6Y2hpbGRyZW4KICAgICAgICAgICAgICAgKHs6YWN0aW9uIDplcnJvcgogICAgICAgICAgICAgICAgIDpwYXJhbXMgW10sCiAgICAgICAgICAgICAgICAgOmNoaWxkcmVuIG5pbH0pfSl9KX19Cg==&quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;config&lt;/code&gt; key contains the base64 representation of a stream. I can then create dynamically a stream named &lt;code&gt;bar&lt;/code&gt; into Mirabelle:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -X POST --header &quot;Content-Type: application/json&quot; localhost:5666/api/v1/stream/bar --data @payload.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, I can send events to this stream by setting the &lt;code&gt;stream&lt;/code&gt; attribute to &lt;code&gt;bar&lt;/code&gt; on a Riemann client:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;riemann-client send --host my-host --service bar --metric-d 35 --attribute=stream=bar 127.0.0.1 5555&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This event will only be received by the stream named &lt;code&gt;bar&lt;/code&gt;, not by other streams. As I said before, you could do the same thing with streams configured in the configuration file. Some could be used for real-time stream processing, others for another use case. You could even have multiple Mirabelle instances, some focused on real-time computations, and the other ones on old data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Being able to do it thought the API is nice. You can create a stream, compute stuff, and then delete it once the computation is over. And by sending ordered events, you &lt;strong&gt;know&lt;/strong&gt; the stream result will be 100 % correct.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let&amp;#8217;s talk a bit more about Mirabelle internal states.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_replaying_events&quot;&gt;Replaying events&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I said, Mirabelle will &lt;strong&gt;not&lt;/strong&gt; lose its states (time windows for example) during a restart. But what if the process crashes ? If you bufferize events for 5 minutes and that the process crashes after 4 minutes, you will lose 4 minutes of events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first answer is (and it&amp;#8217;s the Riemann one): we don&amp;#8217;t care. New events will rebuild the state, but the old window is lost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You could also have this approach in Mirabelle, and for example rerun the raw events (from your TSDB) in a dynamically created stream in order to recompute the result for this window.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A third solution could be to save the Mirabelle streams states somewhere (on disk, on a database&amp;#8230;&amp;#8203;). It&amp;#8217;s possible (and could be implemented if needed for some streams), but performances will not be good if you have to persist tons of states for &lt;strong&gt;every&lt;/strong&gt; event. You could only save the internal states periodically (every 5, 10, or 30 sec for example) to limit the impact of the crash, but in that case you will also lose events (the last N seconds) during a crash.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A last solution, which I just implemented in Mirabelle, is to replay the last N minutes of events when the process starts, discarding I/O, in order to rebuild the internal states.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Mirabelle streams, you can call &lt;code&gt;(write!)&lt;/code&gt; in order to persist your events on disk, into a &lt;a href=&quot;https://github.com/OpenHFT/Chronicle-Queue&quot;&gt;Chronicle queue&lt;/a&gt;.&lt;br&gt;
A chronicle queue is a bit like a Kafka topic but stored on your local disk. You can write data on it, or re-read it from the beginning or from a specific offset. Chronicle queue are also periodically rotated (it&amp;#8217;s configurable, it could be every minute, every hour, every two hours&amp;#8230;&amp;#8203;). You could even back them up somewhere to keep your events history.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When Mirabelle starts, it will re-read automatically all the data from the queue configured in its configuration, but will also add to the events a &lt;code&gt;discard&lt;/code&gt; tag. Events tagged &lt;code&gt;discard&lt;/code&gt; will be automatically removed from I/O actions in Mirabelle. It means these events will just be reinjected (in the order they are in the queue) into the streams to rebuild their internal states.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/mirabelle/queue_reinject.jpg&quot; alt=&quot;events are reinjected from the queue on start&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m still playing with this mechanism, because for huge queues re-reading everything can take a while. But I&amp;#8217;m confident reinjecting the last 5, 10, or 20 minutes of events will be enough for 99 % of the use cases and should have good performances.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_high_availability&quot;&gt;High availability&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For now, Mirabelle is only a mono-node project. It could indeed be an issue, but history (and Prometheus) shows us that people do not actually care about HA setup, and that running the thing in two machines in parallel may be enough for a lot of use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You could indeed forward events to two Mirabelle instances (like that, if one fails, the other will continue to compute things on your events).&lt;br&gt;
A lot of people were also using Kafka with Riemann, you could also do that with Mirabelle. By using Kafka and the Mirabelle queue feature to rebuild streams states, you can really have a solid solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m still thinking about how Mirabelle can be distributed (sharding events between instances or stuff like that), but for now I prefer to not go down the distributed system rabbit hole. I know it&amp;#8217;s a trap. IMO, Kafka or duplicating the stream of events is a good solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_in_memory_database&quot;&gt;In Memory database&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;EDIT 05/09/2021: Actually, I was not satisfied of the design of the in memory DB. I decided to remove it for now, and reimplemented the Riemann Index. I will rework on that later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Riemann provides an index to keep in memory the latest event for each &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;service&lt;/code&gt; pair. This was not ported to Mirabelle.&lt;br&gt;
Indeed, I think users should be able to put in memory the last N minutes (or hours) of events, on demand, and then do computations (combined with dynamic streams for example) on them. I actually already implemented quickly something:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(where [:= :service &quot;ram_percent&quot;]
  (index! [:host]))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example, I will save in memory all events for the service &lt;code&gt;ram_percent&lt;/code&gt;, indexed by &lt;code&gt;host&lt;/code&gt;. It means I will have a new &lt;code&gt;serie&lt;/code&gt; in memory per &lt;code&gt;host&lt;/code&gt; for the service &lt;code&gt;ram_percent&lt;/code&gt;. I can then query these data using the API.&lt;br&gt;
These data are stored in memory in a dedicated datastructure &lt;em&gt;per serie&lt;/em&gt;, &lt;em&gt;in order&lt;/em&gt;. The implementation is not that good for now but it seems to work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Storing data in order allows me to asks for data between two times for example, without performance issues. It will also offer the guarantee that the data are ordered if reinjected into a stream. This in-memory database is also rebuilt using the queue, exactly like internal streams states, accross restarts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Data in memory are automatically removed after a while. For example, you could say &quot;keep only the last 2 hours of data&quot;, and old data will be removed once expired. Having hot data, in memory, always availables (and rebuildable after a crash thanks to the queue), with (in the future) a nice way of querying/executing actions on them will be super useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/mirabelle/in_memory.jpg&quot; alt=&quot;The in-memory DB can be used to compute things on its data&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You could for example do real-time actions on your events (relabelling, clean them, perform small computations&amp;#8230;&amp;#8203;), forward them to a TSDB for long term storage, but also put them in memory in order to execute alerting queries on the last N hours of data for example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I could even integrate a Clojure REPL on the project, to let you explore the in-memory data, create dynamic streams, and compute stuff from it !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only thing I have to check is how many events I can store in memory before running ouf of RAM ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_future_work&quot;&gt;Future work&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, I have on disk a queue where events are persisted in the order they arrived on the system, sorted data per series in memory, and a way to rebuild the Mirabelle states (including the in-memory data) from the queue.&lt;br&gt;
The queue could be considered like a Write-ahead log, the sorted in-memory datastructures could be a poorly-implemented memtable&amp;#8230;&amp;#8203; Am I writing a database ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;it&amp;#8217;s not my goal for the moment (I will focus on the stream processing engine and I don&amp;#8217;t have all the knowledges needed to write a database), but it can actually be a fun exercice in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is way longer than expected. I hope at least a couple of people will read everything, if it&amp;#8217;s the case for you, well done ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next few weeks, I will try to publish an usable version of the project, with some doc to get started. I will also add some basic integrations (Graphite, InfluxDB, Pagerduty&amp;#8230;&amp;#8203;), and work more on the in-memory database. I would like to do also some benchmarks on real use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I spoke a lot about metrics and events in this article, but logs could also be handled by the tool I think.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, users cannot provide custom actions. I will allow that in a near future, so you will be able to code everything you want and integrate it into Mirabelle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Stay tuned !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Mon, 01 Mar 2021 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2021-02-11-meuse-1.2.0/
</guid>
<link>
https://mcorbin.fr/posts/2021-02-11-meuse-1.2.0/
</link>
<title>
Meuse 1.2.0 released!
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I released today the version &lt;strong&gt;1.2.0&lt;/strong&gt; of &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Meuse&lt;/a&gt;, your favorite Rust private registry for your crates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_new&quot;&gt;What&amp;#8217;s new&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_more_security&quot;&gt;More security&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meuse needs some secrets in its &lt;a href=&quot;https://meuse.mcorbin.fr/installation/configuration/&quot;&gt;configuration file&lt;/a&gt;, for example the PostgreSQL database password, or your S3 credentials if you are using the S3 backend for your crates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release allows you to set a new &lt;code&gt;!secret&lt;/code&gt; (or &lt;code&gt;!envsecret&lt;/code&gt; to read a value from an environment variable) YAML tags for your secrets in the configuration file.&lt;br&gt;
This will indicate to Meuse that the value is a secret. If this value is leaked by mistake by the program (like printed somewhere), the secret will be replaced by a &lt;code&gt;&amp;lt;&amp;lt; cloaked &amp;gt;&amp;gt;&lt;/code&gt; string.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may think &quot;but why would the secret be logged/printed at the first place&quot; ? Meuse will indeed not do that, but a mistake or a bug can happen, so I recommand you to use these tags.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_new_better_metrics&quot;&gt;New/Better metrics&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;New metrics were added to Meuse, and some we renamed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, Meuse exposes tons of metrics, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Internal metrics about the process, threads&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP requests duration and count per endpoint&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP response count per endpoint/status code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Metrics about the Git index (operations count and duration)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Number of crates, crates versions, users and downloads for the registry&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Everything is exposed on &lt;code&gt;/metrics&lt;/code&gt;, in Prometheus format.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_bugfix&quot;&gt;Bugfix&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An user found &lt;a href=&quot;https://github.com/mcorbin/meuse/issues/36&quot;&gt;a bug&lt;/a&gt; when uploading on Meuse crates with dependencies renamed. The issue is now solved.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_more_information&quot;&gt;More information&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more information about Meuse on &lt;a href=&quot;https://meuse.mcorbin.fr/&quot;&gt;the project website&lt;/a&gt;, and the code is available on &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 11 Feb 2021 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2021-01-03-vector-introduction/
</guid>
<link>
https://mcorbin.fr/posts/2021-01-03-vector-introduction/
</link>
<title>
Une introduction à Vector
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans un &lt;a href=&quot;https://mcorbin.fr/posts/2020-12-04-pull-push/&quot;&gt;précédent article&lt;/a&gt;, j&amp;#8217;avais mentionné Vector comme une technologie qui me faisait de l&amp;#8217;oeil. Je ferai un tour rapide de l&amp;#8217;outil dans cet article, notamment pour récupérer des métriques, gérer des logs, avec une petite intégration InfluxDB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pourquoi_utiliser_vector&quot;&gt;Pourquoi utiliser Vector ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vector permet de collecter, transformer et transférer entre différents systèmes des logs et des métriques.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par exemple, vous pouvez avec collecter des logs depuis différentes sources (journald, fichiers&amp;#8230;&amp;#8203;), réaliser des transformations dessus (ajout de labels, transformations diverses) puis transférer tout ça à un système externe comme par exemple Elasticsearch ou Loki.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De la même manière, Vector peut ingérer des métriques (ou même scrap des métriques au format Prometheus comme nous le verrons plus tard), réaliser là aussi au besoin des transformations, et envoyer les métriques dans InfluxDB, Datadog&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ecrit en Rust, Vector se veut léger et performant. Il peut être utilisé de différentes façons (il est possible de transférer les logs et métriques entre différentes instances de Vector, ce qui permet d&amp;#8217;avoir des Vector &quot;agents&quot; et des Vector &quot;centraux&quot; recevant les informations des agents par exemple), s&amp;#8217;intègre avec Kafka&amp;#8230;&amp;#8203; Bref, l&amp;#8217;outil a l&amp;#8217;air très flexible (une &lt;a href=&quot;https://vector.dev/docs/setup/deployment/&quot;&gt;section&lt;/a&gt; de la documentation explique tout ça).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cet outil a tout pour me plaire, et cet article montre quelques exemples d&amp;#8217;utilisation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_architecture_que_je_vais_présenter&quot;&gt;L&amp;#8217;architecture que je vais présenter.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous allons ici utiliser Vector pour plusieurs choses:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Récupérer les logs et les métriques d&amp;#8217;une instance de &lt;a href=&quot;https://github.com/mcorbin/cabourotte&quot;&gt;Cabourotte&lt;/a&gt; démarrée en tant que service systemd.&lt;br&gt;
Vous ne connaissez pas Cabourotte ? C&amp;#8217;est un outil que j&amp;#8217;ai conçu pour pouvoir facilement configurer (notamment par API) et exécuter des healthchecks sur votre infrastructure, le tout en fournissant des métriques et logs pertinents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Réaliser quelques transformations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Envoyer les métriques à InfluxDB et les logs dans un fichier (il serait possible d&amp;#8217;envoyer les logs dans Loki ou Elasticsearch par exemple dans un cas d&amp;#8217;utilisation réel).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/vector-intro/architecture.jpg&quot; alt=&quot;L&amp;#8217;architecture mise en place&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Je n&amp;#8217;ai jamais utilisé InfluxDB 2.0, donc je n&amp;#8217;irai pas très loin dans l&amp;#8217;utilisation de cet outil.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_démarrer_influxdb&quot;&gt;Démarrer InfluxDB&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Téléchargez InfluxDB depuis le &lt;a href=&quot;https://docs.influxdata.com/influxdb/v2.0/get-started/&quot;&gt;site officiel&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une fois téléchargé et décompressé, vous pouvez le lancer avec la simple commande &lt;code&gt;./influxd&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Allez ensuite sur &lt;code&gt;&lt;a href=&quot;http://localhost:8086&quot; class=&quot;bare&quot;&gt;http://localhost:8086&lt;/a&gt;&lt;/code&gt; pour configurer InfluxDB. J&amp;#8217;ai créé dans mon cas une organisation et un bucket appelé &lt;code&gt;mcorbin&lt;/code&gt;.&lt;br&gt;
Vous pouvez récupérer également dans cette interface le token InfluxDB.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_démarrer_cabourotte&quot;&gt;Démarrer Cabourotte&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les releases de Cabourotte sont disponibles sur &lt;a href=&quot;https://github.com/mcorbin/cabourotte/releases&quot;&gt;Github&lt;/a&gt;. Je vais utiliser ici la version &lt;code&gt;0.7.0&lt;/code&gt; qui est la version la plus récente au moment où j&amp;#8217;écris l&amp;#8217;article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, je vais configurer Cabourotte en tant que service systemd. Placez le fichier suivant dans &lt;code&gt;/etc/systemd/system/cabourotte.service&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
Description=The best tool to execute healthchecks on your infrastructure
After=network.target
ConditionPathExists=/etc/cabourotte/cabourotte.yml

[Service]
DynamicUser=yes
ExecStart=/usr/local/cabourotte/cabourotte daemon --config /etc/cabourotte/cabourotte.yml
Restart=on-failure

[Install]
WantedBy=multi-user.target&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Installez ensuite Cabourotte dans &lt;code&gt;/usr/local/cabourotte&lt;/code&gt; et activez le service:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://github.com/mcorbin/cabourotte/releases/download/v0.7.0/cabourotte_0.7.0_Linux_x86_64.tar.gz
sudo mkdir /usr/local/cabourotte/
sudo tar -C /usr/local/cabourotte -xzf cabourotte_0.7.0_Linux_x86_64.tar.gz
mkdir ~/Documents/vector
systemctl daemon-reload&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Créons maintenant le fichier de configuration de Cabourotte.&lt;br&gt;
Placez la configuration suivante dans &lt;code&gt;/etc/cabourotte/cabourotte.yml&lt;/code&gt;. Vous pouvez retrouver toutes les options disponibles dans la &lt;a href=&quot;https://cabourotte.mcorbin.fr/installation/configuration/&quot;&gt;documentation&lt;/a&gt; de l&amp;#8217;outil.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;---
http:
  host: &quot;0.0.0.0&quot;
  port: 9013
dns-checks:
  - name: &quot;dns-mcorbin.fr&quot;
    description: &quot;dns healthcheck on mcorbin.fr&quot;
    domain: &quot;mcorbin.fr&quot;
    interval: 5s
    labels:
      site: mcorbin.fr
http-checks:
  - name: &quot;http-mcorbin.fr&quot;
    description: &quot;http healthcheck on mcorbin.fr&quot;
    valid-status:
      - 200
      - 201
    target: &quot;mcorbin.fr&quot;
    port: 443
    protocol: &quot;https&quot;
    path: &quot;/&quot;
    timeout: 5s
    interval: 5s
    labels:
      site: mcorbin.fr
  - name: &quot;http-error-example&quot;
    description: &quot;This healthcheck should fail&quot;
    valid-status:
      - 200
      - 201
    target: &quot;doesnotexist.mcorbin.fr&quot;
    port: 443
    protocol: &quot;https&quot;
    path: &quot;/&quot;
    timeout: 5s
    interval: 5s
    labels:
      site: mcorbin.fr&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous configurons ici 3 healthchecks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Un healthcheck de type DNS qui devrait s&amp;#8217;exécuter correctement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un healthcheck de type HTTP qui là aussi est censé être réussi.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un autre healthcheck de type HTTP ciblant &lt;code&gt;doesnotexist.mcorbin.fr&lt;/code&gt;. Ce domaine n&amp;#8217;existant pas, ce healthcheck doit retourner des erreurs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Démarrez maintenant le service:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl start cabourotte&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le service doit démarrer correctement, et vous devez voir dans les logs (&lt;code&gt;sudo journalctl -eu cabourotte --no-pager&lt;/code&gt;) quelque chose comme:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;janv. 02 16:40:05 mathieu cabourotte[16652]: {&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:1609602005.3045712,&quot;caller&quot;:&quot;exporter/root.go:116&quot;,&quot;msg&quot;:&quot;Healthcheck successful&quot;,&quot;name&quot;:&quot;dns-mcorbin.fr&quot;,&quot;labels&quot;:{&quot;site&quot;:&quot;mcorbin.fr&quot;},&quot;date&quot;:&quot;2021-01-02 16:40:05.304543995 +0100 CET m=+65.311308786&quot;}
janv. 02 16:40:05 mathieu cabourotte[16652]: {&quot;level&quot;:&quot;error&quot;,&quot;ts&quot;:1609602005.3066423,&quot;caller&quot;:&quot;exporter/root.go:122&quot;,&quot;msg&quot;:&quot;healthcheck failed&quot;,&quot;name&quot;:&quot;http-error-example&quot;,&quot;labels&quot;:{&quot;site&quot;:&quot;mcorbin.fr&quot;},&quot;cause&quot;:&quot;HTTP request failed: Get \&quot;https://doesnotexist.mcorbin.fr:443/\&quot;: dial tcp: lookup doesnotexist.mcorbin.fr on 192.168.1.1:53: no such host&quot;,&quot;date&quot;:&quot;2021-01-02 16:40:05.30661737 +0100 CET m=+65.313382168&quot;,&quot;stacktrace&quot;:&quot;cabourotte/exporter.(*Component).Start.func2\n\t/home/mathieu/prog/go/cabourotte/exporter/root.go:122\ngopkg.in/tomb%2ev2.(*Tomb).run\n\t/home/mathieu/prog/go/cabourotte/vendor/gopkg.in/tomb.v2/tomb.go:163&quot;}
janv. 02 16:40:05 mathieu cabourotte[16652]: {&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:1609602005.3296578,&quot;caller&quot;:&quot;exporter/root.go:116&quot;,&quot;msg&quot;:&quot;Healthcheck successful&quot;,&quot;name&quot;:&quot;http-mcorbin.fr&quot;,&quot;labels&quot;:{&quot;site&quot;:&quot;mcorbin.fr&quot;},&quot;date&quot;:&quot;2021-01-02 16:40:05.329629923 +0100 CET m=+65.336394717&quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela me fait d&amp;#8217;ailleurs penser que je devrais changer ces logs pour montrer un timestamp plutôt qu&amp;#8217;une date formattée à la Golang.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_vector&quot;&gt;Vector&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Téléchargez Vector sur le &lt;a href=&quot;https://vector.dev/releases/&quot;&gt;site officiel&lt;/a&gt;. Vector peut se configurer en YAML, TOML ou JSON. Dans cet exemple je le configurerai en YAML.&lt;br&gt;
Toutes les options de configuration sont disponibles &lt;a href=&quot;https://vector.dev/docs/setup/configuration/&quot;&gt;ici&lt;/a&gt;. L&amp;#8217;outil est assez récent mais il est déjà possible de faire des tonnes de trucs avec.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mon fichier &lt;code&gt;vector.yaml&lt;/code&gt; contient:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;data_dir: /home/mathieu/Documents/vector
sources:

  cabourotte_prometheus:
    type: prometheus_scrape
    endpoints:
    - http://127.0.0.1:9013/metrics
    scrape_interval_secs: 15

  cabourotte_logs:
    type: journald
    current_boot_only: true
    exclude_units: []
    include_units: [&quot;cabourotte&quot;]

transforms:

  journald_json:
    type: json_parser
    inputs:
      - cabourotte_logs
    drop_field: true
    drop_invalid: true
    field: message

  log_fields:
    type: add_fields
    inputs:
      - journald_json
    overwrite: true
    fields:
      environment: &quot;prod&quot;
      location: &quot;ch-gva-2&quot;

  metric_tags:
    type: add_tags
    inputs:
      - cabourotte_prometheus
    overwrite: true
    tags:
      environment: &quot;prod&quot;
      location: &quot;ch-gva-2&quot;

sinks:
  influxdb:
    type: influxdb_metrics
    inputs:
      - metric_tags
    bucket: mcorbin
    default_namespace: service
    endpoint: http://localhost:8086/
    org: mcorbin
    token: &quot;wlJqadZ9yLdMHDpifDhSKzwej-neZ2mrF-vp955w7nZY1lJAGKP7dRiiZtYSOuh82e63zYN_IPodBWQ2XO29mw==&quot;
    healthcheck: true

  file:
    type: file
    inputs:
      - log_fields
    compression: none
    path: &quot;/tmp/vector-%Y-%m-%d.log&quot;
    encoding:
      codec: ndjson
    healthcheck: true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La configuration &lt;code&gt;data_dir&lt;/code&gt; est un chemin vers un répertoire utilisé par Vector pour stocker des metadatas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maintenant, lancez Vector avec &lt;code&gt;sudo ./vector --config ~/vector.yaml&lt;/code&gt; (j&amp;#8217;utilise sudo pour que la source &lt;code&gt;journald&lt;/code&gt; fonctionne).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_sources&quot;&gt;Sources&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;La partie &lt;code&gt;sources&lt;/code&gt; contient les différentes sources pour les logs et métriques. Nous avons ici deux sources.&lt;br&gt;
Une va récupérer les métriques exposées par Cabourotte au format Prometheus. Vector ira donc récupérer ces métriques toutes les 15 secondes.&lt;br&gt;
Une autre source va récupérer les logs de Cabourotte depuis &lt;code&gt;journald&lt;/code&gt;. Vous pourriez modifier cette source pour récupérer automatiquement les logs toutes les units de votre système.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_transforms&quot;&gt;Transforms&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une fois que les sources sont configurées, Vector peut réaliser des transformations dessus.&lt;br&gt;
Une première transformation appelée &lt;code&gt;journald_json&lt;/code&gt; se charge de transformer en json les logs de journald. En effet, voici ce qu&amp;#8217;on obtiendrait sans cette transformation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;PRIORITY&quot;: &quot;6&quot;,
  &quot;SYSLOG_FACILITY&quot;: &quot;3&quot;,
  &quot;SYSLOG_IDENTIFIER&quot;: &quot;cabourotte&quot;,
  &quot;_BOOT_ID&quot;: &quot;051a2c4dc6f74a238d257030efa2b3f1&quot;,
  &quot;_CAP_EFFECTIVE&quot;: &quot;0&quot;,
  &quot;_CMDLINE&quot;: &quot;/usr/local/cabourotte/cabourotte daemon --config /etc/cabourotte/cabourotte.yml&quot;,
  &quot;_COMM&quot;: &quot;cabourotte&quot;,
  &quot;_EXE&quot;: &quot;/usr/local/cabourotte/cabourotte&quot;,
  &quot;_GID&quot;: &quot;64171&quot;,
  &quot;_MACHINE_ID&quot;: &quot;f8de18ca659543f08aa82967a944fde0&quot;,
  &quot;_PID&quot;: &quot;16652&quot;,
  &quot;_SELINUX_CONTEXT&quot;: &quot;unconfined\n&quot;,
  &quot;_STREAM_ID&quot;: &quot;4f4bbd77076b464799455c1fd9d634dd&quot;,
  &quot;_SYSTEMD_CGROUP&quot;: &quot;/system.slice/cabourotte.service&quot;,
  &quot;_SYSTEMD_INVOCATION_ID&quot;: &quot;869cef96790a4fc99cbe81f54bc7b986&quot;,
  &quot;_SYSTEMD_SLICE&quot;: &quot;system.slice&quot;,
  &quot;_SYSTEMD_UNIT&quot;: &quot;cabourotte.service&quot;,
  &quot;_TRANSPORT&quot;: &quot;stdout&quot;,
  &quot;_UID&quot;: &quot;64171&quot;,
  &quot;__MONOTONIC_TIMESTAMP&quot;: &quot;92565244358&quot;,
  &quot;__REALTIME_TIMESTAMP&quot;: &quot;1609607085328622&quot;,
  &quot;host&quot;: &quot;mathieu&quot;,
  &quot;message&quot;: &quot;{\&quot;level\&quot;:\&quot;info\&quot;,\&quot;ts\&quot;:1609607085.3284657,\&quot;caller\&quot;:\&quot;exporter/root.go:116\&quot;,\&quot;msg\&quot;:\&quot;Healthcheck successful\&quot;,\&quot;name\&quot;:\&quot;http-mcorbin.fr\&quot;,\&quot;labels\&quot;:{\&quot;site\&quot;:\&quot;mcorbin.fr\&quot;},\&quot;date\&quot;:\&quot;2021-01-02 18:04:45.328370895 +0100 CET m=+5145.335135914\&quot;}&quot;,
  &quot;source_type&quot;: &quot;journald&quot;,
  &quot;timestamp&quot;: &quot;2021-01-02T17:04:45.328622Z&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Grâce à la transformation précédente, le json présent dans le champ &quot;message&quot; sera transformé. Nous verrons ce que ça donne un peu plus loin.&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt;: Les champs autres que &lt;code&gt;message&lt;/code&gt; sont automatiquement ajoutés par Vector.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous avons ensuite deux autres transformations: &lt;code&gt;log_fields&lt;/code&gt; et &lt;code&gt;metric_tags&lt;/code&gt;.&lt;br&gt;
Ces deux transformations réalisent la même action mais sur deux types de données différentes (logs et métriques).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;log_fields&lt;/code&gt; va récupérer la sortie de la transformation &lt;code&gt;journald_json&lt;/code&gt; et rajouter les clés &lt;code&gt;environment&lt;/code&gt; et &lt;code&gt;location&lt;/code&gt; au message. Le choix de ces clés sont totalement libres.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;metric_tags&lt;/code&gt; fait la même chose mais pour les métriques venant de Cabourotte. Les tags &lt;code&gt;environment&lt;/code&gt; et &lt;code&gt;location&lt;/code&gt; sont ajoutés aux métriques.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_sinks&quot;&gt;Sinks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est maintenant temps de transférer tout ça à des systèmes externes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le sink &lt;code&gt;influxdb&lt;/code&gt; récupèrera la sortie de &lt;code&gt;metric_tags&lt;/code&gt; et enverra les métriques dans l&amp;#8217;instance InfluxDB configurée précédemment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le sink &lt;code&gt;file&lt;/code&gt; récupérera les logs de &lt;code&gt;log_fields&lt;/code&gt; et les ajoutera dans un fichier (le nom du fichier sera en fonction de la date du log).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En résumé, voici ce que nous faisons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/vector-intro/graphe.jpg&quot; alt=&quot;Le graphe Vector&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_résultat&quot;&gt;Résultat&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_métriques&quot;&gt;Métriques&lt;/h3&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/vector-intro/influx.png&quot; alt=&quot;Des métriques sont visibles dans InfluxDB&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mes métriques (ici la valeur d&amp;#8217;un bucket, d&amp;#8217;où l&amp;#8217;augmentation perpétuelle) sont bien visibles dans InfluxDB. On voit que mes tags &lt;code&gt;environment&lt;/code&gt; et &lt;code&gt;location&lt;/code&gt; ont été ajoutés aux métriques.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_logs&quot;&gt;Logs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mes logs sont bien visibles dans &lt;code&gt;/tmp/vector-2021-01-02.log&lt;/code&gt;. Par exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
  &quot;PRIORITY&quot;: &quot;6&quot;,
  &quot;SYSLOG_FACILITY&quot;: &quot;3&quot;,
  &quot;SYSLOG_IDENTIFIER&quot;: &quot;cabourotte&quot;,
  &quot;_BOOT_ID&quot;: &quot;051a2c4dc6f74a238d257030efa2b3f1&quot;,
  &quot;_CAP_EFFECTIVE&quot;: &quot;0&quot;,
  &quot;_CMDLINE&quot;: &quot;/usr/local/cabourotte/cabourotte daemon --config /etc/cabourotte/cabourotte.yml&quot;,
  &quot;_COMM&quot;: &quot;cabourotte&quot;,
  &quot;_EXE&quot;: &quot;/usr/local/cabourotte/cabourotte&quot;,
  &quot;_GID&quot;: &quot;64171&quot;,
  &quot;_MACHINE_ID&quot;: &quot;f8de18ca659543f08aa82967a944fde0&quot;,
  &quot;_PID&quot;: &quot;16652&quot;,
  &quot;_SELINUX_CONTEXT&quot;: &quot;unconfined\n&quot;,
  &quot;_STREAM_ID&quot;: &quot;4f4bbd77076b464799455c1fd9d634dd&quot;,
  &quot;_SYSTEMD_CGROUP&quot;: &quot;/system.slice/cabourotte.service&quot;,
  &quot;_SYSTEMD_INVOCATION_ID&quot;: &quot;869cef96790a4fc99cbe81f54bc7b986&quot;,
  &quot;_SYSTEMD_SLICE&quot;: &quot;system.slice&quot;,
  &quot;_SYSTEMD_UNIT&quot;: &quot;cabourotte.service&quot;,
  &quot;_TRANSPORT&quot;: &quot;stdout&quot;,
  &quot;_UID&quot;: &quot;64171&quot;,
  &quot;__MONOTONIC_TIMESTAMP&quot;: &quot;93010244891&quot;,
  &quot;__REALTIME_TIMESTAMP&quot;: &quot;1609607530329156&quot;,
  &quot;caller&quot;: &quot;exporter/root.go:116&quot;,
  &quot;date&quot;: &quot;2021-01-02 18:12:10.329118217 +0100 CET m=+5590.335882993&quot;,
  &quot;environment&quot;: &quot;prod&quot;,
  &quot;host&quot;: &quot;mathieu&quot;,
  &quot;labels&quot;: {
    &quot;site&quot;: &quot;mcorbin.fr&quot;
  },
  &quot;level&quot;: &quot;info&quot;,
  &quot;location&quot;: &quot;ch-gva-2&quot;,
  &quot;msg&quot;: &quot;Healthcheck successful&quot;,
  &quot;name&quot;: &quot;http-mcorbin.fr&quot;,
  &quot;source_type&quot;: &quot;journald&quot;,
  &quot;timestamp&quot;: &quot;2021-01-02T17:12:10.329156Z&quot;,
  &quot;ts&quot;: 1609607530.3291318
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit que mon champ &lt;code&gt;message&lt;/code&gt; a disparu (les clés et valeurs ont été fusionnées au json principal), et &lt;code&gt;environment&lt;/code&gt; et &lt;code&gt;location&lt;/code&gt; ont bien été ajoutés à mon log.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tester_sa_configuration&quot;&gt;Tester sa configuration.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fait intéressant, il est possible de tester sa configuration. Ajoutez par exemple à la fin de votre configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;tests:
  - name: &quot;test-logs&quot;
    inputs:
      - insert_at: journald_json
        type: log
        log_fields:
          message: &quot;{\&quot;foo\&quot;: \&quot;bar\&quot;}&quot;
    outputs:
      - extract_from: &quot;log_fields&quot;
        conditions:
          - environment.equals: &quot;prod&quot;
            location.equals: &quot;ch-gva-2&quot;
            foo.equals: &quot;bar&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, on définit un test qui injectera le message &lt;code&gt;&quot;{\&quot;foo\&quot;: \&quot;bar\&quot;}&quot;&lt;/code&gt; à l&amp;#8217;étape &lt;code&gt;journald_json&lt;/code&gt;.&lt;br&gt;
On vérifie ensuite qu&amp;#8217;à la sortie de l&amp;#8217;étape &lt;code&gt;log_fields&lt;/code&gt; les clés environment et location ont été ajoutées, et on vérifie également que la clé &lt;code&gt;foo&lt;/code&gt; du message en json a été insérée.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez maintenant lancer les tests:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./vector test ~/vector.yaml
Running /home/mathieu/vector.yaml tests
test /home/mathieu/vector.yaml: test-logs ... passed&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vector permet de faire beaucoup plus, mais je ne voulais pas que cet introduction à l&amp;#8217;outil soit trop lourde. Il est même possible d&amp;#8217;exécuter du lua ou bien d&amp;#8217;utiliser la fonction &lt;a href=&quot;https://vector.dev/docs/reference/transforms/remap/&quot;&gt;remap&lt;/a&gt; pour réaliser des transformations complexes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le fait de pouvoir tester sa configuration est un gros plus, à voir ensuite à l&amp;#8217;usage jusqu&amp;#8217;à quel niveau les choses sont testables (je n&amp;#8217;ai pas poussé le système dans ses retranchements).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je n&amp;#8217;ai par contre pas trouvé si il était possible d&amp;#8217;inclure un fichier de configuration dans un autre. Cela serait très utile car je pense que les configurations peuvent vite devenir plus verbeuses. Cela permettrait aussi d&amp;#8217;avoir des fichiers consacrés aux logs et d&amp;#8217;autres aux métriques par exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je n&amp;#8217;ai pas également trouvé si il était possible de générer le graphe des différentes transformations. Ce serait également intéressant sur des configurations complexes (un peu comme &lt;code&gt;terraform graph&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe également une intégration Kubernetes pour notamment récupérer les logs de conteneurs, mais je testerai cela dans un article dédié.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vector est vraiment un outil intéressant. Le fait de pouvoir manipuler mes logs et métriques dans le même outil est un gros plus. Et avec lua de disponible, je sais que je pourrai répondre même à des besoins complexes non prévus par la configuration de base.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Etant en train de réfléchir à reconstuire complètement mon infrastructure personnelle hébergeant plusieurs sites web et applications, cela me donnera une excuse pour le tester dans un vrai contexte (notamment avec du Kubernetes).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sun, 03 Jan 2021 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2021-01-01-evolution-si/
</guid>
<link>
https://mcorbin.fr/posts/2021-01-01-evolution-si/
</link>
<title>
L'évolution de votre SI est-elle toute tracée ?
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comment évolue votre SI ? Sa voie est-elle toute tracée ? Pouvez-vous justifier vos choix ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_contexte&quot;&gt;Contexte&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le COVID-19 est derrière nous, et vous assistez à votre première conférence physique depuis longtemps.&lt;br&gt;
Après une journée à suivre des talks sur des sujets vus et revus, vous êtes au bar, et vous sirotez tranquillement votre bière en compagnie d&amp;#8217;autres personnes du public.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une personne prend la parole et décrit le fonctionnement du système d&amp;#8217;information de sa startup créée le mois dernier et ayant déjà 20 clients.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;exposé se conclut par &quot;Bien sûr tout cela va évoluer, on va tout passer en microservice dans Kubernetes le mois prochain, et utiliser Kafka comme base de données&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;assistance hoche la tête en signe d&amp;#8217;assentiment, convaincue que le but ultime de tout architecte sera bientôt atteint par ce jeune startuper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous recommandez une bière en espérant que que l&amp;#8217;alcool vous fasse oublier ce que vous venez d&amp;#8217;entendre.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_une_évolution_linéaire&quot;&gt;Une évolution linéaire ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Qui n&amp;#8217;a jamais vécu une situation plus ou moins similaire ? Il semblerait qu&amp;#8217;il existe un chemin tout tracé dans notre métier. Votre architecture évolue au gré des modes, et cela de façon prédéfinie par l&amp;#8217;industrie (ou Google).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A quel moment avons-nous arrêté de nous poser les questions: pourquoi ? Que nous apporte réellement tout ça ? Croyez-vous vraiment qu&amp;#8217;une solution unique sera adaptée aux dizaines, centaines de milliers de SI de la planète ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et pourtant, il est classique d&amp;#8217;entendre des &quot;on est en train de découper nos monolithes en microservices, le tout dans Kubernetes&quot;. Personne ne sait pourquoi, mais c&amp;#8217;est ce qu&amp;#8217;il faut faire, ce que l&amp;#8217;industrie veut, ce que les autres font. Comme ci cela allait de soit, il n&amp;#8217;y a pas à se poser de questions, Cela tombe sous le sens.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le pire ? Cela est extrêmement valorisé.&lt;br&gt;
Qui pensez-vous que les boîtes vont recruter, celui qui maintient une architecture simple, ou la personne pouvant justifier sur son C.V la construction d&amp;#8217;une usine à gaz ?&lt;br&gt;
Qui va aller parler en conférence ? Celui dont le SI tourne de manière efficace, de façon presque ennuyante, ou celui qui a monté une équipe de 50 personnes pour tout reconstruire ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Est ce que les outils et techniques cités précédemment sont de base néfastes ? Non. Comme toujours, cela a parfois du sens, et parfois non.&lt;br&gt;
Mais entre le management qui pense résoudre ses problèmes organisationnels via de nouvelles technologies, les consultants spécialisés qui poussent au n&amp;#8217;importe quoi pour faire du cash et briller en société, et la propagande des vendors, on arrive très vite à la foire au n&amp;#8217;importe quoi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est temps d&amp;#8217;estimer à sa juste valeur la simplicité, et avoir de vrais justifications lors de choix technologiques.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Fri, 01 Jan 2021 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-12-30-shell-admin-systeme/
</guid>
<link>
https://mcorbin.fr/posts/2020-12-30-shell-admin-systeme/
</link>
<title>
Trop de shell pour l'administration système: une mauvaise idée ?
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sous ce titre que certains pourront trouver provocateur se cache selon moi une vraie question: est ce qu&amp;#8217;il n&amp;#8217;est pas plus intéressant d&amp;#8217;utiliser un langage de programmation (comme Python ou Golang) à la place du shell pour faire de l&amp;#8217;administration système ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_avoir_des_bases_en_shell_est_important&quot;&gt;Avoir des bases en Shell est important&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maitriser le shell est toujours intéressant. J&amp;#8217;utilise d&amp;#8217;ailleurs régulièrement sur ma machine des commandes comme find, grep, ou awk, et j&amp;#8217;ai quelques scripts qui me permettent de changer certains réglages.&lt;br&gt;
Pour pas mal de petits besoins d&amp;#8217;administration système, un script shell peut être suffisant. Pourquoi s&amp;#8217;embêter à utiliser autre chose alors qu&amp;#8217;un petit script avec quelques conditions et quelques commandes fait le job ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Malheureusement, je pense que les &quot;petits besoins&quot; peuvent grossir rapidement, et pour moi des scripts shell trop longs sont vite un problème. Je vais essayer d&amp;#8217;expliquer pourquoi avec un exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_réaliser_un_backup&quot;&gt;Réaliser un backup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons comme exemple un grand classique de l&amp;#8217;administration système: vous voulez écrire un script réalisant un backup d&amp;#8217;une base de données quelconque.&lt;br&gt;
A première vue, le besoin est simple et pourrait être réalisé par un script shell:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On crée le backup&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On le déplace quelque part&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On pourrait très bien écrire un script shell réalisant ces deux actions.&lt;br&gt;
Mais quand on réfléchit un peu plus à ce script, et à comment le rendre &quot;prod ready&quot;, on se rend compte finalement qu&amp;#8217;on veut aussi:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Des logs pertinents, si possible structurés en json.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Une façon propre de gérer les erreurs: envoi des erreurs à des outils de type Sentry par exemple, envoi d&amp;#8217;alertes pertinentes à son outil de monitoring, slack&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Des métriques, comme par exemple le temps d&amp;#8217;exécution du script.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On peut ensuite imaginer plein d&amp;#8217;autres trucs, comme un système de retry en cas d&amp;#8217;échec par exemple. Peut être aussi qu&amp;#8217;on aura également besoin d&amp;#8217;un client S3 pour stocker le backup sur un object store, ou d&amp;#8217;interagir avec des services cloud (pour les logs et les métriques).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mon petit script est finalement en train de se complexifier, et devient de plus en plus un programme à part entière. De plus, chaque interaction avec un système externe apporte son lot de complexité (client spécifique nécessaire, authentification, mTLS&amp;#8230;&amp;#8203;) qui peut être difficile à réaliser en shell.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je veux également que ce script (ou programme) ne soit pas gêré de façon différente par rapport aux autres programmes développés dans l&amp;#8217;entreprise:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tests unitaires et tests d&amp;#8217;intégrations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code dans Git, intégration continue, avec creation de releases lors de modifications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Déploiement automatisé, avec rollbacks possibles etc&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_scripts_et_programmes&quot;&gt;Scripts et programmes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pense qu&amp;#8217;il faut éviter de faire une distinction entre les scripts écrits par les ops et les programmes écrits par les développeurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le cycle de vie de ces base de codes doit être selon moi identique, et utiliser un langage de programmation comme Go pour réaliser ce genre de tâche amène son lot d&amp;#8217;avantages, comme par exemple :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;L&amp;#8217;énorme écosystème du langage. Je n&amp;#8217;ai pas à me demander si ce sera la galère d&amp;#8217;envoyer mes logs, métriques, alertes ou événements à des systèmes externes car j&amp;#8217;aurai des libs clientes dans le langage.&lt;br&gt;
Vous allez me dire que tout cela est aussi faisable en shell. Il est en effet possible d&amp;#8217;installer des paquets pour obtenir certains clients (kafkacat, s3cmd&amp;#8230;&amp;#8203;), d&amp;#8217;utiliser curl ou autre, mais le confort de développement sera toujours en dessous de ce que l&amp;#8217;on trouve dans des langages de programmation complets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Le tooling: outils de tests, formatter, analyse statique du code, gestion des dépendances&amp;#8230;&amp;#8203; Cela est éventuellement possible en shell, mais on est reste selon moi loin de ce qu&amp;#8217;on trouve ailleurs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Possibilité de produire un binaire statique dans le cas de Go, et donc d&amp;#8217;éviter d&amp;#8217;avoir à polluer la machine en installant des tonnes de packages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Je trouve qu&amp;#8217;écrire du shell correctement est difficile (la syntaxe est une chose, mais ça on peut s&amp;#8217;y habituer). On se retrouve vite limité d&amp;#8217;un point de vue architecture logicielle avec le shell, et se tirer une balle dans le pied est très rapide (sur la gestion des erreurs par exemple).&lt;br&gt;
Ayant hérité dans une précédente expérience de scripts shell de plus de 10000 lignes, ou de &quot;programmes&quot; shell complexes où ça &lt;code&gt;source&lt;/code&gt; dans tout les sens pour avoir une sorte de système de modules, c&amp;#8217;est juste l&amp;#8217;enfer à maintenir.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bref, du code c&amp;#8217;est du code, que ce soit écrit par un dev ou par un ops. Les deux mondes doivent avoir les mêmes exigences sur le code produit. D&amp;#8217;ailleurs, cela permet à tout le monde de travailler sur les différents programmes de l&amp;#8217;entreprise de la même façon, et donc les développeurs peuvent aussi contribuer à l&amp;#8217;outillage ops de façon standardisée.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je ne dis pas qu&amp;#8217;on ne doit jamais faire de shell, pour de petites tâches cela marche très bien, mais dès qu&amp;#8217;on commence à avoir des centaines de lignes de shell, avec de la logique dans le script, c&amp;#8217;est le signe qu&amp;#8217;il est temps selon moi de passer à autre chose.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On me dit aussi parfois que coder en shell est plus rapide que dans un autre langage. C&amp;#8217;est vrai que le shell se prête très bien à certaines choses, comme la rechercher et manipulation de fichiers par exemple. Si votre script ne fait que ça vous pouvez continuer comme je l&amp;#8217;ai dit précédemment à faire du shell. Mais je ne pense pas que cet argument tient quand le script se complexifie, je dirai même que c&amp;#8217;est l&amp;#8217;inverse car le script sera plus maintenable dans un autre langage de programmation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;je pense que l&amp;#8217;abus de shell est dangereux pour la santé. Un certain nombre de scripts seraient plus maintenables et plus fiables dans un langage comme Golang (je cite beaucoup Go ici car je pense que c&amp;#8217;est un très bon langage pour ce genre de tâches. Mais rassurez vous, le langage &lt;a href=&quot;https://mcorbin.fr/posts/2019-06-13-one-year-of-go/&quot;&gt;a aussi ses défauts&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les développeurs et les ops doivent travailler de la même façon sur leurs programmes, et le shell apporte trop de désanvantages pour être utilisé pour des programmes complexes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 30 Dec 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-12-04-pull-push/
</guid>
<link>
https://mcorbin.fr/posts/2020-12-04-pull-push/
</link>
<title>
Métriques, monitoring, push vs pull, Riemann, Vector
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai été et je suis toujours convaincu qu&amp;#8217;il est plus simple et efficace de faire du push par rapport à du pull pour le monitoring d&amp;#8217;une infrastructure. Dans cet article, j&amp;#8217;expliquerai pourquoi et parlerai de différents outils comme Riemann, Prometheus ou Vector.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_riemann&quot;&gt;Riemann&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai à une époque beaucoup contribué à &lt;a href=&quot;https://riemann.io&quot;&gt;Riemann&lt;/a&gt;. Cet outil de monitoring écrit par Kyle Kingsbury (Aphyr) n&amp;#8217;a selon moi toujours aucun équivalent sur le marché du monitoring aujourd&amp;#8217;hui. C&amp;#8217;est plein de bonnes idées, c&amp;#8217;est vraiment un outil où en tant qu&amp;#8217;utilisateur (et puis en tant que contributeur) j&amp;#8217;ai eu un effet &quot;Wahou&quot; en voyant comme ça marche.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous ne connaissez pas Riemann ? La &lt;a href=&quot;http://riemann.io/howto.html&quot;&gt;documentation&lt;/a&gt; est un bon point d&amp;#8217;entrée, mais voici un petit résumé.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Riemann est un outil de stream processing pour le monitoring. Vous pouvez y pousser toutes sortes d&amp;#8217;événéments (métriques applicatives, systèmes, événements divers et variés&amp;#8230;&amp;#8203;) et Riemann va pouvoir les transférer à des systèmes externes (comme Graphite, InfluxDB&amp;#8230;&amp;#8203;), réaliser des calculs complexes (notamment sur des fenêtres de temps) et générer des alertes (et les envoyer à Pagerduty par exemple). Voici un event Riemann:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:host &quot;mcorbin.fr&quot; ;; la source de la métrique
 :service &quot;ram-usage&quot; ;; le service concerné
 :ttl 60 ;; un TTL associé à la métrique pour certains usages interles
 :tags {:environment &quot;prod&quot;} ;; des tags qui peut être ajoutés à la métrique
 :time 1606854392183 ;; un timestamp
 :metric 75 ;; la valeur de la métrique}
 ;; d'autres champs arbitraires peuvent être attachés à la métrique.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La configuration de Riemann est du code (Clojure), et sa configuration est 100 % testable unitairement. Voici un exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(where (service &quot;ram-usage&quot;)
  (by [:host]
    (fixed-time-window 60
      (smap mean
        influxdb))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, je filtre tous les événements ayant pour service &lt;code&gt;ram-usage&lt;/code&gt;, je bufferise pour chaque &lt;code&gt;:host&lt;/code&gt; (grâce à &lt;code&gt;by&lt;/code&gt;) ces événements pendant 60 secondes, et je calcule ensuite la moyenne de ces événements (toujours par host). Cette moyenne est envoyée ensuite à InfluxDB.&lt;br&gt;
Calculer la moyenne de la RAM n&amp;#8217;est pas utile mais cela me permettait de donner un exemple simple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Riemann est vraiment très (très) expressif, et surtout c&amp;#8217;est du code donc extensible à l&amp;#8217;infini (on peut écrire ses propres fonctions). Par exemple, je l&amp;#8217;avais utilisé avec succès pour détecter des déséquilibres dans des partitions Kafka (en comparant les métriques de chaque partitions entre elles en temps réel).&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus, tout est immuable dans Riemann. Un événement peut passer dans plusieurs &quot;streams&quot; sans problème, donc vous pouvez transférer l&amp;#8217;événements original à un autre système tout en faisant des calculs complexes dessus dans des streams indépendants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;avais d&amp;#8217;ailleurs réalisé une &lt;a href=&quot;https://mcorbin.fr/pdf/slides/riemann.pdf&quot;&gt;présentation&lt;/a&gt; sur cet outil (car il y a beaucoup d&amp;#8217;autres trucs cools dans Riemann).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Riemann est toujours utilisé dans l&amp;#8217;entreprise où je travaille aujourd&amp;#8217;hui (bien que l&amp;#8217;on transitionne sur Prometheus, j&amp;#8217;en parlerai plus loin), mais l&amp;#8217;outil a quand même quelques problèmes, notamment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Difficile de faire de la HA avec (il faut faire du sharding manuel). Mais bon, est ce que c&amp;#8217;est mieux chez la concurrence ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perte de l&amp;#8217;état interne des streams en cas d&amp;#8217;un reload (changement de configuration)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gestion des fenêtres de temps parfois un peu étrange (j&amp;#8217;en parlerai plus loin)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quelques petits défauts notamment sur le steam &lt;code&gt;(by)&lt;/code&gt; (qui permet de créer plusieurs sous streams en fonction de clés d&amp;#8217;un événement) qui n&amp;#8217;était jamais GC (donc si vous avez beaucoup de cardinalité ça posait des problèmes).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais de manière générale, Riemann fonctionne, et c&amp;#8217;est fou qu&amp;#8217;un outil maintenu par la communauté soit allé aussi loin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais pour aller plus loin et corriger ses défauts structurels il aurait besoin d&amp;#8217;une réécriture &quot;from scratch&quot;. C&amp;#8217;est un projet qui mettrait au minimum plusieurs mois pour quelqu&amp;#8217;un de motivé travaillant un peu tous les jours (et on sait que les estimations en informatique c&amp;#8217;est pas fiable, donc ce serait beaucoup plus en réalité :D).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais reparlons du push et du pull.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_prometheus&quot;&gt;Prometheus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prometheus s&amp;#8217;impose aujourd&amp;#8217;hui comme un standard, qu&amp;#8217;on le veuille ou non. L&amp;#8217;outil a été pensé et conçu pour ne fonctionner qu&amp;#8217;en mode &quot;pull&quot;: les services à monitorer exposent les métriques via HTTP, et Prometheus va les chercher périodiquement. Selon la doc Prometheus, cela a plusieurs avantages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;Pulling over HTTP offers a number of advantages:

    You can run your monitoring on your laptop when developing changes.
    You can more easily tell if a target is down.
    You can manually go to a target and inspect its health with a web browser.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je ne suis d&amp;#8217;accord avec aucun de ces affirmations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Déjà, qu&amp;#8217;une métrique soit exposée en HTTP ou poussée sur le réseau est un détail d&amp;#8217;implémentation. Je pourrai très bien exposer mes métriques je sais pas trop où en dev et autre part en prod par exemple.&lt;br&gt;
Ensuite, c&amp;#8217;est vrai que Prometheus permet de détecter si une cible ne répond plus. C&amp;#8217;est également possible de le faire avec du push en détectant une source n&amp;#8217;ayant pas émis de données pendant X temps. Cela demande un peu de travail, mais ça se fait (et je l&amp;#8217;ai fait dans certains projets).&lt;br&gt;
Pour le troisième point, pareil, détail d&amp;#8217;implémentation. Je pourrai avoir mes métriques exposées d&amp;#8217;une façon ou une autre pour le debugging et les pousser quand même sur le réseau.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par contre, voici selon moi les désavantages du pull:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Complexité réseau. En push, vous avez &lt;strong&gt;1 règle&lt;/strong&gt; de firewalling: de vos applications à votre truc qui stocke vos métrique (si c&amp;#8217;est Kafka c&amp;#8217;est encore mieux). En pull, si j&amp;#8217;ai 10 applications qui exposent du Prometheus sur un serveur, j&amp;#8217;ai 10 ports ouverts entre mon Prometheus et mon serveur. Et ça sur chaque serveur.&lt;br&gt;
Vous allez me dire &quot;c&amp;#8217;est pas grave, moi j&amp;#8217;automatise mon infra, ouvrir des ports c&amp;#8217;est facile !&quot;. Si on veut, ça reste sujet à erreur. Notre job est déjà assez complexe pour ne pas avoir à se compliquer la vie.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Si Prometheus ne pull plus pour une raison X ou Y, vos métriques sont perdues. En push, je peux avoir mon Kafka (par exemple) qui fait buffer et permet de &quot;récupérer&quot; mes métriques une fois un incident résolu.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Je pense que le push est plus simple à scale, et plus flexible. Dans une ancienne expérience on envoyait toutes nos métriques dans Kafka. N&amp;#8217;importe qui pouvait brancher son consumer dessus et envoyer les métriques où il voulait, c&amp;#8217;était super.&lt;br&gt;
Quelqu&amp;#8217;un veut tester InfluxDB ? Pas de problème. Vous décidez de partir sur Datadog finalement ? Allez, un nouveau consumer, et vous envoyez tout ça à l&amp;#8217;extérieur. Bref, zéro couplage, le top.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et enfin, je n&amp;#8217;aime pas les DSL à la Prometheus. Avoir un DSL, OK, mais je veux pouvoir facilement l&amp;#8217;étendre avec du code et avoir accès à un vrai langage de programmation. Sinon les queries deviennent des usines à gaz.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_je_recommande_prometheus&quot;&gt;Je recommande Prometheus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pourtant, j&amp;#8217;ai encouragé le passage à Prometheus dans mon équipe. Pourquoi ? Pragmatisme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, Prometheus est partout. Si vous faites du Kubernetes par exemple, ne pas utiliser Prometheus c&amp;#8217;est se tirer une balle dans le pied. Les intégrations sont là, et soyons honnête la solution fonctionne quand même.&lt;br&gt;
Je ne l&amp;#8217;aurai pas implémenté de cette façon si j&amp;#8217;avais eu le choix, mais Prometheus est là, facile à installer, facile à brancher sur votre service de discovery préféré, et ça marche.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais les outils ne vivent pas pour toujours. Dans 2, 3, 5 ans ou plus de nouveaux outils apparaîtrons, et j&amp;#8217;espère qu&amp;#8217;on aura quelque chose de différent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_mon_outil_idéal&quot;&gt;Mon outil idéal&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je reste convaincu que beaucoup d&amp;#8217;idées de Riemann mériteraient d&amp;#8217;être implémentées dans d&amp;#8217;autres outils, avec quelques variations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il reste un soucis avec le stream processing. On ne peut souvent que calculer des approximations lors d&amp;#8217;aggregations d&amp;#8217;événements car on n&amp;#8217;a pas toujours de garantie d&amp;#8217;ordre.&lt;br&gt;
Reprenons notre exemple de moyenne sur 10 secondes que nous avons vu précédemment. Vous recevez des événements entre T et T+10, vous calculez une moyenne sur ces événements. Que devez vous faire si vous recevez des événements du passé ? Dans le mauvais ordre ? Devons nous les ignorer ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/pull-push/events-bad-order.jpg&quot; alt=&quot;Si des événements arrivent en retard, ils sont perdus&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais cela n&amp;#8217;est finalement pas grave. Vous pouvez calculer très rapidement une approximation qui sera suffisante pour la plupart des cas. Si je veux faire de l&amp;#8217;aggregations sur des métriques venant de 100 machines, tant pis si je n&amp;#8217;ai au final que 99 événements si cela me permet d&amp;#8217;avoir très rapidement (en quelques secondes) une idée de la santé de la plateforme. Et si mes métriques arrivent en continu dans mon système, l&amp;#8217;événement manquant pourra être pris en compte plus tard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On pourrait imaginer également la mise en place d&amp;#8217;un petit buffer de quelques secondes pour limiter ce problème.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais parfois, on a besoin d&amp;#8217;avoir la garantie que notre calcul est correct. Je pense que le même outil de stream processing pourrait réaliser cela si implémenté correctement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaginez si vous pouviez réinjecter dans un outil de stream processing des données venant de votre base de données timeseries.&lt;br&gt;
On peut ici parler de continuous query. Si vous avez la capacité de ré-emettre les événements (ordonnés par timestamp) dans votre outil de stream processing, l&amp;#8217;outil pourrait recalculer la valeur exacte de votre aggregation à partir de ces événements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela demande à l&amp;#8217;outil de gérer correctement les fenêtre de temps. Si l&amp;#8217;on sait que les événements arrivent dans l&amp;#8217;ordre, l&amp;#8217;outil peut se contenter de se baser sur le temps de chaque événement pour faire avancer les différentes fenêtre de temps (et non exécuter un &quot;tick&quot; bêtement toutes les 10 secondes). Le temps n&amp;#8217;a pas à avancer à la même vitesse dans la vraie vie et dans votre système de streaming, c&amp;#8217;est ce stream d&amp;#8217;événement qui doit être la source de vérité concernant le temps.&lt;br&gt;
Cela a l&amp;#8217;avantage de rendre l&amp;#8217;outil prédictif: pour un même jeu de données en entrée, la sortie sera toujours la même. Reprendre un calcul est également facile vu qu&amp;#8217;on sait où on s&amp;#8217;est arrêté.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et là: on a le meilleur des deux mondes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mon outil de stream processing pour alerter rapidement (car par expérience, je veux souvent générer une alerte dès que je reçois un événement spécifique, je n&amp;#8217;ai pas toujours besoin de faire des calculs pour générer mon alerte), déplacer mes métriques d&amp;#8217;un système à un autre, faire des calculs approximatifs (parfois complexes) en temps réel sur mes métriques.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Le même outil, pour faire du continuous query (à partir d&amp;#8217;une ou plusieurs sources de données), tout en m&amp;#8217;appuyant pourquoi pas sur les capacités de calculs de ma base de données timeserie pour pré-calculer certains trucs (et éviter de déplacer trop de données). Dans ce mode de fonctionnement, chaque query (et ses calculs associés) pourrait avancer &quot;à son rythme&quot; et elles n&amp;#8217;auraient aucun effet de bords entre elles.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et le tout avec un langage commun entre les deux modes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/pull-push/event-in-order.jpg&quot; alt=&quot;Si des événements arrivent dans l&amp;#8217;ordre, le calcul est correct&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il m&amp;#8217;arrive tous les 3 à 6 mois de commencer à écrire une version de l&amp;#8217;outil décrit. Mais je ne suis jamais totalement satisfait donc je laisse tomber (et cela prend beaucoup de temps, que je n&amp;#8217;ai pas forcément, j&amp;#8217;ai déjà un certain nombre de projets à maintenir).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ma dernière tentative date d&amp;#8217;il y a 3 semaines où j&amp;#8217;ai écrit un POC où des unités de calculs peuvent se représenter en structures de données Clojure (au format &lt;a href=&quot;https://github.com/edn-format/edn&quot;&gt;edn&lt;/a&gt;), avec un DSL simple pour écrire la configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(-&amp;gt; (init {:name :foo
           :stream? true
           :by [:host]})
     a/increment
    (where :&amp;gt; 10)
    (fixed-event-window 2)
    mean
    (debug!))

#:pipeline{:name &quot;foo&quot;
           :stream? true
           :by [:host]
           :actions
           [#:action{:name :increment}
            #:action{:name :where
                     :params [:&amp;gt; 10]}
            #:action{:name :fixed-event-window
                     :params [2]}
            #:action{:name :mean}
            #:action{:name :debug!}]}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette structure de données peut ensuite être transformée en stream exécutable. Cette structure de données peut également me servir de constructeur pour construire à la demande des unités de calculs, connectées à un serveur recevant des événements en mode streaming ou instanciées à la volée pour des continuous query.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais je n&amp;#8217;ai malheureusement pas de temps à consacrer à ce projet actuellement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_vector&quot;&gt;Vector&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Connaissez vous &lt;a href=&quot;https://vector.dev/&quot;&gt;Vector&lt;/a&gt; ? Cet outil écrit en Rust permet notamment d&amp;#8217;interconnecter différents systèmes entre eux. Vous le laissez scrap du Prometheus, consommer des logs, du Kafka&amp;#8230;&amp;#8203; Et il se charge de transférer tout ça à des systèmes extérieurs (voir à d&amp;#8217;autres instances de Vector).&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez même réaliser certains calculs ou modifications à vos métriques et logs, et étendre le projet en lua (et donc théoriquement en &lt;a href=&quot;https://fennel-lang.org/&quot;&gt;fennel&lt;/a&gt; si vous aimez Clojure).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On peut aussi d&amp;#8217;une certaine façon tester sa configuration (qui est écrite en toml, yaml ou json).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Interconnecter différents systèmes est, comme dit précédemment, une des forces de Riemann. D&amp;#8217;ailleurs &lt;a href=&quot;https://twitter.com/kartar&quot;&gt;James Turnbull&lt;/a&gt;, un des mainteneurs de Riemann (qui avait aussi écrit un livre sur le sujet), travaille sans surprise sur Vector.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme indiqué dans sa documentation, Vector n&amp;#8217;est pas fait pour faire du stream processing complexe. Mais je trouve le concept génial, et surtout on a enfin un outil bien conçu (du moins il semblerait après quelques tests rapides) pour scrape du Prometheus et renvoyer tout ça à d&amp;#8217;autres systèmes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela faisait longtemps que je n&amp;#8217;avais pas été aussi enthousiaste sur un outil de monitoring. C&amp;#8217;est peut être également une bonne excuse pour faire du Rust et contribuer un peu au projet. Et clairement si je pouvais avoir un Riemann-like compatible Vector pour les transformations complexes ce serait super cool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je prévois de tester Vector en détail sur mon infrastructure personnelle dans les mois à venir (et pourquoi pas faire un article dédié sur l&amp;#8217;outil), et je pense que Vector peut devenir une des briques pour de nouveaux outils basés sur le push, et apporter la flexibilité que j&amp;#8217;évoquais précédemment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Fri, 04 Dec 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-11-29-developpeur-cloud/
</guid>
<link>
https://mcorbin.fr/posts/2020-11-29-developpeur-cloud/
</link>
<title>
Le métier de développeur Cloud
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai récemment eu l&amp;#8217;occasion de parler (rapidement) lors d&amp;#8217;une table ronde de mon métier. J&amp;#8217;avais préparé pour cette occasion des réponses à un certain nombre de questions, et je me dis qu&amp;#8217;en faire un article peut être intéressant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pourquoi_cet_article&quot;&gt;Pourquoi cet article&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je me suis rendu compte que l&amp;#8217;on parle beaucoup du Cloud mais très peu de comment le Cloud est implémenté, et du travail de développeur chez un Cloud Provider.&lt;br&gt;
Au cours de discussions où je parlais du Cloud avec des gens, j&amp;#8217;ai souvent eu des retours me disant des choses comme &quot;je me suis jamais demandé comment cela fonctionnait&quot; ou bien &quot;je ne pensais pas du tout à tous ses aspects en tant qu&amp;#8217;utilisateur&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pourtant, c&amp;#8217;est un domaine très intéressant (bien qu&amp;#8217;assez spécifique) où l&amp;#8217;on ne s&amp;#8217;ennuie jamais. J&amp;#8217;entends souvent dire &quot;Le Cloud c&amp;#8217;est de la magie&quot;, vraiment ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bref, c&amp;#8217;est quoi mon job ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_cloud&quot;&gt;Le Cloud&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous êtes peut être utilisateur de services Cloud pour déployer vos applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous cliquez sur un bouton, un groupe de machines se déploie, vous cliquez sur un autre bouton et un load balancer est installé devant ces machines, répartissant le trafic sur vos applications et exécutant des healthchecks.&lt;br&gt;
Vous faites un appel API (utilisant une CLI par exemple), de nouvelles machines se déploient, le load balancer est automatiquement mis à jour. Un autre appel, et c&amp;#8217;est un cluster Kubernetes qui se déploie&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Derrière tous ces services, il y a (entre autre) des programmes. Ces programmes, il faut les développer. C&amp;#8217;est le travail d&amp;#8217;un développeur ou d&amp;#8217;une développeuse Cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_développer_sa_stack_cloud&quot;&gt;Développer sa stack Cloud&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A Exoscale, nous développons notre propre solution Cloud. On ne se contente pas d&amp;#8217;utiliser des solutions toutes faites, mais développons nos propres solutions, nos propres orchestrateurs, et c&amp;#8217;est je pense un point très important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On m&amp;#8217;a parfois demandé &quot;mais ça apporte quoi d&amp;#8217;avoir sa propre solution et pas une solution toute faite&quot; ? Cela a selon moi plusieurs avantages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Déjà, pouvoir faire ses propres choix technologiques. A Exoscale, la majorité des programmes sont écrits en &lt;a href=&quot;https://clojure.org/&quot;&gt;Clojure&lt;/a&gt; (même si l&amp;#8217;on a quand même un peu de Java, Go, C, Python&amp;#8230;&amp;#8203; car finalement chaque langage a son utilisation) et je pense que le choix de Clojure est en partie responsable de notre capacité actuelle à sortir rapidement (et maintenir et faire évoluer) des services fiables, le tout par de petite équipes (vous seriez je pense surpris de combien de personnes maintiennent les différents projets).&lt;br&gt;
Mais cela sera sûrement le sujet d&amp;#8217;un article dédié.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite, même quand vous utilisez des solutions Cloud toutes faites, vous allez devoir les maîtriser sur le bout des doigts, les forker, contribuer, parfois dériver de l&amp;#8217;implémentation originale car cette dernière ne correspond pas ou plus à vos besoins (peut être que les mainteneurs originaux ne sont pas intéressés par vos changements car trop spécifiques ?)&amp;#8230;&amp;#8203;&lt;br&gt;
Bref, au final vous vous retrouvez également avec votre propre solution Cloud qui est un fork de l&amp;#8217;originale (bonne chance pour les rebase), avec des centaines de milliers ou millions de lignes de codes à maintenir.&lt;br&gt;
De plus, les solutions toutes faites sont conçues pour tourner de plein de façons différentes, sur plein de hardware différents, alors que vous, vous savez généralement ce que vous voulez. Bref, vous avez un paquet de code mort que vous devez quand même maintenir.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Parlons égalemement du tooling. Si vous utilisez une solution Cloud générique, et que vous proposez ensuite un produit seulement disponible chez vous, est ce que les mainteneurs de la solution générique approuveront l&amp;#8217;ajout de votre solution spécifique dans leurs outils (Terraform, CLI&amp;#8230;&amp;#8203;) ? Probablement que non.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Avoir sa propre solution permet de travailler rapidement, d&amp;#8217;innover, et de sortir des produits Cloud fonctionnant avec des programmes simples et performants, sur une stack qu&amp;#8217;on maitrise de A à Z.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais revenons au métier de développeur Cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_difficulté_du_cloud&quot;&gt;La difficulté du Cloud&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un Cloud peut être vu qu&amp;#8217;une certaine façon comme un système distribué. Prenons un exemple d&amp;#8217;infrastructure toute simple: un groupe de machines virtuelles dans un réseau privé et avec un load balancer en front.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a déjà ici différents composants; des machines, un réseaux privé, un load balancer. Chacun de ces composants est &quot;déployé&quot; quelque part:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Les machines tournent sur des hyperviseurs. Le disque de la machine (en cas de stockage local) est également présent sur l&amp;#8217;hyperviseur.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Des règles réseaux (que ce soit pour les interfaces publiques ou privées) doivent être installées sur les hyperviseurs (comme vous vous en doutez il faut router les paquets là où il faut).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Des machines hébergent le composant faisant le load balancing (à Exoscale, quand vous créez un load balancer vous avez d&amp;#8217;ailleurs deux instances en &lt;strong&gt;actif/actif&lt;/strong&gt; de déployée). Ce composant est configuré en fonction des machines du groupe de machine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Des règles réseaux doivent être ajoutées sur l&amp;#8217;hyperviseur pour chaque machine derrière le load balancer (dans notre cas, pour faire de la décapsulation IPIP et du Direct Server Return notamment, si le sujet vous intéresse j&amp;#8217;ai un talk de prêt sur le fonctionnement interne de notre load balancer, peut être que je le ferai au format vidéo à l&amp;#8217;occasion).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;oublie sûrement des trucs mais vous avez je pense saisi le problème: plusieurs composants distribués à différents endroits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une vue utilisateur ultra simplifiée serait:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/dev-cloud/lb_exemple.jpg&quot; alt=&quot;un exemple d&amp;#8217;infrastructure avec 2 load balancers et deux machines virtuelles&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus, par sa nature l&amp;#8217;état d&amp;#8217;une plateforme Cloud change constamment, par exemple lors d&amp;#8217;actions utilisateurs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Un utilisateur ajoute une machine au groupe de machines, elle doit être automatiquement ajoutée au réseau privé et au load balancer. Et l&amp;#8217;inverse pour sa suppression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vous changez les règles de load balancing (par exemple, vous modifiez le healthcheck, le port de destination&amp;#8230;&amp;#8203;) la configuration du load balancer doit être mis à jour.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;Insérez ici tout ce que vous pouvez faire sur un Cloud: snapshot/restore, bidouilles réseaux, firewalling, déployer des clusters kube&amp;#8230;&amp;#8203;&amp;gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais aussi parce que nous, gestionnaires du Cloud, devons réaliser des actions sur la plateforme:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mises à jour.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Migration (live) de machines virtuelles entre hyperviseurs. Bien sûr la machine doit migrer avec tout son état, règles réseaux incluses par exemple, et les règles doivent être nettoyées sur l&amp;#8217;hyperviseur source.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plein d&amp;#8217;autre choses ;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et bien sûr, les pannes et incidents:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On gère de l&amp;#8217;infrastructure physique, l&amp;#8217;infrastructure physique ça pète, tout simplement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Il peut se passer plein de choses marrantes niveau réseau.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Et bien sûr, aucun programme n&amp;#8217;est parfait, malgré tous les efforts un bug peut arriver.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a donc une sorte de système distribué où il peut se passer plein de trucs, et bien sûr en tant que client vous voulez juste que ça marche, et si possible 24H/24 et 7H/7 :D&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a donc besoin de programmes capables de piloter des machines virtuelles, des load balancers, configurer du réseau, des clusters Kubernetes&amp;#8230;&amp;#8203; Et surtout de faire &lt;strong&gt;converger&lt;/strong&gt; l&amp;#8217;état global de la plateforme dans l&amp;#8217;état voulu en cas de changement (volontaire ou non).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et finalement, voilà ce que je fais: développer ces programmes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_agents_et_orchestrateurs&quot;&gt;Agents et Orchestrateurs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On peut sûrement faire la distinction entre deux types de programmes chez un Cloud Provider. Les agents et les orchestrateurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;les agents sont des daemons simples qui reçoivent des ordres. Par exemple, un agent tourne sur les hyperviseurs, expose une API qui lui permet par exemple de configurer le réseau d&amp;#8217;une machine virtuelle. L&amp;#8217;agent ne prend pas de décision, il reçoit un ordre (&quot;configure moi cette machine virtuelle&quot;, &quot;démarre cette machine&quot;, &quot;configure ce load balancer&quot;, &quot;configure ce réseau&quot;&amp;#8230;&amp;#8203;) et l&amp;#8217;applique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les orchestrateurs sont les donneurs d&amp;#8217;ordres, et sont l&amp;#8217;intelligence de la plateforme. C&amp;#8217;est eux qui vont coordonner les agents (voir parler avec d&amp;#8217;autres orchestrateurs) pour faire converger la plateforme dans l&amp;#8217;état voulu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est un domaine passionnant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Là aussi, voici une vue &lt;strong&gt;simplifiée&lt;/strong&gt; de ce qu&amp;#8217;il se passe en réalité:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/dev-cloud/orchestration.jpg&quot; alt=&quot;une infrastructure gérée par des orchestrateurs&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y a plein de problèmes &quot;marrants&quot; à régler lors de l&amp;#8217;écriture d&amp;#8217;orchestrateurs ou d&amp;#8217;agents, comme par exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Eviter les race conditions (actions sur la même entité en parallèle)
, Ne pas perdre d&amp;#8217;actions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pouvoir déclencher des exécutions de jobs depuis de multiples sources (actions utilisateurs, actions d&amp;#8217;administration, événements&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Savoir récupérer &quot;l&amp;#8217;état du monde&quot; pour une entité et construire et exécuter le job qui fera converger l&amp;#8217;entité vers l&amp;#8217;état voulu (les orchestrateurs sont très déclaratifs).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gestion des retry et de l&amp;#8217;alerting.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous avons résolu ces problèmes au fil du temps pour arriver à notre solution actuelle qui continue d&amp;#8217;ailleurs d&amp;#8217;évoluer (et certaines librairies utilisées sont open source et disponibles sur &lt;a href=&quot;https://github.com/exoscale/&quot;&gt;Github&lt;/a&gt;).&lt;br&gt;
Cette solution est derrière tout nos nouveaux projets depuis un petit moment déjà, et c&amp;#8217;est &lt;strong&gt;très&lt;/strong&gt; efficace.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous êtes intéressé par le sujet ? Nous devrions publier une série d&amp;#8217;articles sur les orchestrateurs et notamment sur notre implémentation de notre offre de Kubernetes managé en début d&amp;#8217;année prochaine sur le blog d&amp;#8217;Exoscale.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_reste_de_la_plateforme&quot;&gt;Le reste de la plateforme&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Facturation, API Gateway, outils de stream processing, gestion des utilisateurs et organisations&amp;#8230;&amp;#8203; sont également des choses importantes sur lesquelles on doit intervenir.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bien sûr, il y a également chez un Cloud Provider des équipes frontend, des ingénieurs réseaux (gérer le routage interne dans les datacenters mais aussi externe), systèmes, hardware, des personnes travaillant sur le tooling (vous fournissant de supers intégrations Terraform, CLI&amp;#8230;&amp;#8203; dès la sortie d&amp;#8217;un nouveau produit), des équipes orientées avant vente&amp;#8230;&amp;#8203;&lt;br&gt;
On retrouve des compétences très vastes, de l&amp;#8217;infrastructure physique (design de rack, choix et gestion du hardware&amp;#8230;&amp;#8203;) jusqu&amp;#8217;au frontend, et être en contact permanent avec des personnes travaillant dans tous ces domaines est super intéressant et enrichissant.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_compétences_nécessaires_pour_un_développeur_cloud&quot;&gt;Les compétences nécessaires pour un développeur Cloud&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On m&amp;#8217;avait demandé quelles sont les compétences nécessaires pour développer des produits Cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En plus des compétences traditionnelles de développement (et tous les à côtés: CI/CD, monitoring, logging&amp;#8230;&amp;#8203;), avoir une affinité avec le monde du système et du réseau est je pense important.&lt;br&gt;
Mes années d&amp;#8217;expérience d&amp;#8217;administrateur système me sont grandement utiles, et bien qu&amp;#8217;épaulé par des experts systèmes et réseaux (car certains produits demandent des connaissances pointues dans ces domaines) il faut comprendre les technologies et protocoles avec lesquels on travaille.&lt;br&gt;
Il est difficile par exemple d&amp;#8217;écrire des agents intéragissant avec le réseau si vous ne connaissez rien en réseau. Nous (les dev) sommes également d&amp;#8217;astreintes, donc savoir aller voir ce qu&amp;#8217;il se passe niveau réseau pour des produits comme le load balancer est utile ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais je le redis, je ne suis pas par exemple expert réseau, et les collègues experts sur ces sujets (ops, système, réseau, virtualisation&amp;#8230;&amp;#8203;) sont indispensables, notamment lors du design des produits et en cas de problème critique. Nous (développeurs et développeuses) sommes accompagnés par ces experts pour implémenter les solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une autre compétence dont on ne parle très peu et qui est je pense très utile (qu&amp;#8217;on soit dev, ops, quel que soit le domaine métier d&amp;#8217;ailleurs), est d&amp;#8217;arriver à garder en tête la vue d&amp;#8217;ensemble du fonctionnement des produits que l&amp;#8217;on développe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bien sûr, il y a de la documentation etc&amp;#8230;&amp;#8203; Mais je pense que pouvoir réfléchir sur le produit dans son ensemble (dès sa conception, pendant son implémentation, pendant sa vie) est très important.&lt;br&gt;
C&amp;#8217;est comme cela que l&amp;#8217;on peut détecter des erreurs de design, réfléchir aux différents scénarios de pannes possibles, réfléchir à comment faire communiquer les différents composants, réagir rapidement en cas de problèmes&amp;#8230;&amp;#8203; Bref, je pense qu&amp;#8217;avoir cette vue d&amp;#8217;ensemble sur les produits et sur la façon dont ils interagissent entre eux (et savoir ensuite documenter et implémenter cette vue d&amp;#8217;ensemble) est indispensable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enfin, la simplicité. Je pense que concevoir des solutions simples et efficaces, reconnaître les avantages &lt;strong&gt;et inconvénients&lt;/strong&gt; des technologies et outils est la clé de la réussite dans l&amp;#8217;informatique.&lt;br&gt;
On parle d&amp;#8217;ailleurs souvent de pénuries dans nos métiers. Si les gens arretaient de monter des usines à gaz (ou suivre la hype aveuglément) il faudrait selon moi déjà beaucoup moins de monde dans les projets ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Travailler sur un produit tech, dont nous sommes nous même utilisateur, le tout entouré de super collègues, c&amp;#8217;est cool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les challenges techniques sont là, et c&amp;#8217;est très satisfaisant de mettre ce genre de produits en prod et ensuite de voir les gens commencer à les utiliser (même ce blog est derrière le load balancer dont je parle dans cet article par exemple !).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sun, 29 Nov 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-11-11-commentator/
</guid>
<link>
https://mcorbin.fr/posts/2020-11-11-commentator/
</link>
<title>
Commentator: commentaires de blogs, basé sur S3
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je souhaite depuis longtemps intéger un système de commentaire à ce blog. Après avoir regardé un peu ce qui était disponible côté Open Source pour réaliser cela, j&amp;#8217;ai décidé d&amp;#8217;écrire mon propre outil: Commentator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pourquoi_écrire_un_nouveau_outil&quot;&gt;Pourquoi écrire un nouveau outil ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je voulais un outil répondant à plusieurs critères:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Facile à déployer (pas de bases de données compliquées à déployer) et à administrer (en ligne de commande si possible).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avec un système de &quot;challenges&quot; pour éviter au maximum le spam.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avec un système de rate-limit basique, là aussi pour éviter le spam.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://posativ.org/isso/&quot;&gt;Isso&lt;/a&gt; avait l&amp;#8217;air intéressant, mais finalement j&amp;#8217;ai décidé d&amp;#8217;écrire mon propre outil.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les raisons ? Déjà, le fun. J&amp;#8217;aime écrire mes propres outils pour mes propres besoins. Ensuite, car il est plus facile pour moi d&amp;#8217;implémenter ce que je veux exactement de cette façon, en travaillant sur la stack technique de mon choix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et c&amp;#8217;est comme cela que Commentator est né.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai commencé à travailler dessus Samedi dernier, donc on est ici sur une version alpha, avec certaines parties du code à revoir (j&amp;#8217;ai écris le projet d&amp;#8217;une traite).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il reste pas mal de choses que je souhaiterai améliorer, mais les principales fonctionnalités sont là, et j&amp;#8217;ai mis le projet &quot;en prod&quot; pour ce blog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le code est comme d&amp;#8217;habitude trouvable sur &lt;a href=&quot;https://github.com/mcorbin/commentator&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_ca_marche_comment&quot;&gt;Ca marche comment ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commentator stocke les commentaires de vos article sur n&amp;#8217;importe quel stockage compatible S3. Vous pouvez donc l&amp;#8217;utiliser chez à peu près tous les Cloud Providers.&lt;br&gt;
A part ça, Commentator est stateless, il est donc possible de l&amp;#8217;héberger sur un provider ne supportant pas S3 tout en ayant un bucket S3 configuré chez un autre provider.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commentator sauvegarde donc dans un bucket les commentaires pour chaque article. Chaque article dispose d&amp;#8217;un fichier &lt;code&gt;json&lt;/code&gt; contenant ses commentaires dans le bucket:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mon-bucket/article1.json
mon-bucket/article2.json
mon-bucket/article3.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les commentaires sont tout simplement stockés au format JSON. Voici par exemple le contenu (indenté correctement) possible d&amp;#8217;un fichier de commentaire:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;[
  {
    &quot;content&quot;: &quot;line1\nline2\nline3&quot;,
    &quot;author&quot;: &quot;mcorbin&quot;,
    &quot;id&quot;: &quot;06246983-acc9-4aaf-8ae3-9788bd708451&quot;,
    &quot;approved&quot;: false,
    &quot;timestamp&quot;: 1604940397620
  },
  {
    &quot;content&quot;: &quot;line1\nline2\nline3\naaaaaa&quot;,
    &quot;author&quot;: &quot;mcorbin&quot;,
    &quot;id&quot;: &quot;9157ce3b-945f-4e35-ad9a-472f22b54c05&quot;,
    &quot;approved&quot;: true,
    &quot;timestamp&quot;: 1604940432062
  }
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai ici deux commentaires. Chaque commentaire possède un champ &quot;content&quot; contenant le contenu du commentaire, un champ &quot;author&quot; contenant l&amp;#8217;auteur du commentaire, un ID, un champ &quot;approved&quot; indiquant si le commentaire a été approuvé ou non par l&amp;#8217;administrateur et un timestamp (seuls les commentaires approuvés sont affichés).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commentator cache également en mémoire les commentaires des articles.&lt;br&gt;
Quand un article est consulté, tous ses commentaires sont mis dans un cache pour une durée arbitraire (6 heures actuellement, mais je pense mettre plus), et ce cache n&amp;#8217;est invalidé que si un commentaire de cet article est supprimé, mis à jour, ou un nouveau commentaire créé.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela permet d&amp;#8217;éviter les allers-retours entre l&amp;#8217;application et le store S3 à chaque consultation (les lectures étant bien plus fréquentes que l&amp;#8217;ajout de commentaires), et donc d&amp;#8217;améliorer grandement les performances tout en vous faisant économiser de l&amp;#8217;argent (très peu de trafic sortant du store S3 vu que tout est en mémoire).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quand un nouveau commentaire est ajouté, vous voulez être notifié pour pouvoir l&amp;#8217;approuver.&lt;br&gt;
Un fichier nommé &lt;code&gt;events.json&lt;/code&gt; est gêré par Commentator dans le bucket. Lorsqu&amp;#8217;un commentaire est créé, un nouveau événement est publié dans ce bucket. Voici à quoi ressemble un événement:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;{
  &quot;timestamp&quot;: 1604943888444,
  &quot;id&quot;: &quot;f5af61f2-2675-45f6-827b-4ea9f8470cca&quot;,
  &quot;article&quot;: &quot;foo&quot;,
  &quot;message&quot;: &quot;New comment 4e21a377-00a1-47f0-b5a1-b57b1262921a on article foo&quot;,
  &quot;comment-id&quot;: &quot;4e21a377-00a1-47f0-b5a1-b57b1262921a&quot;,
  &quot;type&quot;: &quot;new-comment&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/commentator/archi.jpg&quot; alt=&quot;architecture du projet&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commentator dispose d&amp;#8217;une API pour créer, récupérer et gérer les commentaires, les événements et les challenges. Mais parlons avant de présenter l&amp;#8217;API du choix de S3, d&amp;#8217;antispam et de challenges.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_choix_de_s3&quot;&gt;Le choix de S3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;S3 est devenu de facto un standard. Disponible partout, avec des librairies disponibles dans tousles langages pour intéragir avec, son utilisation est je pense un atout pour le projet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rappelez vous: les commentaires et événements sont juste des fichiers JSON stockés sur S3. Enrichir le projet, écrire du tooling (pour consommer les événements et envoyer des emails par exemple) peut se faire super facilement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;aime cette approche où n&amp;#8217;importe qui, depuis n&amp;#8217;importe quel langage, peut écrire ses scripts pour intéragir avec les fichiers présents sur S3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela permet également de n&amp;#8217;avoir aucun état local (comme une base SQLite) dans le projet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise &lt;a href=&quot;https://community.exoscale.com/documentation/storage/quick-start/&quot;&gt;l&amp;#8217;object store compatible S3&lt;/a&gt; d&amp;#8217;Exoscale (mon employeur).&lt;br&gt;
Il est de plus possible de créer chez Exoscale des clés API restreintes à un seul bucket, et autorisant seulement quelques appels (comme ajouter ou supprimer un objet). Cela me permet de ne pas avoir des clés API pouvant faire n&amp;#8217;importe quoi qui trainent sur les serveurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A 0.01800 €/mois le GB de données stockées (chez Exoscale), c&amp;#8217;est aussi très économique. Si on considère qu&amp;#8217;un commentaire fait 4KB (ce qui est déjà pas mal), on se rend compte que notre facture sera à peine quelques centimes pour un très grand nombre de commentaires.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_antispam&quot;&gt;Antispam&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commentator intègre du rate limiting basique par IP (ou en vérifiant le header &lt;code&gt;x-forwarded-for&lt;/code&gt;). Un utilisateur ne peut poster un commentaire qu&amp;#8217;une fois toutes les 10 minutes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour créer un commentaire, un utilisateur doit également résoudre un &lt;code&gt;challenge&lt;/code&gt; (répondre à une question). Les challenges se définissent dans le fichier de configuration du projet. Par exemple (au format &lt;a href=&quot;https://github.com/edn-format/edn&quot;&gt;EDN&lt;/a&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:challenges {:c1 {:question &quot;1 + 4 = ?&quot;
                  :answer &quot;5&quot;}
             :c2 {:question &quot;Les ? de l'archiduchesse sont-elles sèches? Archi-sèches ?&quot;
                  :answer &quot;chaussettes&quot;}}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a ici deux challenges. Chaque challenge a un nom (qui est le nom de sa clé, comme &lt;code&gt;c1&lt;/code&gt; ou &lt;code&gt;c2&lt;/code&gt; ici), une question et une réponse.&lt;br&gt;
Le format des questions et des réponses est libre, donc n&amp;#8217;importe qui peut écrire ses propres challenges (à notez que la vérification des réponses n&amp;#8217;est pas sensible à la casse).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est également facile comme cela d&amp;#8217;écrire des scripts pour générer des milliers de challenges, et de faire de la rotation de challenges très rapidement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quand un utilisateur crée un commentaire, un nom de challenge et la réponse donnée par l&amp;#8217;utilisateur sont également envoyés au serveur. Le commentaire n&amp;#8217;est accepté par le système que si la réponse correspond à celle configurée pour ce challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Actuellement, il est toujours facile pour un utilisateur connaissant un nom de challenge et la réponse associée d&amp;#8217;écrire un script pour envoyer un commentaire toutes les 10 minutes (pour éviter le rate limiter), mais je prévois de régler ce soucis en faisant des rotations de challenges dans le futur (un challenge déjà utilisé serait inutilisable pour une longue période).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une autre solution serait de générer dynamiquement des challenges côté backend, et donc de pouvoir avoir des challenges à usage unique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est pas comme si on avait 10000 commentaires/secondes sur nos blogs, donc avec un peu de travail une solution pour éviter que quelqu&amp;#8217;un maintienne une liste des challenges et de leurs réponses doit pouvoir se faire assez facilement (si vous avez des idées, j&amp;#8217;attends vos suggestions).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_api&quot;&gt;API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;API se décompose en deux parties: une API publique et une API admin. L&amp;#8217;API consomme et renvoie du JSON.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je ferai prochainement une documentation complète pour l&amp;#8217;API, mais voici un résumé rapide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_publique&quot;&gt;Publique&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;POST /api/v1/comment/&amp;lt;article&amp;gt;&lt;/code&gt;: Ajoute un commentaire pour un article. Les champs attendus sont &lt;code&gt;author&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;challenge&lt;/code&gt; et &lt;code&gt;answer&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GET /api/v1/comment/&amp;lt;article&amp;gt;&lt;/code&gt;: Retourne les commentaires pour un article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GET /api/v1/challenge&lt;/code&gt;: Retourne un challenge choisi aléatoirement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_admin&quot;&gt;Admin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;API admin est utilisable en passant un token (défini dans la configuration du projet) dans le header &lt;code&gt;Authorization&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GET /api/admin/event/&lt;/code&gt;: Retourne les événements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GET /api/admin/event/&amp;lt;event-id&amp;gt;&lt;/code&gt;: Supprime un événement par ID.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GET /api/admin/comment/&amp;lt;article&amp;gt;&lt;/code&gt;: Liste tous les commentaires pour un article, approuvés ou non.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;POST /api/admin/comment/&amp;lt;article&amp;gt;/&amp;lt;comment-id&amp;gt;&lt;/code&gt;: Approuve un commentaire pour un article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GET /api/admin/comment/&amp;lt;article&amp;gt;/&amp;lt;comment-id&amp;gt;&lt;/code&gt;: Récupère un commentaire pour un article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DELETE /api/admin/comment/&amp;lt;article&amp;gt;/&amp;lt;comment-id&amp;gt;&lt;/code&gt;: Supprime un commentaire pour un article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DELETE /api/admin/comment/&amp;lt;article&amp;gt;&lt;/code&gt;: Supprime tous les commentaires pour un article&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le projet se configure via un fichier de configuration &lt;a href=&quot;https://github.com/edn-format/edn&quot;&gt;EDN&lt;/a&gt; (qui est en gros ce qu&amp;#8217;aurait dû être json). Par exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{:http {:host &quot;127.0.0.1&quot;
        :port 8787}
 :admin {:token #secret &quot;my-super-token&quot;}
 :store {:access-key #secret #env ACCESS_KEY
         :secret-key #secret #env SECRET_KEY
         :endpoint &quot;https://sos-ch-gva-2.exo.io&quot;
         :bucket &quot;mcorbin.fr.test.comment&quot;}
 :comment {:auto-approve false
           :allowed-articles [&quot;foo&quot;
                              &quot;bar&quot;]}
 :logging {:level &quot;info&quot;
           :console true
           :overrides {:org.eclipse.jetty &quot;info&quot;
                       :org.apache.http &quot;error&quot;}}
 :challenges {:c1 {:question &quot;1 + 4 = ?&quot;
                   :answer &quot;5&quot;}
              :c2 {:question &quot;1 + 9 = ?&quot;
                   :answer &quot;10&quot;}}}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On retrouve une section &lt;code&gt;:http&lt;/code&gt; pour la configuration du serveur, &lt;code&gt;:admin&lt;/code&gt; pour le token admin, &lt;code&gt;:store&lt;/code&gt; pour la configuration du store S3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On remarque l&amp;#8217;utilisation de readers EDN. J&amp;#8217;utilise ici &lt;code&gt;#env&lt;/code&gt; pour lire la valeur depuis une variable d&amp;#8217;environnement. J&amp;#8217;ai rendu le reader &lt;code&gt;#secret&lt;/code&gt; obligatoire pour les valeurs sensibles, cela me permet (en utilisant la librarie &lt;a href=&quot;https://github.com/exoscale/cloak&quot;&gt;exoscale/cloak&lt;/a&gt;) de manipuler dans le programme des secrets sans les log/print/sérialiser par erreur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La section &lt;code&gt;:comment&lt;/code&gt; contient une clé &lt;code&gt;:auto-approve&lt;/code&gt; pouvant être passée à &lt;code&gt;true&lt;/code&gt; pour ne pas avoir à approuver les commentaires. La liste &lt;code&gt;allowed-articles&lt;/code&gt; définit une liste d&amp;#8217;articles autorisés à recevoir des commentaires. Je génère cette ligne via un script pour un blog, et cela permet de désactiver les commentaires si besoin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La partie &lt;code&gt;:logging&lt;/code&gt; contient la configuration du logger (basé sur &lt;a href=&quot;https://github.com/pyr/unilog&quot;&gt;unilog&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et enfin, &lt;code&gt;:challenges&lt;/code&gt; contient mes challenges (j&amp;#8217;ai généré pour mon blog 250 challenges via un script).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_suite&quot;&gt;La suite&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, le projet n&amp;#8217;est qu&amp;#8217;à ses débuts. Il peut y avoir des bugs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La première chose que je ferai au cours du prochain mois est de nettoyer la codebase, ajouter plus de tests, écrire la documentation&amp;#8230;&amp;#8203; Bref, rendre le projet présentable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite, un peu d&amp;#8217;outillage pour la gestion des événements, la relecture et la validation des commentaires ne ferait pas de mal (rien qu&amp;#8217;un script shell basé sur curl et jq serait intéressant au début).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je suis également un &lt;strong&gt;horrible&lt;/strong&gt; développeur frontend. Si un dev frontend a un peu de temps, je serai preneur d&amp;#8217;une Pull Request pour ajouter un block HTML et les scripts/css associés (si possible sans aucune dépendance externe) pour intégrer proprement Commentator dans un site web.&lt;br&gt;
J&amp;#8217;ai bien fait un truc aujourd&amp;#8217;hui mais c&amp;#8217;est du code bien dégueulasse, donc si ça vous dit j&amp;#8217;attends vos contributions dans le dossier &lt;code&gt;integration&lt;/code&gt; de &lt;a href=&quot;https://github.com/mcorbin/commentator&quot;&gt;dépôt Git&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;attends vos commentaires en bas de page !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 11 Nov 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-11-05-certificate-subject-asn1/
</guid>
<link>
https://mcorbin.fr/posts/2020-11-05-certificate-subject-asn1/
</link>
<title>
TLS: sujets de certificats, ASN.1 et pétage de plomb
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je suis récemment tombé sur un problème au travail qui je pense mérite son article de blog. Cela concerne le TLS et plus particulièrement la validation des certificats clients en mutual TLS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_problème&quot;&gt;Le problème&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce que je voulais faire était assez simple sur le papier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je fournissais à un programme une autorité de certification (certificat, clé publique et privée) et ce programme générait des certificats clients qui allaient être ensuite utilisés pour se connecter à un logiciel écrit en Golang (ce dernier acceptant les certificats clients générés par cette autorité).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;autorité de certification était générée par &lt;a href=&quot;https://github.com/cloudflare/cfssl&quot;&gt;cfssl&lt;/a&gt;, un outil bien connu aujourd&amp;#8217;hui pour ce genre de tâche.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le programme générant les certificats clients était lui écrit en Clojure, et utilisait la librairie &lt;a href=&quot;https://github.com/puppetlabs/jvm-ssl-utils&quot;&gt;jvm-ssl-utils&lt;/a&gt;, cette dernière étant un wrapper autour de la librairie Java &lt;a href=&quot;https://www.bouncycastle.org/&quot;&gt;bouncycastle&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Récapitulons: j&amp;#8217;ai donc un outil en Golang (cfssl) qui me génère une autorité de certification. Cette autorité est utilisée depuis un programme Clojure pour générer des certificats clients pour autoriser des clients à se connecter en mutual TLS à une application Golang.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sur le papier, cela fonctionne. Mettons ça en pratique.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_en_pratique&quot;&gt;En pratique&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_autorité_de_certification&quot;&gt;Autorité de certification&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Générons d&amp;#8217;abord une autorité de certification en utilisant &lt;a href=&quot;https://github.com/cloudflare/cfssl&quot;&gt;cfssl&lt;/a&gt;. Cela se fait rapidement, vous pouvez utiliser la documentation de &lt;a href=&quot;https://coreos.com/os/docs/latest/generate-self-signed-certificates.html&quot;&gt;CoreOS&lt;/a&gt; qui explique cela par exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La façon de faire n&amp;#8217;est pas importante, vous pouvez sauter cette partie (et aller directement à la section &lt;code&gt;J’ai quoi maintenant ?&lt;/code&gt;) si vous ne voulez pas essayer de reproduire le problème, mais voici la procédure tirée du site de CoreOS:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;créez un fichier nommé &lt;code&gt;ca-csr.json&lt;/code&gt; ayant pour contenu:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;{
    &quot;CN&quot;: &quot;mcorbin.fr&quot;,
    &quot;key&quot;: {
        &quot;algo&quot;: &quot;rsa&quot;,
        &quot;size&quot;: 2048
    },
    &quot;names&quot;: [
        {
            &quot;C&quot;: &quot;FR&quot;,
            &quot;L&quot;: &quot;Meuse&quot;,
            &quot;O&quot;: &quot;mcorbin.fr&quot;,
            &quot;OU&quot;: &quot;blog&quot;
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On remarque qu&amp;#8217;on configure le subject (country, location&amp;#8230;&amp;#8203;) de notre CA. Générez votre ca avec:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cfssl gencert -initca ca-csr.json | cfssljson -bare ca -&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Créez un fichier nommé &lt;code&gt;ca-config.json&lt;/code&gt; ayant pour contenu:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;{
    &quot;signing&quot;: {
        &quot;default&quot;: {
            &quot;expiry&quot;: &quot;43800h&quot;
        },
        &quot;profiles&quot;: {
            &quot;server&quot;: {
                &quot;expiry&quot;: &quot;43800h&quot;,
                &quot;usages&quot;: [
                    &quot;signing&quot;,
                    &quot;key encipherment&quot;,
                    &quot;server auth&quot;,
                    &quot;client auth&quot;
                ]
            }
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, on configure la façon dont nos certificats seront générés.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_certificat_serveur&quot;&gt;Certificat serveur&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous allons maintenant générer des certificats pour notre partie serveur (qui seront utilisés par notre application finale écrite en Golang):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cfssl print-defaults csr &amp;gt; server.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez modifier server.json pour configurer votre futur certificat comme vous le voulez (notamment la partie &lt;code&gt;hosts&lt;/code&gt; ou &lt;code&gt;CN&lt;/code&gt;), par exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;{
    &quot;CN&quot;: &quot;example.net&quot;,
    &quot;hosts&quot;: [
        &quot;localhost&quot;,
        &quot;www.example.net&quot;
    ],
    &quot;key&quot;: {
        &quot;algo&quot;: &quot;rsa&quot;,
        &quot;size&quot;: 2048
    },
    &quot;names&quot;: [
        {
            &quot;C&quot;: &quot;US&quot;,
            &quot;ST&quot;: &quot;CA&quot;,
            &quot;L&quot;: &quot;San Francisco&quot;
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Générez maintenant vos certificats serveur:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server server.json | cfssljson -bare server&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et voilà, vos certificats serveur sont générés.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_certificats_clients&quot;&gt;Certificats Clients&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise maintenant mon autorité de certification pour générer des certificats clients comme expliqué précédemment (depuis du code Clojure en utilisant la lib &lt;a href=&quot;https://github.com/puppetlabs/jvm-ssl-utils&quot;&gt;jvm-ssl-utils&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le code est assez complexe, donc je ne le détaillerai pas ici. Faites moi confiance, ça marche ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_j_ai_quoi_maintenant&quot;&gt;J&amp;#8217;ai quoi maintenant ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai donc maintenant:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Une autorité de certification&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Des certificats serveur, pouvant être utilisés par un serveur voulant faire du TLS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Des certificats clients, signés par l&amp;#8217;autorité de certification, me permettant donc &lt;strong&gt;en théorie&lt;/strong&gt; de me connecter sur le serveur.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tester_la_théorie&quot;&gt;Tester la théorie&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_depuis_un_serveur_clojure&quot;&gt;Depuis un serveur Clojure&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour tester ma théorie, j&amp;#8217;ai démarré un serveur &lt;a href=&quot;https://github.com/aleph-io/aleph&quot;&gt;Aleph&lt;/a&gt; en utilisant les certificats serveur générés précédemment. Le code pour configurer le TLS pour Aleph (et donc générer un SSLContext pour Netty) n&amp;#8217;est pas très intéressant, je ne le présenterai donc pas ici.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise ensuite les certificats clients (générés depuis la lib Clojure) avec &lt;code&gt;curl&lt;/code&gt; pour envoyer des requêtes au server. Ca marche !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl --cacert ca.pem --cert clj-client.pem --key clj-client.key https://localhost:9999
hello&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_depuis_un_serveur_golang&quot;&gt;Depuis un serveur Golang&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Essayons la même chose depuis un serveur golang. Par exemple, démarrons etcd en utilisant &lt;strong&gt;les mêmes&lt;/strong&gt; certificats serveur que notre serveur Clojure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./etcd \
--cert-file=server.pem \
--key-file=server-key.pem \
--trusted-ca-file=ca.pem \
--client-cert-auth \
--listen-client-urls https://localhost:2379 \
--advertise-client-urls https://localhost:2379&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Réessayons notre commande curl:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl --cacert ca.pem --cert clj-client.pem --key clj-client.key https://localhost:2379

curl: (35) error:14094412:SSL routines:ssl3_read_bytes:sslv3 alert bad certificate&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et on remarque dans les logs du serveur etcd:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;2020-11-05 22:02:35.562419 I | embed: rejected connection from &quot;127.0.0.1:40436&quot; (error &quot;tls: failed to verify client's certificate: x509: issuer name does not match subject from issuing certificate&quot;, ServerName &quot;localhost&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_issuer_name_does_not_match_subject_from_issuing_certificate&quot;&gt;Issuer name does not match subject from issuing certificate&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Donc nos certificats fonctionnent depuis un serveur Java mais pas depuis un serveur Golang. Surprenant non ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;erreur dans les logs etcd est assez claire: le champ Issuer (l&amp;#8217;autorité ayant généré le certificat client) ne correspond pas au Subject de cette même autorité !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Premier réflexe: vérifier cela:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;openssl x509 -in ca.pem -noout -text

        Issuer: C = FR, L = Meuse, O = mcorbin.fr, OU = blog, CN = mcorbin.fr
        Validity
            Not Before: Nov  4 18:30:00 2020 GMT
            Not After : Nov  3 18:30:00 2025 GMT
        Subject: C = FR, L = Meuse, O = mcorbin.fr, OU = blog, CN = mcorbin.fr

openssl x509 -in clj-client.pem -noout -text

        Issuer: C = FR, L = Meuse, O = mcorbin.fr, OU = blog, CN = mcorbin.fr
        Validity
            Not Before: Nov  3 23:14:51 2020 GMT
            Not After : Sep 17 09:30:42 2070 GMT
        Subject: C = FR, L = Meuse, O = blog, OU = mcorbin.fr, CN = client&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pourtant, on voit ici que le champ Issuer du certificat client (&lt;code&gt;clj-client.pem&lt;/code&gt;) correspond bien au Subject de notre autorité de certification (&lt;code&gt;ca.pem&lt;/code&gt;): la valeur est bien &lt;code&gt;C = FR, L = Meuse, O = mcorbin.fr, OU = blog, CN = mcorbin.fr&lt;/code&gt; partout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et surtout, je rappelle, nos certificats marchent depuis un programme Java ! Là, c&amp;#8217;est le moment où je commençais à devenir fou.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/asn1/angry.gif&quot; alt=&quot;gif énervé&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jusqu&amp;#8217;à ce qu&amp;#8217;une collègue trouve la solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_asn_1&quot;&gt;ASN.1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les certificats sont encodés en &lt;a href=&quot;https://fr.wikipedia.org/wiki/ASN.1&quot;&gt;ASN.1&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je ne rentrerai pas dans le détail d&amp;#8217;ASN.1 dans cet article (j&amp;#8217;ai un petit parser ASN.1 écrit en Clojure qui fonctionne pas trop mal, ce serait une bonne base pour un article dédié sur ce format), mais en gros ASN.1 permet de représenter des données en indiquant pour chaque donnée son type et sa taille en byte (et donc cela permet de récupérer sa valeur).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On pourrait par exemple avoir une représentation textuelle (après parsing) qui ressemblerait à&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[TYPE: SEQUENCE,
 taille: 892,
 valeur:
   [
     [TYPE: Integer, taille 1, valeur 2]]
     [TYPE: Integer, taille 1, valeur 3]]
     ...
   ]
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais revenons à nos certificats.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a donc dans ASN.1 des données qui ont chacune un type. OpenSSL permet récupérer cette information pour les champs Issuer/Subject d&amp;#8217;un certificat. Regardons cela pour le certificat de notre autorité de certification:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;openssl x509 -in ca.pem -subject -issuer -nameopt multiline,show_type -noout -subject_hash -issuer_hash
subject=
    countryName               = PRINTABLESTRING:FR
    localityName              = PRINTABLESTRING:Meuse
    organizationName          = PRINTABLESTRING:mcorbin.fr
    organizationalUnitName    = PRINTABLESTRING:blog
    commonName                = PRINTABLESTRING:mcorbin.fr
issuer=
    countryName               = PRINTABLESTRING:FR
    localityName              = PRINTABLESTRING:Meuse
    organizationName          = PRINTABLESTRING:mcorbin.fr
    organizationalUnitName    = PRINTABLESTRING:blog
    commonName                = PRINTABLESTRING:mcorbin.fr&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Faisons la même chose pour notre certificat client, généré depuis Clojure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; openssl x509 -in clj-client.pem -subject -issuer -nameopt multiline,show_type -noout -subject_hash -issuer_hash
subject=
    countryName               = PRINTABLESTRING:FR
    localityName              = UTF8STRING:Meuse
    organizationName          = UTF8STRING:blog
    organizationalUnitName    = UTF8STRING:mcorbin.fr
    commonName                = UTF8STRING:client
issuer=
    countryName               = PRINTABLESTRING:FR
    localityName              = UTF8STRING:Meuse
    organizationName          = UTF8STRING:mcorbin.fr
    organizationalUnitName    = UTF8STRING:blog
    commonName                = UTF8STRING:mcorbin.fr&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et voici le problème: les &lt;strong&gt;valeurs&lt;/strong&gt; sont les mêmes, mais l'&lt;strong&gt;encodage&lt;/strong&gt; est différent. Et selon les implémentations de TLS, cela peut poser ou non des problèmes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le type PrintableString permet de représenter un sous ensemble de ASCII, alors qu&amp;#8217;UTF8String permet de représenter comme son nom l&amp;#8217;indique de l&amp;#8217;UTF8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a donc l&amp;#8217;outillage Golang (cfssl) qui nous a généré une autorité de certification avec le champ Subject en PrintableString (à part le champ countryName), et l&amp;#8217;outillage Clojure qui a généré un certificat client en UTF8String à partir de cette même autorité !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_implémentation_tls_de_golang&quot;&gt;L&amp;#8217;implémentation TLS de Golang&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le code source Golang nous montre en effet que le langage fait une comparaison stricte sur les champs Subject et Issuer des certificats. Regardez &lt;a href=&quot;https://github.com/golang/go/blob/master/src/crypto/x509/verify.go#L584&quot;&gt;ici&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;if !bytes.Equal(child.RawIssuer, c.RawSubject) {
    return CertificateInvalidError{c, NameMismatch, &quot;&quot;}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On compare donc ici RawIssuer et RawSubject entre eux, les deux variables étant des tableaux de bytes. Ecrivons un petit programme Golang qui nous permet d&amp;#8217;afficher ces valeurs pour nos certificats (autorité et client):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;package main

import (
	&quot;crypto/tls&quot;
	&quot;crypto/x509&quot;
	&quot;fmt&quot;
	&quot;io/ioutil&quot;
)

func main() {
	caCert, _ := ioutil.ReadFile(&quot;ca.pem&quot;)
	caKey, _ := ioutil.ReadFile(&quot;ca-key.pem&quot;)
	caCertificate, _ := tls.X509KeyPair(caCert, caKey)
	caX509cert, _ := x509.ParseCertificate(caCertificate.Certificate[0])
	fmt.Println(caX509cert.RawIssuer)

	clientCert, _ := ioutil.ReadFile(&quot;clj-client.pem&quot;)
	clientKey, _ := ioutil.ReadFile(&quot;clj-client.key&quot;)
	clientCertificate, _ := tls.X509KeyPair(clientCert, clientKey)
	clientX509cert, _ := x509.ParseCertificate(clientCertificate.Certificate[0])
	fmt.Println(clientX509cert.RawIssuer)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On le lance, et on obtient:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;[48 86 49 11 48 9 6 3 85 4 6 19 2 70 82 49 14 48 12 6 3 85 4 7 **19** 5 77 101 117 115 101 49 19 48 17 6 3 85 4 10 **19** 10 109 99 111 114 98 105 110 46 102 114 49 13 48 11 6 3 85 4 11 **19** 4 98 108 111 103 49 19 48 17 6 3 85 4 3 **19** 10 109 99 111 114 98 105 110 46 102 114]

[48 86 49 11 48 9 6 3 85 4 6 19 2 70 82 49 14 48 12 6 3 85 4 7 **12** 5 77 101 117 115 101 49 19 48 17 6 3 85 4 10 **12** 10 109 99 111 114 98 105 110 46 102 114 49 13 48 11 6 3 85 4 11 **12** 4 98 108 111 103 49 19 48 17 6 3 85 4 3 **12** 10 109 99 111 114 98 105 110 46 102 114]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme vous pouvez le voir, certaines valeurs (entre **) sont différentes.&lt;br&gt;
Parfois des 12, parfois des 19. C&amp;#8217;est en effet ces valeurs qui donnent le type de donnée utilisé en ASN.1: 12 pour UTF8String, 19 pour PrintableString.&lt;br&gt;
A part ça, le reste est identique mais cela suffit à faire échouer la comparaison, et générer l&amp;#8217;erreur montrée précédemment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_corriger_le_problème&quot;&gt;Corriger le problème&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y a plusieurs moyens de corriger ce problème.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_utiliser_le_même_encodage_partout&quot;&gt;Utiliser le même encodage partout&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La solution la plus simple est de générer tous les certificats avec le même encodage pour le subject et l&amp;#8217;issuer. Facile à dire, mais pas facile à réaliser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bizarrement, il semble impossible de choisir l&amp;#8217;encodage voulu avec l&amp;#8217;ensemble de l&amp;#8217;écosystème Golang (cfssl, Hashicorp Vault&amp;#8230;&amp;#8203;). L&amp;#8217;écosystème Go réalise les choses de cette façon:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tout générer en PrintableString si possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Si un caractère n&amp;#8217;est pas valide en PrintableString, générer le champ en UTF8String.
Par exemple, si je reprends mon autorité de certification générée par cfssl et remplace la location par &lt;code&gt;&quot;L&quot;: &quot;éééé&quot;,&lt;/code&gt; mon certificat aura &lt;code&gt;localityName = UTF8STRING:\E9\E9\E9\E9&lt;/code&gt;, mais les autres champs seront en PrintableString.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je ne comprends pas comment ce genre d&amp;#8217;outils avancés et utilisés partout ne permettent pas de faire les choses de façon plus intelligente. Ou alors j&amp;#8217;ai raté quelque chose dans les documentations, dans ce cas contactez moi (car j&amp;#8217;ai quand même du mal à y croire donc je me dis que j&amp;#8217;ai dû manquer un truc).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Java, BouncyCastle semble rendre paramétrable l&amp;#8217;encodage des champs via la classe abstraite &lt;a href=&quot;https://github.com/bcgit/bc-java/blob/07604208a773d2334fb09276796288404804e557/core/src/main/java/org/bouncycastle/asn1/x509/X509NameEntryConverter.java&quot;&gt;X509NameEntryConverter&lt;/a&gt;. La Javadoc résume tout:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * It turns out that the number of standard ways the fields in a DN should be
 * encoded into their ASN.1 counterparts is rapidly approaching the
 * number of machines on the internet. By default the X509Name class
 * will produce UTF8Strings in line with the current recommendations (RFC 3280).
 * &amp;lt;p&amp;gt;
**/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais cela n&amp;#8217;était pas évident à intégrer dans le wrapper Clojure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sinon, il faut utiliser de l&amp;#8217;outillage compatible. Par exemple, remplacer cfssl par OpenSSL (qui lui génère tout par défaut en UTF8String) nous a permis de résoudre le soucis dans mon cas.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_rfcs_disent_quoi&quot;&gt;Les RFCs disent quoi ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc3280&quot;&gt;RFC 3280&lt;/a&gt; (2002):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;   The DirectoryString type is defined as a choice of PrintableString,
   TeletexString, BMPString, UTF8String, and UniversalString.  The
   UTF8String encoding [RFC 2279] is the preferred encoding, and all
   certificates issued after December 31, 2003 MUST use the UTF8String
   encoding of DirectoryString (except as noted below).&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est clair au moins, il faut utiliser UTF8String.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Problème, la &lt;a href=&quot;https://tools.ietf.org/html/rfc5280&quot;&gt;RFC 5280&lt;/a&gt; de 2008 ne mentionne plus cette partie. Pas si clair que ça en fait. En tout cas, à part l&amp;#8217;outillage Golang, le reste du monde (Java, OpenSSL) a l&amp;#8217;air de faire de l&amp;#8217;UTF8String par défaut.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une &lt;a href=&quot;https://github.com/golang/go/issues/31440&quot;&gt;issue&lt;/a&gt; parlant du problème sur le projet Github de Golang contient également une discussion intéressante.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mon plus gros problème comme dit précédemment est le fait que ce réglage ne puisse pas être choisi dans l&amp;#8217;écosystème Golang.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Donc si vous générez des certificats en utilisant plusieurs outils, méfiance !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 05 Nov 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-11-04-environnement-travail/
</guid>
<link>
https://mcorbin.fr/posts/2020-11-04-environnement-travail/
</link>
<title>
Mon environnement de travail
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela fait plus de deux ans et demi que je suis en télétravail complet. En plus de cela, j&amp;#8217;ai toujours essayé d&amp;#8217;avoir un poste de travail utilisant des programmes légers et performants pour travailler de manière efficace. Dans cet article, je présenterai mon poste de travail d&amp;#8217;un point de vue physique et logiciel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_poste_de_travail_physique&quot;&gt;Poste de travail physique&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_bureau&quot;&gt;Bureau&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise un bureau assis-debout Ikea. Pour être tout à fait honnête, je travaille généralement assis ;) Selon les périodes, j&amp;#8217;aime travailler debout. Mais de manière générale j&amp;#8217;ai tendance à quand même beaucoup travailler assis, plus par habitude qu&amp;#8217;autre chose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je trouve cela par contre super utile pour tout ce qui est conférences/talks en ligne. Je préfère largement parler debout qu&amp;#8217;assis, ça me donne plus l&amp;#8217;impression de participer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/poste_travail/bureau.jpg&quot; alt=&quot;mon bureau&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ma chaise de bureau est une Ikea Markus. C&amp;#8217;est une chaise correcte mais sans plus, parfois j&amp;#8217;hésite à sauter le pas et prendre une chaise de meilleure qualité, quitte à y mettre le prix.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_pc_et_matériel&quot;&gt;PC et matériel&lt;/h3&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_pc_et_écrans&quot;&gt;PC et écrans&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je travaille au quotidien sur un PC fixe. Ce PC ne me sert que pour le travail (pas de jeux). C&amp;#8217;est un PC qui a déjà quelques années mais il répond toujours à mes besoins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Avec 32GB de RAM (DDR4) et un AMD Ryzen 5 2600, je peux travailler confortablement, démarrer des tonnes de services en local si besoin, lancer de grosses compilations ou faire du montage vidéo (comme par exmeple mon &lt;a href=&quot;https://www.youtube.com/watch?v=ybSZ2iPF30A&amp;amp;feature=youtu.be&quot;&gt;talk sur Packer&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le PC a deux disques, un SSD de 500GB contenant mon système d&amp;#8217;exploitation et tout ce qui concerne le travail, et un disque classique de 1TB contenant seulement de la musique, vidéos ou autre.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise deux écrans HP, un 22&quot; et un 24&quot;. Ce n&amp;#8217;est pas des écrans que j&amp;#8217;ai payé très cher, je ne vois pas vraiment l&amp;#8217;intêret d&amp;#8217;avoir des écrans ultra évolués pour ce que j&amp;#8217;en fait.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je n&amp;#8217;ai jamais aimé les écrans trop larges. Il est très difficile pour moi de travailler sur un 27&quot; par exemple. Je préfère largement deux petits écrans qu&amp;#8217;un énorme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai également un PC portable fournit par mon entreprise, mais je ne n&amp;#8217;utilise que quand je suis en déplacement (ce qui n&amp;#8217;arrive plus vraiment avec le Covid). Je n&amp;#8217;aime pas travailler sur ordinateur portable, la connectique est souvent limitée, les docks fonctionnent plus ou moins bien sur Linux selon les modèles&amp;#8230;&amp;#8203; Je préfère largement le fixe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;écran de mon PC portable (Dell XPS 13) est également &lt;strong&gt;horrible&lt;/strong&gt;. Le moindre rayon de soleil ou de lumière se reflètera dans l&amp;#8217;écran et vous empêchera de travailler. Même en conditions normales, je vois mon reflet quand je travaille, un vrai miroir. Je ne comprends qui peut apprécier ces écrans brillants.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_clavier&quot;&gt;Clavier&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai longtemps utilisé des claviers basiques. Par contre, j&amp;#8217;ai actuellement un clavier Logitech tout simple acheté à la FNAC. Ayant participé au &lt;a href=&quot;https://www.kickstarter.com/projects/keyboardio/atreus?lang=fr&quot;&gt;Kickstarter&lt;/a&gt; de Keyboardio pour Atreus (il faut dire qu&amp;#8217;à Exoscale tout le monde utilise des claviers chelou, donc j&amp;#8217;ai décidé d&amp;#8217;essayer moi aussi), j&amp;#8217;ai reçu mon modèle récemment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/poste_travail/atreus.jpg&quot; alt=&quot;clavier Atreus&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;Atreus est un clavier ayant un nombre limité de touches et fonctionnant par &quot;layers&quot;. On peut accéder via une touche spéciale au layer suivant. Chaque touche est configurable comme on l&amp;#8217;entend (cela peut aller très loin), et le firmware peut se configurer graphiquement avec &lt;a href=&quot;https://github.com/keyboardio/Chrysalis&quot;&gt;Chrysalis&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y a un gros temps d&amp;#8217;adaptation avant d&amp;#8217;être efficace avec, et je m&amp;#8217;y mets peu à peu. Le plus difficile est de &quot;réapprendre&quot; tous les raccourcis claviers des différents soft que j&amp;#8217;utilise (et décrits dans la suite de cet article), écrire avec n&amp;#8217;étant pas la plus grosse difficulté.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_son_et_image&quot;&gt;Son et image&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise un microphone Blue Yeti. C&amp;#8217;est un produit reconnu, permettant de faire pas mal de choses, et facile à utiliser. La qualité est également très bonne.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Concernant ma webcam, j&amp;#8217;utilise un modèle basique de Logitech. Je pense prendre une Webcam de meilleure qualité une fois que la fibre sera installée chez moi (bientôt j&amp;#8217;espère).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_wifi&quot;&gt;Wifi&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Qui dit PC fixe dit clé Wifi. J&amp;#8217;utilise la clé Wifi USB Alfa AWUS036AC pour cela.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/poste_travail/wifi.jpg&quot; alt=&quot;clé wifi alfa&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le driver doit être compilé manuellement, il y a quelques bugs (parfois j&amp;#8217;ai un erreur de type &quot;Mot de passe erroné&quot;, je réessaye et ça passe) mais globalement cela marche bien.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_prises_électriques&quot;&gt;Prises électriques&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai donc deux écrans et ma tour à brancher. Un des premiers aménagements que j&amp;#8217;ai fait dans mon bureau a été de rajouter des prises.
En effet, je pense qu&amp;#8217;éviter les multiprises (ou pire, des multiprises sur des multiprises) n&amp;#8217;a que des avantages, que ce soit au niveau sécurité ou propreté de l&amp;#8217;installation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/poste_travail/prises.jpg&quot; alt=&quot;3 prises électriques&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans mon cas, avoir 3 prises dans le mur sous le bureau est très pratique. Si vous travaillez beaucoup depuis la maison, un peu de travaux d&amp;#8217;électricité vaut vraiment le coup. Cela n&amp;#8217;est pas très cher même fait par un professionnel (ce qui a été mon cas).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_mes_logiciels_pour_travailler_efficacement&quot;&gt;Mes logiciels pour travailler efficacement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je suis minimaliste. Je n&amp;#8217;aime pas les environnements de bureau trop complexes, et je me fiche d&amp;#8217;avoir des supers trucs trop jolis en 3D ou autre. Cela se reflète je pense dans les logiciels que j&amp;#8217;utilise au quotidien.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_linux&quot;&gt;Linux&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise Linux depuis de longues années. Il est selon moi indispensable dans nos métiers d&amp;#8217;avoir un poste Linux, je ne comprends vraiment pas comment travailler sur Windows par exemple alors qu&amp;#8217;on doit faire du Docker, Ansible, utiliser toute sorte d&amp;#8217;outils généralement spécifique Linux&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour la petite histoire, dans mon premier job on était sur Windows. J&amp;#8217;avais heureusement un chef compréhensif et j&amp;#8217;ai pu rapidement travailler depuis une machine virtuelle Debian (d&amp;#8217;ailleurs j&amp;#8217;ai lancé le truc et quelques temps après beaucoup de monde travaillait depuis une VM), car il m&amp;#8217;était &lt;strong&gt;impossible&lt;/strong&gt; de travailler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aujourd&amp;#8217;hui, je refuserai tout simplement de travailler dans une boite qui me forcerait à utiliser Windows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise Debian comme distribution. Souvent critiquée, elle me convient totalement. Je n&amp;#8217;ai jamais encore eu besoin d&amp;#8217;un outil qui n&amp;#8217;était pas disponible sur Debian, surtout aujourd&amp;#8217;hui où beaucoup d&amp;#8217;outils sont disponibles en format binaire (Terraform, CLI diverses, Packer&amp;#8230;&amp;#8203;) ou bien dsponible via pip (Ansible).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;aime également sa stabilité. L&amp;#8217;utilisant pour travailler, je ne peux pas me permettre de démarrer un jour mon PC et de me rendre compte que la distribution ne boot plus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bien sûr, mon SSD principal est chiffré, car même si c&amp;#8217;est un PC fixe on ne sait jamais ce qui peut arriver (et c&amp;#8217;est de toute façon obligatoire de chiffrer son poste dans mon entreprise).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_i3&quot;&gt;i3&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise depuis de nombreuses années &lt;a href=&quot;https://i3wm.org/&quot;&gt;i3&lt;/a&gt; comme environnement de bureau. C&amp;#8217;est un tiling window manager disponible sur toutes les distributions Linux (et même sur *BSD). Ultra léger, simple, efficace, i3 répond parfaitemement à mes besoins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un tiling window manager permet de facilement organiser (en utilisant des raccourcis claviers) ses bureaux est fenêtres. Il est facile avec i3 de couper son écran en deux, 3, 4, de déplacer des fenêtres sur l&amp;#8217;écran ou entre les bureaux virtuelles. Un exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/poste_travail/i3.gif&quot; alt=&quot;démo i3&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ma productivité a été énormément améliorée grâce à i3. Chaque fenêtre est placée comme il faut, et se déplacer entre fenêtres et bureaux est ultra rapide au clavier. Il est également très léger (quelques dizaines de Mo de RAM max), ce qui est appréciable quand on voit les consommations monstres de certains environnements de bureau.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mon organisation est toujours la même:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Premier bureau: Firefox&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deuxième bureau: Emacs et IRC (j&amp;#8217;utilise Weechat comme client IRC d&amp;#8217;ailleurs)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Troisième bureau: des terminaux&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quatrième bureau: Musique (rhythmbox), Wicd (wifi), Pavucontrol (son), éventuellement une autre instance de Firefox.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les bureaux suivants (5 et +) servent généralement à rajouter des terminaux si besoin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_emacs&quot;&gt;Emacs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise Emacs depuis plus de 5 ans maintenant. Ma configuration est d&amp;#8217;ailleurs &lt;a href=&quot;https://github.com/mcorbin/emacs-config/blob/master/emacs.org&quot;&gt;disponible en ligne&lt;/a&gt; (cloner le dépôt et le déplacer dans ~/.emacs.d devrait être suffisant pour que vous puissiez tester ma configuration).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;aime Emacs parce que c&amp;#8217;est léger, simple d&amp;#8217;utilisaition, et qu&amp;#8217;il dispose de tonnes de plugins. D&amp;#8217;ailleurs, de nombreux langages n&amp;#8217;offrent qu&amp;#8217;un support limité en dehors de Emacs. Par exemple pour Clojure, qui est le langage que j&amp;#8217;utilise le plus, le meilleur environnement de développement est probablement Emacs (bien que Cursive, qui est un plugin Intellij pour Clojure, est également intéressant mais payant).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Emacs est souvent vu comme un éditeur vieux, ne permettant de faire que du texte. Rien de plus faux, car comme dit précédemment Emacs se tranforme en un IDE complet (autocomplétion, intégration avec des outils externes comme gofmt en Golang par exemple, intégration Git, gestion de projets, REPL Driven Development en Clojure&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/poste_travail/emacs.gif&quot; alt=&quot;démo emacs&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configurer correctement Emacs pour en arriver là prends du temps (j&amp;#8217;ai copié un bon bout de la configuration depuis celle de &lt;a href=&quot;https://vincent.demeester.fr/&quot;&gt;vdemeester&lt;/a&gt;, qui était notre Emacs Guru quand je n&amp;#8217;étais que stagiaire), mais une fois la configuration faite c&amp;#8217;est très agréable de travailler avec.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_gnome_terminal&quot;&gt;Gnome Terminal&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Après plusieurs années sur urxvt, je suis passé récemment sur gnome-terminal. Rien à signaler, cela fonctionne, les raccourcis pour zoomer ou autre sont disponibles nativement (contrairement à urxvt qui est très difficile à configurer).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_firefox&quot;&gt;Firefox&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai toujours utilisé Firefox, et continue de le faire. Je suis parfois forcé de passer sur Chrome pour utiliser certaines applications (de vidéo conférence par exemple) qui ne fonctionnent que sur Chrome, mais sinon je ne vois pas de raisons d&amp;#8217;abandonner Firefox.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_son_vidéo_et_image&quot;&gt;Son, vidéo et image&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise Rhythmbox pour lire la musique disponible en local (j&amp;#8217;ai beaucoup d&amp;#8217;albums sur mon disque secondaire). Rhythmbox fait tout ce que je lui demande, je n&amp;#8217;ai jamais eu aucun soucis avec lui. Je lui indique juste le dossier où est ma musique et il se charge du reste.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si je dois lire une vidéo, j&amp;#8217;utilise VLC. Simple et efficace.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour tout ce qui est conversion d&amp;#8217;une vidéo ou d&amp;#8217;un audio d&amp;#8217;un format à un autre, ou bien pour filmer mon écran (pour mes talks) j&amp;#8217;utilise tout simplement ffmpeg. C&amp;#8217;est fou tout ce que l&amp;#8217;on peut faire avec cet outil. Par exemple, j&amp;#8217;ai créé les gif de cet article en filmant mon écran et en convertissant les vidéos en gif avec ffmpeg.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;utilise Openshot pour faire du montage vidéo. Cela marche pas trop mal, c&amp;#8217;est juste parfois lent sur les gros projets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si je dois faire de la manipulation d&amp;#8217;images, j&amp;#8217;utilise Gimp.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_pas_d_explorateur_de_fichiers&quot;&gt;Pas d&amp;#8217;explorateur de fichiers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela surprend souvent les gens, mais je n&amp;#8217;utilise pas d&amp;#8217;explorateur de fichiers. Je n&amp;#8217;en ai juste pas besoin.
Si je dois ouvrir des fichiers textes, j&amp;#8217;utilise Emacs. Si je veux chercher ou manipuler des fichiers (renommage, copier/coller&amp;#8230;&amp;#8203;) j&amp;#8217;utilise la ligne de commande. Si je veux ouvrir un PDF, j&amp;#8217;utilise tout simplement Firefox ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_zoom&quot;&gt;Zoom&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je déteste &quot;forcer&quot; sur mes yeux pour lire. La police d&amp;#8217;Emacs, de mes terminaux&amp;#8230;&amp;#8203; est souvent surdimensionnée, et j&amp;#8217;utilise le plugin &lt;code&gt;Zoom Page WE&lt;/code&gt; sur Firefox pour pouvoir définir un niveau de zoom par site web.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je suis selon les sites à un niveau de zoom entre 113 et 170 %. La mode des écrans haute résolution fait que les sites sont de plus en plus difficiles à lire, donc pour moi le plugin Zoom Page est obligatoire.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_mot_de_la_fin&quot;&gt;Mot de la fin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;espère que cet article vous aura fait découvrir 2-3 trucs. Maîtriser son environnement de travail apporte un réel plus au quotidien.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 04 Nov 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-10-21-meuse-1.1.0/
</guid>
<link>
https://mcorbin.fr/posts/2020-10-21-meuse-1.1.0/
</link>
<title>
Meuse 1.1.0 released!
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I released yesterday the version &lt;strong&gt;1.1.0&lt;/strong&gt; of &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Meuse&lt;/a&gt;, your favorite Rust private registry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_s_new&quot;&gt;What&amp;#8217;s new&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_tokens&quot;&gt;Tokens&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A new page was added to the frontend and displays the list of the tokens for the connected user.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_crates_io_caching&quot;&gt;crates.io caching&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As described in the documentation, Meuse is already able to &lt;a href=&quot;https://meuse.mcorbin.fr/installation/mirroring/&quot;&gt;mirror crates.io&lt;/a&gt;. When crates are downloaded from crates.io, they are automatically cached on the Meuse store (which could be on the filesystem or on S3).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release adds &lt;a href=&quot;https://meuse.mcorbin.fr/api/mirror/&quot;&gt;a new API call&lt;/a&gt; to cache crates from crates.io. Like that, you can prefill your local crates.io cache if needed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_more_info&quot;&gt;More info&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find more information about Meuse on &lt;a href=&quot;https://meuse.mcorbin.fr/&quot;&gt;the project website&lt;/a&gt;, and the code is available on &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 21 Oct 2020 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-09-09-meuse-1.0.0/
</guid>
<link>
https://mcorbin.fr/posts/2020-09-09-meuse-1.0.0/
</link>
<title>
Meuse 1.0.0 released!
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, I released the version &lt;strong&gt;1.0.0&lt;/strong&gt; of &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Meuse&lt;/a&gt;, a free private registry for the Rust programming language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Everything started last year when I read the &lt;a href=&quot;https://blog.rust-lang.org/2019/04/11/Rust-1.34.0.html#alternative-cargo-registries&quot;&gt;release note&lt;/a&gt; of Rust 1.34. The release note was mentioning the support for alternate registries in Cargo.&lt;br&gt;
This day, I decided to write my own one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/meuse100/first_commit.png&quot; alt=&quot;first commit screenshot for the meuse project&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I quickly pushed some code, and added new features little by little, including for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A full implementation of the alternative registries RFC.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storing crates on various backends, including S3.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crates.io mirroring (with also S3 support).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User, roles, tokens and crates management using a simple API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A small frontend to browse crates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And tons of other things !&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is always new things to add, but I&amp;#8217;m already very happy with the state of the project, and that&amp;#8217;s why I decided to release the version &lt;strong&gt;1.0.0&lt;/strong&gt;. I will of course continue to add new things in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some work will also be needed in Cargo. For example, Cargo does not pass the authentication token for the search and download commands (you can check &lt;a href=&quot;https://github.com/rust-lang/cargo/issues/7091&quot;&gt;the issue&lt;/a&gt; for more information), which is my main issue today (I would like to enable authentication on all endpoints).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;P.S: I&amp;#8217;m a very bad frontend developer. If a frontend dev would like to help me create a prettier and easier to use frontend for Meuse, please ping me ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_new_features_in_this_release&quot;&gt;New features in this release&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PostgreSQL schema configuration: a new configuration key was added to make the PostgreSQL schema used by Meuse configurable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New metrics were added to the jgit crate index implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The project was migrated from Aleph to Jetty for the HTTP server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better error handling when a crate fails to be created (clever rollbacks) to prevent the registry to have partial data saved on one part of the system (for example, having the crate created in the database but not in the crate index).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tokens: save the last usage date. Everytime a token is used, the date is saved in the database. It can help you detect used and unused tokens.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 09 Sep 2020 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-08-10-clojure-libraries/
</guid>
<link>
https://mcorbin.fr/posts/2020-08-10-clojure-libraries/
</link>
<title>
My go-to Clojure libraries
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I started developing in Clojure at the end of 2014, and I use it professionally since 2018. With time, I built a list of libraries which are for me essential when I work with Clojure. Some of these libraries were written at Exoscale, where I work. A big thanks to all maintainers and contributors ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_error_handling&quot;&gt;Error handling&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I always had troubles managing errors in Clojure until I discovered &lt;a href=&quot;https://github.com/exoscale/ex&quot;&gt;ex&lt;/a&gt; (written by a coworker, thanks to him :p). This library was a game changer for me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;ex&lt;/code&gt; allows you to define exception types in the ex data by setting the &lt;code&gt;:exoscale.ex/type&lt;/code&gt; key. You can then use the &lt;code&gt;try+&lt;/code&gt; macro to catch Exceptions with a given type, like in this example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ex/try+

  (throw (ex-info &quot;Argh&quot; {:type ::bar :foo &quot;a foo&quot;}))

  (catch ::foo data
    (prn :got-ex-data data))

  (catch ::bar {:as data :keys [foo]}
    ;; in that case it would hit this one
    (prn :got-ex-data-again foo))

  (catch ExceptionInfo e
   ;; this would match an ex-info that didn't get a hit with catch-ex-info)

  (catch Exception e (prn :boring))

  (finally (prn :boring-too))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;ex&lt;/code&gt; also provides default types like &lt;code&gt;:exoscale.ex/not-found&lt;/code&gt;, &lt;code&gt;:exoscale.ex/forbidden&lt;/code&gt; and helper functions to create exceptions (like &lt;code&gt;(exoscale.ex/ex-not-found &quot;not found !&quot; {:foo &quot;bar&quot;})&lt;/code&gt; to create an exception of type &lt;code&gt;:exoscale.ex/not-found&lt;/code&gt;, or &lt;code&gt;exoscale.ex/ex-not-found!&lt;/code&gt; to create and throw it).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;ex&lt;/code&gt; also allows you to derive exceptions types from other types.&lt;br&gt;
Let&amp;#8217;s take an example. You might want have multiple types for authentication errors, like &lt;code&gt;::invalid-api-key&lt;/code&gt; or &lt;code&gt;::invalid-token&lt;/code&gt;, but make them all derive from &lt;code&gt;::ex/forbidden&lt;/code&gt; to be able to convert them easily to an HTTP response:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ex/derive ::invalid-api-key ::ex/forbidden)
(ex/derive ::invalid-token ::ex/forbidden)

(defmulti ex-&amp;gt;response
  (fn [e]
    (some-&amp;gt; e ex-data :type))
  :hierarchy exoscale.ex/hierarchy)

(defmethod ex-&amp;gt;response ::ex/forbidden [e]
  {:body (ex-message e)
   :status 403})

(defmethod ex-&amp;gt;response ::ex/not-found [e]
  {:body (ex-message e)
   :status 404})

(defmethod ex-&amp;gt;response :default [_]
  {:body &quot;default error message&quot;
   :status 500})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s generate some errors:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(ex-&amp;gt;response (ex/ex-not-found &quot;thing not found&quot;))
{:body &quot;thing not found&quot;, :status 404}

(ex-&amp;gt;response (ex-info &quot;invalid token&quot; {:type ::invalid-token}))
{:body &quot;invalid token&quot;, :status 403}

(ex-&amp;gt;response (ex-info &quot;invalid api key&quot; {:type ::invalid-api-key}))
{:body &quot;invalid api key&quot;, :status 403}

(ex-&amp;gt;response (ex-info &quot;error !&quot; {}))
{:body &quot;default error message&quot;, :status 500}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can do tons of things with this library !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_http&quot;&gt;HTTP&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I like &lt;a href=&quot;https://github.com/ring-clojure/ring/tree/master/ring-jetty-adapter&quot;&gt;Ring Jetty Adapter&lt;/a&gt; as a HTTP server. I use a lot &lt;a href=&quot;https://github.com/ztellman/aleph&quot;&gt;Aleph&lt;/a&gt; at my job, but the current state of the project is not reassuring. I&amp;#8217;ve recently started migrating my side projects to Jetty, and it works perfectly.&lt;br&gt;
Performances are also great: one of my coworker used Ring Jetty to serve thousands of requests per seconds on commodity hardware. it seems everyone want reactive/async softwares today (which is possible with Jetty), but I think blocking is alright for most projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don&amp;#8217;t use ring middlewares because I prefer the Interceptor pattern. For that, I use the &lt;a href=&quot;https://github.com/exoscale/interceptor&quot;&gt;Interceptor&lt;/a&gt; library from Exoscale. This library also supports async interceptors (based on Manifold, core.async or CompletableFuture).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For me, it&amp;#8217;s easier to reason about my request pipeline using interceptors rather than middlewares. It&amp;#8217;s also easy to convert Ring middlewares to interceptors, for example for cookies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(def cookies
  {:name ::cookies
   :enter (fn [ctx] (update ctx :request #(cookies/cookies-request % {})))
   :leave (fn [ctx] (update ctx :response #(cookies/cookies-response % {})))})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, I reuse functions from &lt;code&gt;ring.middleware.cookies&lt;/code&gt; in my interceptor.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_json&quot;&gt;json&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I always used &lt;a href=&quot;https://github.com/dakrone/cheshire&quot;&gt;cheshire&lt;/a&gt; and never had issues with it, so I will continue to use it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_http_client&quot;&gt;HTTP client&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dakrone/clj-http&quot;&gt;clj-http&lt;/a&gt; is what you want.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_crypto&quot;&gt;Crypto&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I like &lt;a href=&quot;https://github.com/weavejester/crypto-random&quot;&gt;crypto-random&lt;/a&gt; to generate random bytes and &lt;a href=&quot;https://github.com/weavejester/crypto-password&quot;&gt;crypto-password&lt;/a&gt; to manage passwords.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuration_loading&quot;&gt;Configuration loading&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/juxt/aero&quot;&gt;Aero&lt;/a&gt; is a very good library if you want to load EDN configurations. For YAML, I use &lt;a href=&quot;https://github.com/exoscale/yummy&quot;&gt;Yummy&lt;/a&gt; which supports tons of YAML tags (like &lt;code&gt;!keyword&lt;/code&gt;, &lt;code&gt;!envvar&lt;/code&gt;&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If I have to read things from environment variables, I use the &lt;a href=&quot;https://github.com/weavejester/environ&quot;&gt;environ&lt;/a&gt; library.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_ssl&quot;&gt;SSL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/aphyr/less-awful-ssl&quot;&gt;Less-awful-ssl&lt;/a&gt; is &lt;strong&gt;mandatory&lt;/strong&gt; to create SSL contexts from certificates files.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_sql&quot;&gt;SQL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I use &lt;a href=&quot;https://github.com/seancorfield/next-jdbc&quot;&gt;next-jdbc&lt;/a&gt; to access SQL databases. The API is nice and it&amp;#8217;s easy to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For database migrations, I use &lt;a href=&quot;https://github.com/weavejester/ragtime&quot;&gt;Ragtime&lt;/a&gt;. Again, it&amp;#8217;s easy to use and I never had issues with it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I use &lt;a href=&quot;https://github.com/brettwooldridge/HikariCP&quot;&gt;HikariCP&lt;/a&gt; for my databases connection pools. It&amp;#8217;s a Java library but it&amp;#8217;s easy to use from Clojure. Here is an example for Postgresql:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(defn pool
  [{:keys [user password host port name max-pool-size key cert cacert ssl-password ssl-mode schema]}]
  (let [url (format &quot;jdbc:postgresql://%s:%d/%s&quot;
                    host port name)
        config (doto (HikariConfig.)
                 (.setMetricRegistry metric/registry)
                 (.setJdbcUrl url)
                 (.addDataSourceProperty &quot;user&quot; user)
                 (.addDataSourceProperty &quot;password&quot; password)
                 (.setMaximumPoolSize (or max-pool-size default-pool-size)))]
    (when schema
        (.addDataSourceProperty config &quot;currentSchema&quot; schema))
    (when key
      (.addDataSourceProperty config &quot;ssl&quot; true)
      (.addDataSourceProperty config
                              &quot;sslfactory&quot;
                              &quot;org.postgresql.ssl.jdbc4.LibPQFactory&quot;)
      (.addDataSourceProperty config &quot;sslcert&quot; cert)
      (.addDataSourceProperty config &quot;sslkey&quot; key)
      (.addDataSourceProperty config &quot;sslrootcert&quot; cacert)
      (.addDataSourceProperty config &quot;sslmode&quot; (or ssl-mode
                                                   default-ssl-mode)))
    (HikariDataSource. config)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_eql&quot;&gt;EQL&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;EQL &lt;a href=&quot;https://github.com/edn-query-language/eql&quot;&gt;EDN Query Language&lt;/a&gt; is a language to query data using EDN datastructures.
The &lt;a href=&quot;https://github.com/exoscale/seql/&quot;&gt;seql&lt;/a&gt; library takes inspiration from EQL and can be used to access (and mutate) entities stored on SQL databases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The documentation could be improved (I plan to write an article explaining how seql works in details), but you can check the &lt;a href=&quot;https://github.com/exoscale/seql/blob/master/doc/quickstart.md&quot;&gt;quickstart&lt;/a&gt; for basic examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It supports for example listeners (functions which will be executed when a mutation is successfully executed), preconditions (when a mutation is performed, you can add checks to verify the database state. Preconditions are executed in the same transaction than the mutation).&lt;br&gt;
t will also automatically verify (using clojure spec) if the parameters passed to mutations are valid or not, and even automatically coerce parameters (like string to uuid, string to keywords&amp;#8230;&amp;#8203;) to the right type !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Everything (the database schema, the mutations, the queries to execute &amp;#8230;&amp;#8203;) is represented as EDN.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We use seql intensively at Exoscale. it&amp;#8217;s a powerful library which I really like to use.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_logging&quot;&gt;Logging&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I use &lt;a href=&quot;https://github.com/clojure/tools.logging&quot;&gt;tools.logging&lt;/a&gt; to log things, and &lt;a href=&quot;https://github.com/pyr/unilog&quot;&gt;unilog&lt;/a&gt; to configure the logger. Unilog is simple to use and allows you to choose the logging format (&lt;code&gt;json&lt;/code&gt; for example), log things in files, control the log level of your loggers&amp;#8230;&amp;#8203;&lt;br&gt;
Unilog also allows you to add a context to your log (new keys if the logs are json formatted for example) by using the &lt;code&gt;unilog.context/with-context&lt;/code&gt; macro.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_metrics&quot;&gt;Metrics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think the best solution today is to wrap the Java &lt;a href=&quot;https://micrometer.io/&quot;&gt;Micrometer&lt;/a&gt; library. It&amp;#8217;s easy to use, supports tags, has tons of outputs (Prometheus, Graphite, Datadog&amp;#8230;&amp;#8203;). It&amp;#8217;s just what I want from a metric library.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tests&quot;&gt;Tests&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I use the default &lt;code&gt;clojure.test&lt;/code&gt; runner, but for me &lt;a href=&quot;https://github.com/pjstadig/humane-test-output&quot;&gt;humane-test-output&lt;/a&gt; to pretty print test outputs is mandatory. Here is an example without and with &lt;code&gt;humane-test-output&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(deftest foo-test
  (is (= {:foo 1 :bar 2}
         {:baz 3})))

;; without

expected: (= {:foo 1, :bar 2} {:baz 3})

  actual: (not (= {:foo 1, :bar 2} {:baz 3}))

;; with

expected: {:foo 1, :bar 2}

  actual: {:baz 3}
    diff: - {:foo 1, :bar 2}
          + {:baz 3}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For mocks, the &lt;a href=&quot;https://github.com/alexanderjamesking/spy&quot;&gt;spy&lt;/a&gt; library allows you to easily mock protocols, functions&amp;#8230;&amp;#8203; and check how many time things were called and with which parameters. I always include this library in my &lt;code&gt;:dev&lt;/code&gt; profile.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_linter&quot;&gt;Linter&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/borkdude/clj-kondo&quot;&gt;clj-kondo&lt;/a&gt; is &lt;strong&gt;amazing&lt;/strong&gt;, and brings me joy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And you, what are your favorite libraries ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Mon, 10 Aug 2020 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-08-08-estimations/
</guid>
<link>
https://mcorbin.fr/posts/2020-08-08-estimations/
</link>
<title>
Développement et estimation de temps
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous devez déjà vous dire &quot;encore un article disant que les estimations de temps ça sert à rien&quot; ? C&amp;#8217;est en effet la grande mode depuis quelques années. Mais comme toujours, le diable se cache dans les détails et donnerai mon avis personnel sur cette question.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_estimations_vraiment_utile&quot;&gt;Les estimations, vraiment utile ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quand les gens parlent d&amp;#8217;estimations, ils décrivent généralement deux situations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_les_estimations_en_début_de_projet&quot;&gt;Les estimations en début de projet&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le projet n&amp;#8217;est pas encore lancé qu&amp;#8217;il faut déjà faire des estimations, par exemple dans des réponses à appel d&amp;#8217;offre.&lt;br&gt;
Comme vous vous en doutez, ces estimations sont souvent fausses. De plus, ce n&amp;#8217;est pas forcément l&amp;#8217;aspect technique qui est pris en compte lors de ces estimations.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est encore plus vrai sur des gros projets où trop de variables rentrent en compte.&lt;br&gt;
De plus, dans le cas de prestations externes, ne pas forcément connaître le domaine métier du client ou l&amp;#8217;équipe du futur projet (qui n&amp;#8217;est parfois même pas encore recrutée à ce moment là) n&amp;#8217;aide pas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si demain vous me dites &quot;Bon, il faut que tu développes un site de e-commerce faisant ça, ça et ça avec une équipe que tu ne connais pas&quot;, en effet je ne saurai pas faire une estimation de temps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_une_estimation_approximative_est_possible&quot;&gt;Une estimation approximative est possible&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Néanmoins, une estimation approximative est possible selon moi si le projet respecte plusieurs critères:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;L&amp;#8217;équipe développant le projet est connue, les gens ont déjà travaillés ensemble, des méthodes de travail et automatismes sont déjà en place&amp;#8230;&amp;#8203; Bref, on ne part pas en terrain inconnu avec 20 prestas arrivant d&amp;#8217;on ne sait trop où.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Le domaine du projet est connu par l&amp;#8217;équipe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Le scope du projet est connu. On sait d&amp;#8217;où on part, où l&amp;#8217;on veut arriver, et dans les grandes lignes ce qui doit être fait pour y arriver.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On a pris un peu de temps pour valider certains besoins techniques, voir on a quelques maquettes du projet&amp;#8230;&amp;#8203; Bref, on ne part pas d&amp;#8217;une feuille blanche.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans ce cas, et si le projet n&amp;#8217;est pas un truc gigantesque sur 10 ans, je pense qu&amp;#8217;une estimation approximative peit être donnée. Bien sûr, il y aura des surprises. Le projet estimé à 4 mois mettra peut être 3 mois, ou bien 6 mois, mais cela donne au moins un ordre de grandeur et permet de voir si le projet est réalisable dans un temps acceptable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Avoir un ordre de grandeur est important. Si vous prévoyez de sortir dans les 6 mois un produit pour vos clients mais qu&amp;#8217;en fait vous mettez 3 ans, cela peut être problématique pour l&amp;#8217;entreprise.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_les_estimations_de_tâches&quot;&gt;Les estimations de tâches&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai travaillé il y a quelques années sur un gros projet où à chaque sprint des products owners et un lead dev estimaient toutes les tâches présentes dans le backlog (JIRA pour ne rien arranger).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Evidemment, cela ne fonctionnait pas du tout, notamment parce que les personnes faisant les estimations n&amp;#8217;étaient pas les personnes développant les fonctionnalités. Il fallait d&amp;#8217;ailleurs aussi mettre sur les tickets JIRA le temps réellement passé dessus. Bien sûr le grand jeu était en fin de semaine de mettre des temps random sur les tickets pour que ça fasse 8 heures/jour. Mais cela est une autre histoire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Estimer les tâches de cette façon est complètement inutile et même néfaste. Cela prend du temps, met la pression aux équipes (car les devs se disent &quot;OMG je vais dépasser l&amp;#8217;estimation&quot;) et ne sert strictement à &lt;strong&gt;rien&lt;/strong&gt;.&lt;br&gt;
On sait que l&amp;#8217;on va avoir des imprévus, que certaines tâches seront en fait plus difficiles que prévu&amp;#8230;&amp;#8203; Bref, estimer n&amp;#8217;apporte rien dans ce cas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais faut-il quand même se passer totalement d&amp;#8217;estimation sur les tâches ? Je ne pense pas. A entendre certains devs, estimer serait complètement impossible quelle que soit la tâche.&lt;br&gt;
Pour être honnête, je me poserai beaucoup de questions si un dev travaillant depuis plusieurs mois sur un projet, connaissant la stack technique&amp;#8230;&amp;#8203; affirmait ce genre de choses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_quand_estimer&quot;&gt;Quand estimer ?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;estimation doit être avant tout un exercice personnel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quand je me lance sur une tâche, j&amp;#8217;estime toujours mentalement le temps que cela va me prendre. Si vous ne le faites pas, essayez, c&amp;#8217;est un très bon exercice.&lt;br&gt;
En connaissant bien le projet, ses technos, et le domaine métier, il est selon moi possible de taper assez juste (bien sûr, avec une marge d&amp;#8217;erreur) pour un certain nombre de tâches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous n&amp;#8217;arrivez pas à donner une estimation mentale &quot;à la louche&quot; pour une tâche, demandez vous pourquoi. Par exemple, peut être que:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;La tâche n&amp;#8217;est pas assez détaillée ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vous ne connaissez pas bien le projet ou n&amp;#8217;êtes pas à l&amp;#8217;aise avec la stack technique utilisée ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La tâche est trop grosse, peut être mériterait t-elle d&amp;#8217;être découpée en plusieurs sous tâches ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bien sûr, parfois on tombera sur une tâche où on se prendra un mur car un truc important n&amp;#8217;avait pas été identifié (surtout vrai en début de projet je trouve), ou bien certains types de tâches (investiguer des bugs complexes par exemple) ne sont pas vraiment estimables, mais globalement estimer un certain nombre de &lt;strong&gt;ses&lt;/strong&gt; tâches est je pense possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela me permet également de savoir si je suis en train de bloquer ou non, et de savoir si c&amp;#8217;est le moment de re-réfléchir au problème voir de demander de l&amp;#8217;aide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enfin, estimer les tâches mentalement permet de savoir à peu près ce qui devrait être fait (et donc arriver en prod) dans un futur proche. C&amp;#8217;est toujours cool de pouvoir se dire que telle fonctionnalité devrait arriver en prod en fin de semaine (et de finir la semaine en ayant effectivement terminé la tâche).&lt;br&gt;
Cela me permet également de donner une estimation si la tâche est attendue par une autre personne ou équipe (mais tout le monde doit être au courant que c&amp;#8217;est une estimation et non un engagement).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, estimer est un très bon exercice à réaliser de son côté.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sat, 08 Aug 2020 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-06-27-git-avancee/
</guid>
<link>
https://mcorbin.fr/posts/2020-06-27-git-avancee/
</link>
<title>
Git: quelques commandes avancées.
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans &lt;a href=&quot;https://mcorbin.fr/posts/2020-06-26-git-introduction/&quot;&gt;l&amp;#8217;article précédent&lt;/a&gt;, j&amp;#8217;ai expliqué rapidement les bases de Git. Dans cet article, je montrerai quelques commandes avancées.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_git_reset&quot;&gt;git reset&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La commande &lt;code&gt;git reset&lt;/code&gt; permet de modifier votre espace de travail local pour le faire pointer sur le commit (ou une référence de commit) de votre choix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reprenons notre projet Git créé précédemment, et créons un nouveau commit sur master:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ echo &quot;f3&quot; &amp;gt; f3 &amp;amp;&amp;amp; git add f3 &amp;amp;&amp;amp; git commit -m &quot;f3&quot;
[master 15b0637] f3
 1 file changed, 1 insertion(+)
 create mode 100644 f3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici l&amp;#8217;output de &lt;code&gt;git log&lt;/code&gt; montrant les deux derniers commits, dont celui que nous avons fait:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git log
commit 82cd1525631214e33ddbebf852bc4dbfb8431154 (HEAD -&amp;gt; master)
Author: mcorbin &amp;lt;corbin.math@gmail.com&amp;gt;
Date:   Sat Jun 27 11:05:39 2020 +0200

    f3

commit 67f675e9b9a3a34df6b6bd20e474980498de6332
Author: mcorbin &amp;lt;corbin.math@gmail.com&amp;gt;
Date:   Sat Jun 27 10:12:06 2020 +0200

    f2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaginons maintenant qu&amp;#8217;en fait, nous ne voulons plus voir ce commit &lt;code&gt;f3&lt;/code&gt; (par exemple, nous avons fait une erreur dans f3 et voulons modifier son contenu mais nous ne voulons pas créer un second commit contenant les modifications, nous voulons un seul commit). &lt;code&gt;git reset&lt;/code&gt; permet de réaliser cela de deux façons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git reset &amp;lt;reference&amp;gt;&lt;/code&gt;, comme par exemple &lt;code&gt;git reset 67f675e9b9a3a34df6b6bd20e474980498de6332&lt;/code&gt;. Ici, le commit &lt;code&gt;f3&lt;/code&gt; est supprimé (non visible dans &lt;code&gt;git log&lt;/code&gt;), mais ses modifications sont conservées:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ git status
Sur la branche master
Votre branche est en avance sur 'origin/master' de 3 commits.
  (utilisez &quot;git push&quot; pour publier vos commits locaux)

Fichiers non suivis:
  (utilisez &quot;git add &amp;lt;fichier&amp;gt;...&quot; pour inclure dans ce qui sera validé)

	f3

aucune modification ajoutée à la validation mais des fichiers non suivis sont présents (utilisez &quot;git add&quot; pour les suivre)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit ici que notre fichier &lt;code&gt;f3&lt;/code&gt; est toujours présent mais hors de l&amp;#8217;index. Vous pouvez maintenant le modifier et refaire un nouveau commit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git reset --hard &amp;lt;reference&amp;gt;&lt;/code&gt;, par exemple &lt;code&gt;git reset --hard 67f675e9b9a3a34df6b6bd20e474980498de6332&lt;/code&gt;. Ici, le commit est supprimé, mais les modifications de ce commit &lt;strong&gt;sont également supprimées&lt;/strong&gt;. Cela est utile si les modifications du commit supprimé ne vous intéressent plus.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est bien sûr possible d&amp;#8217;utiliser &lt;code&gt;git reset&lt;/code&gt; pour supprimer les modifications de plusieurs commits.&lt;br&gt;
La syntaxe &lt;code&gt;git reset HEAD~&amp;lt;nombre&amp;gt;&lt;/code&gt;, comme &lt;code&gt;git reset HEAD~2&lt;/code&gt; permet de faire un &lt;code&gt;git reset&lt;/code&gt; sur les 2 derniers commits (&lt;code&gt;git reset HEAD~1&lt;/code&gt; serait donc équivalent aux commandes d&amp;#8217;exemples montrées précédemment, car lançant la commande sur le dernier commit). Cette syntaxe permet d&amp;#8217;éviter de devoir connaître le hash d&amp;#8217;un commit pour revenir en arrière.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De manière générale, &lt;code&gt;git reset&lt;/code&gt; est super utile dès que vous voulez revenir sur un commit spécifique, que ce soit sur votre travail local ou un dépôt distant (remote).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaginez par exemple que vous avez fait n&amp;#8217;importe quoi sur votre branche &quot;master&quot; local, et que vous voulez revenir à l&amp;#8217;état du &quot;master&quot; remote (le remote étant nommé &lt;code&gt;origin&lt;/code&gt;). Vous pouvez exécutez:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git fetch origin&lt;/code&gt;: récupère l&amp;#8217;état du remote &lt;code&gt;origin&lt;/code&gt;, mais sans modifier votre dépôt local.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git reset --hard origin/master&lt;/code&gt;: modifie votre état local pour refléter exactement l&amp;#8217;état de la branche master sur le remote &lt;code&gt;origin&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela m&amp;#8217;arrive d&amp;#8217;utiliser &lt;code&gt;git reset&lt;/code&gt; de cette façon quand une branche locale et distante ont trop divergées, et où je veux juste retrouver localement l&amp;#8217;état de mon remote.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_git_rebase&quot;&gt;git rebase&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une autre commande indispensable est &lt;code&gt;git rebase&lt;/code&gt;, qui permet de faire plusieurs choses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_fusionner_des_commits_modifier_des_messages_de_commit&quot;&gt;Fusionner des commits, modifier des messages de commit&amp;#8230;&amp;#8203;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Créons 3 nouveaux commits:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ echo &quot;f4&quot; &amp;gt; f4 &amp;amp;&amp;amp; git add f4 &amp;amp;&amp;amp; git commit -m &quot;f4&quot;
$ echo &quot;f5&quot; &amp;gt; f5 &amp;amp;&amp;amp; git add f5 &amp;amp;&amp;amp; git commit -m &quot;f5&quot;
$ echo &quot;f6&quot; &amp;gt; f6 &amp;amp;&amp;amp; git add f6 &amp;amp;&amp;amp; git commit -m &quot;f6&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous pouvons utiliser la commande &lt;code&gt;git rebase -i &amp;lt;reference&amp;gt;&lt;/code&gt; pour réaliser plusieurs actions.
Exécutons par exemple &lt;code&gt;git rebase -i HEAD~3&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Git devrait ouvrir un éditeur, et va vous demander ce que vous voulez faire. Par exemple, Git m&amp;#8217;a ouvert Emacs avec un contenu que je résume ici:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pick c6eeda9 f4
pick 1996397 f5
pick c5c7447 f6&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit ici nos 3 commits, avec le mot-clé &lt;code&gt;pick&lt;/code&gt; devant. Si vous ne changez rien, et fermez votre éditeur, votre branche n&amp;#8217;aura pas changée. En effet, si un commit est préfixé par &lt;code&gt;pick&lt;/code&gt;, il sera conservé sans aucun changement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe d&amp;#8217;autres préfixes possibles pour réaliser des actions. Voici un extrait de la documentation (il existe d&amp;#8217;autres options que vous pouvez trouver dans la &lt;a href=&quot;https://git-scm.com/docs/git-rebase&quot;&gt;documentation&lt;/a&gt;, mais celles présentées ici sont selon moi ceux les plus utiles):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pick &amp;lt;commit&amp;gt;&lt;/code&gt;: utiliser le commit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reword &amp;lt;commit&amp;gt;&lt;/code&gt;: utiliser le commit, mais reformuler son message&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;edit &amp;lt;commit&amp;gt;&lt;/code&gt;: utiliser le commit, mais s&amp;#8217;arrêter pour le modifier&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;squash &amp;lt;commit&amp;gt;&lt;/code&gt;: utiliser le commit, mais le fusionner avec le précédent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fixup &amp;lt;commit&amp;gt;&lt;/code&gt;: comme &quot;squash&quot;, mais en éliminant son message&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour chaque commit, vous pouvez donc modifier &lt;code&gt;pick&lt;/code&gt; par une autre action si nécessaire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaginons que je veuille fusionner le commit f5 dans f4 (donc les modifications de f5 seront présentes dans f4), sans changer le message de f4, et que je veuille conserver f6 mais en modifiant son message. Je vais éditer le fichier avec:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;pick c6eeda9 f4
fixup 1996397 f5
reword c5c7447 f6&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une fois le fichier fermé, Git m&amp;#8217;ouvrira une nouvelle fenêtre pour éditer le message de f6, que je vais changer en &quot;f6: nouveau message&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une fois la modification terminée, j&amp;#8217;exécute &lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;commit 01eb150ad654cddaee9bececef2f29c64023a4d9 (HEAD -&amp;gt; master)
Author: mcorbin &amp;lt;corbin.math@gmail.com&amp;gt;
Date:   Sat Jun 27 11:17:50 2020 +0200

    f6: nouveau message

commit ebc389fcc34ef6cd5c56dca080461b13a497d594
Author: mcorbin &amp;lt;corbin.math@gmail.com&amp;gt;
Date:   Sat Jun 27 11:17:29 2020 +0200

    f4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit que &lt;code&gt;f5&lt;/code&gt; a disparu (car fusionné par f4 qui contiendra ses modifications), et le message de f6 a été modifié.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est possible à tout moment d&amp;#8217;arrêter un rebase avec &lt;code&gt;git rebase --abort&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En résumé, &lt;code&gt;git rebase&lt;/code&gt; permet entre autre de modifier votre historique de commit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_git_rebase_pour_récupérer_des_modifications&quot;&gt;git rebase pour récupérer des modifications&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La commande &lt;code&gt;git rebase&lt;/code&gt; permet aussi de facilement récupérer des modifications d&amp;#8217;une branche (présente en local ou sur un remote) à une autre. Commençons par créer une nouvelle branche, ajoutons un commit dessus, puis ajoutons 2 nouveaux commits sur master:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# création d'une nouvelle branche nommée &quot;new-branch&quot;
git checkout -b &quot;new-branch&quot;

# création d'un commit sur cette branche
echo &quot;new-branch&quot; &amp;gt; new-branch &amp;amp;&amp;amp; git add new-branch &amp;amp;&amp;amp; git commit -m &quot;new-branch&quot;

# retour sur la brance master
git checkout master

# créations d'un premier commit sur master
echo &quot;master1&quot; &amp;gt; master1 &amp;amp;&amp;amp; git add master1 &amp;amp;&amp;amp; git commit -m &quot;master1&quot;

# créations d'un second commit sur master
echo &quot;master2&quot; &amp;gt; master2 &amp;amp;&amp;amp; git add master2 &amp;amp;&amp;amp; git commit -m &quot;master2&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;état de votre projet local est donc maintenant:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/git_intro/git5.png&quot; alt=&quot;Etat du projet après ajout des commits&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaginons maintenant que je souhaite récupérer sur ma branche &quot;new-branch&quot; les modifications de &quot;master&quot;, pour pouvoir par exemple tester que ma branche fonctionne toujours avec ces nouveaux ajouts. Je peux utiliser &lt;code&gt;git rebase&lt;/code&gt; pour cela:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# on se déplace sur la branche &quot;new-branch&quot;
$ git checkout new-branch

# on lance git rebase pour réappliquer les changements de master sur notre branche
$ git rebase master
Rembobinage préalable de head pour pouvoir rejouer votre travail par-dessus...
Application de  new-branch&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;git rebase master&lt;/code&gt; va prendre les commits ajoutés sur master depuis la création de la branche &quot;new-branch&quot;, et les réappliquer un par un sur &quot;new-branch&quot;. l&amp;#8217;arbre ressemble maintenant à ça:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/git_intro/git6.png&quot; alt=&quot;Etat du projet après git rebase&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit que notre branche contient maintenant les commits de &quot;master&quot;, comme si vous veniez de la créer depuis le dernier commit présent sur &quot;master&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bien sûr, &lt;code&gt;git rebase&lt;/code&gt; fonctionne dans de nombreux contextes. Si je suis sur une branche et que je veux réappliquer les nouveaux changements de mon dépôt distant &lt;code&gt;origin&lt;/code&gt;, je peux faire par exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git fetch origin&lt;/code&gt;: récupère l&amp;#8217;état du remote &lt;code&gt;origin&lt;/code&gt;, mais sans modifier votre dépôt local.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git rebase origin/master&lt;/code&gt;: réapplique les changements de la branche &quot;master&quot; du remote &lt;code&gt;origin&lt;/code&gt; sur ma branche.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;je montre ici des exemles avec &quot;master&quot;, mais la même chose est faisable pour vos autres branches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A noter que si vous avez des conflicts entre commits, le rebase s&amp;#8217;arrêtera pour vous laisser les corriger. Une fois le conflit corrigé, vous devrez parfois (selon votre correction) rajouter les fichiers corrigés dans l&amp;#8217;index avec &lt;code&gt;git add&lt;/code&gt;, et puis exécuter &lt;code&gt;git rebase --continue&lt;/code&gt; pour continuer le rebase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;avantage de récupérer des modifications avec &lt;code&gt;git rebase&lt;/code&gt; par rapport à &lt;code&gt;git merge&lt;/code&gt; (voir mon &lt;a href=&quot;https://mcorbin.fr/posts/2020-06-26-git-introduction/&quot;&gt;article précédent&lt;/a&gt; sur Git pour un exemple de merge) est que vous ne polluerez pas votre arbre Git avec des commits de merge, vous arbre Git sera toujours propre.&lt;br&gt;
Comme dit dans mon article pécédent, il est d&amp;#8217;ailleurs possible de configurer &lt;code&gt;git pull&lt;/code&gt; pour que la commande récupère les modifications distantes en faisant des rebase et non des merge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Connaître &lt;code&gt;git rebase&lt;/code&gt; est indispensable selon moi lorsque l&amp;#8217;on utilise Git.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_fork&quot;&gt;Fork&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, si vous créeez un &lt;code&gt;fork&lt;/code&gt; (par exemple sur Github) d&amp;#8217;un projet Git, vous utiliserez probablement &lt;code&gt;rebase&lt;/code&gt; pour récupérer les modifications du projet original.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En effet, le projet original ne sera qu&amp;#8217;un dépôt distant (remote) supplémentaire (généralement appelé &lt;code&gt;upstream&lt;/code&gt;). Donc pour récupérer par exemple les modifications de &lt;code&gt;upstream&lt;/code&gt; sur votre fork, vous pouvez faire:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git fetch upstream&lt;/code&gt;: récupère les changements du remote &lt;code&gt;upstream&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git rebase upstream/master&lt;/code&gt;: applique les nouveaux commits de la branche &quot;master&quot; du remote &lt;code&gt;upstream&lt;/code&gt; sur mon projet local (mon fork).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_git_push_force&quot;&gt;git push --force&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les commandes &lt;code&gt;git reset&lt;/code&gt; et &lt;code&gt;git rebase&lt;/code&gt; ont one chose en commun: elles peuvent modifier l&amp;#8217;historique Git. Cela peut être problématique quand votre historique local est différent de l&amp;#8217;historique remote. Un exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# poussons tout d'abord nos derniers changements sur master
$ git push origin master

# création d'un nouveau commit
$ echo &quot;nouveau fichier&quot; &amp;gt; nouveau_fichier &amp;amp;&amp;amp; git add nouveau_fichier &amp;amp;&amp;amp; git commit -m &quot;nouveau_fichier&quot;

# on repousse notre nouveau commit sur master
$ git push origin master

# on utilise `git reset` pour supprimer le dernier commit de notre travail local
$ git reset --hard HEAD~1

# on essaye de repousser notre travail local sans ce commit sur le dépôt distant

$ git push origin master
To github.com:mcorbin/test1.git
 ! [rejected]        master -&amp;gt; master (non-fast-forward)
error: impossible de pousser des références vers 'git@github.com:mcorbin/test1.git'
astuce: Les mises à jour ont été rejetées car la pointe de la branche courante est derrière
astuce: son homologue distant. Intégrez les changements distants (par exemple 'git pull ...')
astuce: avant de pousser à nouveau.
astuce: Voir la 'Note à propos des avances rapides' dans 'git push --help' pour plus d'information.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme vous pouvez le voir, il est impossible de pousser notre travail car à cause du &lt;code&gt;git reset&lt;/code&gt;, les deux historiques ont divergés. Une solution est de faire un &lt;code&gt;push&lt;/code&gt; avec &lt;code&gt;--force&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ git push origin master --force
Total 0 (delta 0), réutilisés 0 (delta 0)
To github.com:mcorbin/test1.git
 + eddbc49...8d076bb master -&amp;gt; master (forced update)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, notre dépôt local a &lt;strong&gt;écrasé&lt;/strong&gt; le dépôt distant (donc si certaines modifications étaient seulement présentes sur le dépôt distant, elles seront perdues).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les gens ont parfois peur d&amp;#8217;utiliser &lt;code&gt;git push --force&lt;/code&gt;, car ce serait une mauvaise pratique. Je ne suis pas d&amp;#8217;accord avec cette affirmation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Modifier l&amp;#8217;historique de la branche &quot;master&quot; avec &lt;code&gt;--force&lt;/code&gt; (ou votre branche contenant votre code stables, releases&amp;#8230;&amp;#8203;) est une mauvaise pratique car ces branches doivent rester immuables.&lt;br&gt;
Mais &lt;strong&gt;rien&lt;/strong&gt; n&amp;#8217;empêche de faire un &lt;code&gt;git push --force&lt;/code&gt; sur une branche de travail, après un rebase par exemple. Vérifiez juste avant que vous n&amp;#8217;allez pas écraser les modifications du voisin si vous êtes plusieurs à travailler sur la même branche, mais sinon il n&amp;#8217;y a aucun soucis à utiliser cette option.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_git_stash&quot;&gt;git stash&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le concept de &lt;code&gt;git stash&lt;/code&gt; est simple: les modifications locales sont sauvegardées par &lt;code&gt;git&lt;/code&gt; et ne seront plus visibles dans &lt;code&gt;git status&lt;/code&gt;. Vous pouvez ensuite les réappliquer sur une autre branche, ou plus tard sur la même branche avec &lt;code&gt;git stash pop&lt;/code&gt;. Un exemple tout de suite:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# création et commit d'un nouveau fichier appelé &quot;stash&quot;
$ echo &quot;stash&quot; &amp;gt; stash &amp;amp;&amp;amp; git add stash &amp;amp;&amp;amp; git commit -m &quot;stash&quot;

# édition de ce fichier
$ echo &quot;edition&quot; &amp;gt;&amp;gt; stash

# on voit dans git status que ce fichier a été modifié
$ git status
Sur la branche master
Votre branche est en avance sur 'origin/master' de 1 commit.
  (utilisez &quot;git push&quot; pour publier vos commits locaux)

Modifications qui ne seront pas validées :
  (utilisez &quot;git add &amp;lt;fichier&amp;gt;...&quot; pour mettre à jour ce qui sera validé)
  (utilisez &quot;git checkout -- &amp;lt;fichier&amp;gt;...&quot; pour annuler les modifications dans la copie de travail)

	modifié :         stash

aucune modification n a été ajoutée à la validation (utilisez &quot;git add&quot; ou &quot;git commit -a&quot;)

# sauvegarde de la modification dans git stash
$ git stash
Copie de travail et état de l index sauvegardés dans WIP on master: 7c11f18 stash

# &quot;git status&quot; ne voit plus aucun changement
$ git status
Sur la branche master
Votre branche est en avance sur 'origin/master' de 1 commit.
  (utilisez &quot;git push&quot; pour publier vos commits locaux)

rien à valider, la copie de travail est propre&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un fois des modifications sauvegardées avec &lt;code&gt;git stash&lt;/code&gt;, vous pouvez les réappliquer ailleurs. Appliquons les par exemple sur une autre branche:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# création d'une branche nommée &quot;branch-stash-example&quot;
$ git checkout -b branch-stash-example

# utilisation de &quot;git stash pop&quot; pour appliquer les changements sauvegardés à la branche
$ git stash pop
Sur la branche branch-stash-example
Modifications qui ne seront pas validées :
  (utilisez &quot;git add &amp;lt;fichier&amp;gt;...&quot; pour mettre à jour ce qui sera validé)
  (utilisez &quot;git checkout -- &amp;lt;fichier&amp;gt;...&quot; pour annuler les modifications dans la copie de travail)

	modifié :         stash

aucune modification n a été ajoutée à la validation (utilisez &quot;git add&quot; ou &quot;git commit -a&quot;)
refs/stash@{0} supprimé (443e3b9ac712a6a13ed6e0abab8cf45a520d6d9b)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, &lt;code&gt;git stash&lt;/code&gt; est très utile pour déplacer des changements d&amp;#8217;une branche à une autre.&lt;br&gt;
Vous pouvez même la combiner avec &lt;code&gt;git reset&lt;/code&gt; déplacer un commit d&amp;#8217;une branche à une autre. Par exemple, commitons notre changement dans &lt;code&gt;branch-stash-example&lt;/code&gt;, puis utilisons &lt;code&gt;git reset&lt;/code&gt; pour l&amp;#8217;annuler, puis &lt;code&gt;git stash&lt;/code&gt; pour redéplacer sur master les modifications (donc l&amp;#8217;inverse de ce que nous avons fait précédemment):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# ajout à l'index et commit de notre modification sur le fichier &quot;stash&quot;
$ git add stash &amp;amp;&amp;amp; git commit -m &quot;stash&quot;
[branch-stash-example 4fda3ae] stash
 1 file changed, 1 insertion(+)

# utilisation de &quot;git reset&quot; pour annuler le commit mais en conservant les changements appliqués au fichier stash
$ git reset HEAD~1
Modifications non indexées après reset :
M	stash

# utilisation de &quot;git stash&quot; pour sauvegarder la modification
$ git stash
Copie de travail et état de l index sauvegardés dans WIP on branch-stash-example: 7c11f18 stash

# basculement sur la branche master
$ git checkout master

# utilisation de `git stash pop` pour réappliquer la modification.
$ git stash pop
Sur la branche master
Votre branche est en avance sur 'origin/master' de 1 commit.
  (utilisez &quot;git push&quot; pour publier vos commits locaux)

Modifications qui ne seront pas validées :
  (utilisez &quot;git add &amp;lt;fichier&amp;gt;...&quot; pour mettre à jour ce qui sera validé)
  (utilisez &quot;git checkout -- &amp;lt;fichier&amp;gt;...&quot; pour annuler les modifications dans la copie de travail)

	modifié :         stash

aucune modification n a été ajoutée à la validation (utilisez &quot;git add&quot; ou &quot;git commit -a&quot;)
refs/stash@{0} supprimé (6a864df4969964e25d1193b7e45958ce870e4c6d)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et voilà ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_git_cherry_pick&quot;&gt;git cherry-pick&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette commande permet de prendre un commit (qui peut être par exemple dans une autre branche) et de l&amp;#8217;appliquer à votre branche courante. Par exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# création d'une branche nommée &quot;cherry-pick-example&quot;
$ git checkout -b cherry-pick-example

# création d'un commit sur cette branche
$ echo &quot;pick&quot; &amp;gt; pick &amp;amp;&amp;amp; git add pick &amp;amp;&amp;amp; git commit -m &quot;pick&quot;

# &quot;git log&quot; nous montre ce commit et son hash
$ git log
commit bdb371a661586357607c1b787a1c1f39afc0b033 (HEAD -&amp;gt; cherry-pick-example)
Author: mcorbin &amp;lt;corbin.math@gmail.com&amp;gt;
Date:   Sat Jun 27 12:13:37 2020 +0200

    pick

# retour sur la branche &quot;master&quot;
$ git checkout master

# on prend le commit créé précédemment et on l'applique sur master avec cherry-pick
$ git cherry-pick bdb371a661586357607c1b787a1c1f39afc0b033

# on voit miantenant notre modification sur master.
$ git log
commit a14f9920e601d4de3e972b3fd24e9be8a7957c4e (HEAD -&amp;gt; master)
Author: mcorbin &amp;lt;corbin.math@gmail.com&amp;gt;
Date:   Sat Jun 27 12:13:37 2020 +0200

    pick&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit ici que le commit ajouté sur master a un hash différent que celui de la branche. C&amp;#8217;est en effet un comportement de &lt;code&gt;cherry-pick&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_combiner_les_commandes&quot;&gt;Combiner les commandes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une fois qu&amp;#8217;on connait toute ces commandes, il faut savoir quand les utiliser et comment les combiner. Cela vient avec l&amp;#8217;expérience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a vu par exemple que combiner &lt;code&gt;git reset&lt;/code&gt; et &lt;code&gt;git stash&lt;/code&gt; peut être utile. Pour sortir de situations difficiles, ces commandes doivent généralement être utilisées ensemble.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Toutes ces commandes peuvent prendre des options, vous pouvez donc lire leurs pages de documentation pour connaître tout ce qu&amp;#8217;il est possible de faire avec.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe un grand nombre de commandes Git très utiles. Par exemple, jetez un coup d&amp;#8217;oeil à &lt;code&gt;git bisect&lt;/code&gt; (qui mériterait un article dédié), qui permet de facilement trouver l&amp;#8217;origine d&amp;#8217;un bug en vous déplaçant de manière optimisée dans un historique git.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je voulais surtout dans cet article présenter celles indispensables selon moi.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sat, 27 Jun 2020 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-06-26-git-introduction/
</guid>
<link>
https://mcorbin.fr/posts/2020-06-26-git-introduction/
</link>
<title>
Git: une introduction
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Que vous soyez dev ou ops, Git est devenu aujourd&amp;#8217;hui indispensable. J&amp;#8217;expliquerai dans cet article dont la cible sont les personnes débutants avec l&amp;#8217;outil les commandes et le fonctionnement de base de Git. Dans &lt;a href=&quot;https://mcorbin.fr/posts/2020-06-27-git-avancee/&quot;&gt;l&amp;#8217;article suivant&lt;/a&gt;, je montrerai des utilisations avancées.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; est un logiciel de gestion de versions distribué. Créé par Linus Torvalds pour la gestion des sources de Linux, il s&amp;#8217;est imposé face à ses concurrents et est aujourd&quot;hui l&amp;#8217;outil de gestion de versions le plus utilisé.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans Git, le code source des projets est stocké sur la machine de chaque personne travaillant sur le projet et sur des dépots distants nommés &quot;remote&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chaque modification est stockée sous la forme d&amp;#8217;un &quot;commit&quot;, qui correspond à l&amp;#8217;état de votre projet à un instant T (vous pouvez retrouver plus d&amp;#8217;informations sur le fonctionnement bas niveau de Git &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Internals-Git-Objects&quot;&gt;dans la documentation&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_commandes&quot;&gt;Commandes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_git_init&quot;&gt;Git init&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout d&amp;#8217;abord, créez un répertoire nommé &quot;test&quot; sur votre machine. Naviguez dans ce répertoire avec votre terminal et exécutez &lt;code&gt;git init&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ git init
Dépôt Git vide initialisé dans /home/mathieu/prog/test/.git/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette commande initialise un projet git. Vous pouvez d&amp;#8217;ailleurs voir qu&amp;#8217;un répertoire &lt;code&gt;.git&lt;/code&gt; a été créé à la racine du répertoire.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_git_add_et_status&quot;&gt;Git add et status&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Créons maintenant un fichier, et lançons la commande &lt;code&gt;git add&lt;/code&gt; dessus:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ echo &quot;test&quot; &amp;gt; foo
$ git add foo
$ git status
Sur la branche master

Aucun commit

Modifications qui seront validées :
  (utilisez &quot;git rm --cached &amp;lt;fichier&amp;gt;...&quot; pour désindexer)

	nouveau fichier : foo&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous vous pouvez le voir, nous utilisons aussi la commande &lt;code&gt;git status&lt;/code&gt; pour voir l&amp;#8217;état actuel de notre projet. On voit ici que le nouveau fichier a été ajouté à l&amp;#8217;index. Cela veut dire que ce fichier est prêt à être commité, mais rien d&amp;#8217;autre. Cela sert juste d&amp;#8217;indication à &lt;code&gt;git commit&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A noter: &lt;code&gt;git add .&lt;/code&gt; vous permet d&amp;#8217;ajouter tous les fichiers en cours de modification à l&amp;#8217;index.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Créons maintenant un commit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_git_commit&quot;&gt;Git commit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Exécutez la commande suivante:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git commit -m &quot;first commit&quot; -m &quot;ceci est mon premier commit git&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je crée ici un commit dont le titre sera &quot;first commit&quot; et la description &quot;ceci est mon premier commit git&quot;. La description est optionnelle ici, mais c&amp;#8217;est une bonne pratique d&amp;#8217;ajouter une description détaillée à chaque commit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez aussi configurer git pour ouvrir votre éditeur sur la commande &lt;code&gt;git commit&lt;/code&gt;, ce qui vous permet d&amp;#8217;écrire plus facilement la description (sur plusieurs lignes par exemple). Dans le fichier &lt;code&gt;~/.gitconfig&lt;/code&gt; de votre machine (où se configurent les options génériques de Git), ajoutez:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[core]
    editor = emacsclient&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, la commande &lt;code&gt;emacsclient&lt;/code&gt; (qui m&amp;#8217;ouvre le fichier dans Emacs) sera automatiquement appelée lors d&amp;#8217;une action Git nécessitant un éditeur. Vous pouvez remplacer cette valeur par votre éditeur préféré.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Regardons maintenant l&amp;#8217;état de notre projet avec &lt;code&gt;git status&lt;/code&gt;, et &lt;code&gt;git log&lt;/code&gt; qui permet de voir notre historique Git:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ git status
Sur la branche master
rien à valider, la copie de travail est propre

$ git log
commit f87ebd782f2b4512b0c192e56d310c8bb618dfc8 (HEAD -&amp;gt; master)
Author: mcorbin &amp;lt;corbin.math@gmail.com&amp;gt;
Date:   Thu Jun 25 23:04:21 2020 +0200

    first commit

    ceci est mon premier commit git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit que notre fichier a été commité. On voit que notre commit est associé à un hash (&lt;code&gt;f87ebd782f2b4512b0c192e56d310c8bb618dfc8&lt;/code&gt;).&lt;br&gt;
Les 7 premiers caractères des hash (&lt;code&gt;f87ebd7&lt;/code&gt; dans notre) sont souvent utilisés en abbréviation dans l&amp;#8217;outillage ou certaines commandes git.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici donc l&amp;#8217;état de notre projet local:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/git_intro/git1.png&quot; alt=&quot;Premier commit&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a donc maintenant un commit sur notre branche principale (appelée &lt;code&gt;master&lt;/code&gt;). Nous verrons plus tard ce qu&amp;#8217;est une branche.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_remote&quot;&gt;Remote&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Poussons maintenant notre travail sur un dépôt distant. Par exemple, créez un projet sur Github (ou Gitlab, bitbucket&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, je vais créer par exemple un projet nommé &quot;test1&quot; sur mon compte Github. Une fois le projet créé, je vais l&amp;#8217;ajouter en tant que &quot;remote&quot; sur mon projet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git remote add origin git@github.com:mcorbin/test1.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je crée ici un remote appelé &lt;code&gt;origin&lt;/code&gt;. La commande &lt;code&gt;git remote&lt;/code&gt; (qui supporte une option &lt;code&gt;-v&lt;/code&gt; pour avoir plus d&amp;#8217;informations`) vous permet de lister les remotes de votre projet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Poussons maintenant notre code sur ce remote:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git push -u origin master
Énumération des objets: 3, fait.
Décompte des objets: 100% (3/3), fait.
Écriture des objets: 100% (3/3), 620 bytes | 620.00 KiB/s, fait.
Total 3 (delta 0), réutilisés 0 (delta 0)
To github.com:mcorbin/test1.git
 * [new branch]      master -&amp;gt; master
La branche 'master' est paramétrée pour suivre la branche distante 'master' depuis 'origin'.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, nous poussons notre état local sur le dépôt &quot;origin&quot; et sur la branche &quot;master&quot;. L&amp;#8217;option &lt;code&gt;-u&lt;/code&gt; nous permet d&amp;#8217;indiquer à Git que notre branche &quot;master&quot; locale correspond à notre branche &quot;master&quot; distante.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais qu&amp;#8217;est ce qu&amp;#8217;une branche ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_branches&quot;&gt;Branches&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La commande &lt;code&gt;git branch&lt;/code&gt; permet de lister vos branches. Seulement &quot;master&quot; existe pour l&amp;#8217;instant.&lt;br&gt;
Créons une nouvelle branche appelée &quot;my-feature&quot; avec &lt;code&gt;git branch my-feature&lt;/code&gt;. Votre nouvelle branche est créée.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les branches permettent de travailler en isolation de la branche principale de votre projet. Vous pouvez, comme sur master, créer des commits, push vos modifications sur une branche distante&amp;#8230;&amp;#8203; sans risquer de tout casser. Pour cela, vous devez commencer par vous &quot;déplacer&quot; sur votre branche nouvellement créée.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La comande &lt;code&gt;git checkout&lt;/code&gt; permet cela. Ici, &lt;code&gt;git checkout my-feature&lt;/code&gt; vous positionnera sur votre nouvelle branche dans votre projet local. Vous pouvez vérifier cela avec &lt;code&gt;git status&lt;/code&gt; ou &lt;code&gt;git branch&lt;/code&gt; à tout moment si vous avez un doute sur le positionnement de votre projet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note: la commande &lt;code&gt;git checkout -b &amp;lt;nom_de_branche&amp;gt;&lt;/code&gt; permet de faire les deux actions précédentes en une commande.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une branche est tout simplement &lt;strong&gt;un pointeur sur un commit&lt;/strong&gt;. Dans notre cas, nous venons de créer notre branche, et donc nos branches &quot;master&quot; et &quot;my-feature&quot; pointent sur notre seul et unique commit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Créons maintenant un nouveau fichier et puis commitons le dans notre branche:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ echo &quot;hello&quot; &amp;gt; babar
$ git add .
$ git commit -m &quot;nouveau commit sur ma branche&quot;
[my-feature 7cd6872] nouveau commit sur ma branche
 1 file changed, 1 insertion(+)
 create mode 100644 babar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous exécutez &lt;code&gt;git log&lt;/code&gt;, vous verrez votre nouveau commit. Comme dit précédemment, la branche &quot;master&quot; n&amp;#8217;a pas bougée, mais la branche &quot;my-feature&quot; pointe maintenant sur ce nouveau commit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/git_intro/git2.png&quot; alt=&quot;ma nouvelle branche my-feature et son commit&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez maintenant pousser sur votre dépôt distant votre nouveau commit et votre branche avec &lt;code&gt;git push -u origin my-feature&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_merges_de_branches&quot;&gt;Merges de branches&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous allons maintenant ajouter le travail que nous avons fait sur la branche &quot;my-feature&quot; sur la branche master. Si vous utilisez un outil comme Github, cela peut être fait via l&amp;#8217;interface de Pull Request. Ici, nous le ferons en ligne de commande.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Retournons sur la branche &quot;master&quot; avec &lt;code&gt;git checkout master&lt;/code&gt;, et importons notre commit de la branche &lt;code&gt;my-feature&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git merge my-feature
Mise à jour f87ebd7..7cd6872
Fast-forward
 babar | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 babar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez voir avec &lt;code&gt;git log&lt;/code&gt; que le commit de notre branche a été rajouté à master.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La mention de &lt;code&gt;Fast-forward&lt;/code&gt; indique que Git s&amp;#8217;est contenté d&amp;#8217;appliquer le commit de la branche &quot;my-feature&quot; au dessus de &quot;master&quot;. Cela est possible car le travail était linéaire. Notre branche &quot;master&quot; n&amp;#8217;avait pas bougée, et le commit de la branche &quot;feature&quot; (dont la source était master) a simplement été rajouté par Git sur &quot;master&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/git_intro/git3.png&quot; alt=&quot;Exemple de fast forward&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela serait différent dans ce cas là:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# Création et déplacement sur une nouvelle branche
git checkout -b fix-bug

# Création d'un fichier et commit sur cette branche
echo &quot;f1&quot; &amp;gt;&amp;gt; f1 &amp;amp;&amp;amp; git add f1 &amp;amp;&amp;amp; git commit -m &quot;f1&quot;

# Retour sur master
git checkout master

# Création d'un ouveau commit sur master
echo &quot;f2&quot; &amp;gt; f2 &amp;amp;&amp;amp; git add f2 &amp;amp;&amp;amp; git commit -m &quot;f2&quot;

# Merge de notre branche &quot;fix-bug&quot; sur master
git merge fix-bug&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A ce moment, Git va créer un nouveau commit, appelé commit de merge (et vous demander d&amp;#8217;écrire son message).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En effet, la branche &quot;master&quot; a changée depuis le moment de la création de &quot;fix-bug&quot;, et dans ce cas Git crée un nouveau commit (qui est la combinaisons de plusieurs commits) pour pouvoir merger votre branche.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/git_intro/git4.png&quot; alt=&quot;Exemple de commit de merge&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous reparlerons de tout cela dans un prochain article qui sera dédié aux commandes git avancées (il existe des techniques pour éviter cela si vous le voulez).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A noter que lorsqu&amp;#8217;une branche est mergée, elle existe toujours et pointe toujours sur son dernier commit. Si vous voulez la supprimer, vous pouvez le faire avec &lt;code&gt;git branch -D &amp;lt;nom&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pull&quot;&gt;Pull&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Git a été conçu pour que plusieurs personnes puissent travailler sur le même projet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La commande &lt;code&gt;git pull &amp;lt;remote&amp;gt; &amp;lt;branche&amp;gt;&lt;/code&gt; permet de récupérer l&amp;#8217;état d&amp;#8217;un dépôt distant sur votre machine local. La commande &lt;code&gt;git pull&lt;/code&gt; est en fait la combinaison de  deux actions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Récupérer les modifications de votre remote (origin par exemple). Il est d&amp;#8217;ailleurs possible d&amp;#8217;exécuter seulement cette action avec la commande &lt;code&gt;git fetch &amp;lt;remote&amp;gt;&lt;/code&gt;, donc &lt;code&gt;git fetch origin&lt;/code&gt; dans notre cas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lancer un &lt;code&gt;git merge&lt;/code&gt; pour fusionner les modifications appliquées sur votre remote avec votre travail local. Il existe là aussi plusieurs stratégies pour fusionner votre remote et votre travail local, et nous en reparlerons dans &lt;a href=&quot;https://mcorbin.fr/posts/2020-06-27-git-avancee/&quot;&gt;l&amp;#8217;article suivant&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_conflits&quot;&gt;Conflits&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lorsque vous récupérez des modifications d&amp;#8217;un dépôt distant, vous pouvez avoir des conflits. Imaginons que vous modifiez un fichier, puis créez un commit. Si quelqu&amp;#8217;un a modifié la même partie de ce fichier sur votre dépôt distant, &lt;code&gt;git pull&lt;/code&gt; produira un conflit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ git pull
Rembobinage préalable de head pour pouvoir rejouer votre travail par-dessus...
Application de  foo
Utilisation de l'information de l'index pour reconstruire un arbre de base...
Retour à un patch de la base et fusion à 3 points...
Fusion automatique de conflict
CONFLIT (ajout/ajout) : Conflit de fusion dans conflict
error: Échec d intégration des modifications.
le patch a échoué à 0001 foo
astuce: Utilisez 'git am --show-current-patch' pour visualiser le patch en échec

Résolvez tous les conflits manuellement, marquez-les comme résolus avec
&quot;git add/rm &amp;lt;fichier en conflit&amp;gt;&quot;, puis lancez &quot;git rebase --continue&quot;.
Si vous préférez sauter ce commit, lancez &quot;git rebase --skip&quot;. Pour arrêter
et revenir à l état antérieur à la commande, lancez &quot;git rebase --abort&quot;.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le contenu du fichier &lt;code&gt;conflict&lt;/code&gt; est dans mon cas:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
hello
=======
conflict
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; foo&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit que quelqu&amp;#8217;un a écrit &quot;hello&quot; dans ce fichier, alors que moi j&amp;#8217;ai écrit &quot;conflict&quot;. A moi de corriger le fichier (par exemple en ne laissant que &quot;conflict&quot; dedans) pour corriger le conflit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je peux ensuite utiliser &lt;code&gt;git rebase --continue&lt;/code&gt; pour indiquer que le conflit est résolu (j&amp;#8217;explique la commande &lt;code&gt;rebase&lt;/code&gt; dans l&amp;#8217;article suivant).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe différentes façons de gérer les modifications apportées par &lt;code&gt;git pull&lt;/code&gt; (merge ou rebase), ce qui influe sur la gestion des conflits. J&amp;#8217;utilise personnellement la méthode du &lt;code&gt;rebase&lt;/code&gt; en indiquant dans le fichier de configuration global de git (&lt;code&gt;~/.gitconfig&lt;/code&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[pull]
  rebase = true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lisez l&amp;#8217;article suivant pour mieux comprendre rebase ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tags&quot;&gt;Tags&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un tag est seulement une étiquette ajoutée à un commit pour qu&amp;#8217;il puisse être référencé de façon plus simple par un humain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La commande &lt;code&gt;git tag &amp;lt;nom&amp;gt;&lt;/code&gt; permet de créer un tag.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est également possible d&amp;#8217;utiliser &lt;code&gt;git tag -a &amp;lt;nom&amp;gt;&lt;/code&gt; pour créer un tag avec plus d&amp;#8217;informations, comme son auteur ou un message de commit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est possible, comme pour une branche ou pour un hash de commit, de se déplacer sur le commit référencé par un tag en utilisant &lt;code&gt;git checkout &amp;lt;tag&amp;gt;&lt;/code&gt;. Cela est pratique si vous voulez vérifier l&amp;#8217;état de votre travail sur un tag spécifique.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_fichier_gitignore&quot;&gt;Fichier .gitignore&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous voudrez parfois que certains fichiers ou dossiers ne soient pas visibles par Git, c&amp;#8217;est à dire qu&amp;#8217;ils ne puissent jamais être ajoutés à l&amp;#8217;index et donc commités.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela est contrôlé par le fichier &lt;code&gt;.gitignore&lt;/code&gt;, qu&amp;#8217;il faut créer à la racine de votre projet. Si vous ajoutez par exemple la valeur &lt;code&gt;my-file&lt;/code&gt; dans ce fichier, les fichiers nommés &lt;code&gt;my-file&lt;/code&gt; présents dans votre projet seront invisibles pour Git.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe d&amp;#8217;autres &quot;patterns&quot; pour ignorer des répertoire, ou bien faire de la négation. Vous pouvez retrouver plus de détails sur ces options dans la &lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;documentation&lt;/a&gt; de Git.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette fonctionnalité est par exemple utile si vous avez besoin d&amp;#8217;avoir des fichiers de configurations spécifiques, ou des mots de passes&amp;#8230;&amp;#8203; à configurer dans votre projet local.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion_et_suite&quot;&gt;Conclusion et suite&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous avons vu ici rapidement comment fonctionne Git. Dans &lt;a href=&quot;https://mcorbin.fr/posts/2020-06-27-git-avancee/&quot;&gt;l&amp;#8217;article suivant&lt;/a&gt;, j&amp;#8217;expliquerai des notions avancées et comment se sortir de situations difficiles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;je pense que la chose la plus importante à comprendre dans Git est le fait que l&amp;#8217;on travaille avec des commits, et que nous avons des moyens de référencer ces commits (branches, tags&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous verrons dans l&amp;#8217;article suivant qu&amp;#8217;il est possible de jouer avec ces commits et ses références pour faire des choses intéressantes dessus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Fri, 26 Jun 2020 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-06-24-cabourotte-release/
</guid>
<link>
https://mcorbin.fr/posts/2020-06-24-cabourotte-release/
</link>
<title>
Cabourotte: un outil de monitoring pour tester l'état de vos services
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai décidé aujourd&amp;#8217;hui de sortir et d&amp;#8217;annoncer une première version de mon nouveau projet Open Source: &lt;strong&gt;&lt;a href=&quot;https://github.com/mcorbin/cabourotte&quot;&gt;Cabourotte&lt;/a&gt;&lt;/strong&gt;. Cet outil permet de réaliser périodiquement différents types de healthchecks sur vos services, et bien plus encore !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_besoin&quot;&gt;Le besoin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a généralement d&amp;#8217;une manière ou une autre des healthchecks qui s&amp;#8217;exécutent sur nos applications pour vérifier si elles fonctionnent correctement ou non.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ces healthchecks peuvent par exemple être réalisés par vos outils de service discovery ou de déploiements comme Consul ou Kubernetes qui tout deux exécutent des healthchecks locaux sur les applications gérées, ou par des outils de monitoring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais par expérience, un healthcheck exécuté par un agent tournant sur le même serveur que l&amp;#8217;application n&amp;#8217;est pas suffisant. Le réseau, de plus en plus complexe dans nos environnements actuels, n&amp;#8217;est pas fiable.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Qui vous dit que vos services sont joignables depuis l&amp;#8217;entièreté de votre infrastructure, ou depuis un autre pays ou continent ? Peut être que certains serveurs n&amp;#8217;arrivent plus à accéder (pendant un temps limité ou non) à certain services suite par exemple à un changement de topologie réseau.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est pour vérifier cela que j&amp;#8217;ai écrit Cabourotte. Cet agent, léger, écrit en Go, est capable aujourd&amp;#8217;hui d&amp;#8217;exécuter différents types de healthchecks (TCP, HTTP(s), DNS) et de reporter le résultat de ces healthchecks de différentes manières.&lt;br&gt;
D&amp;#8217;autres fonctionnalités que je décrirai dans la suite de cet article sont aussi présentes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les binaires de la première release sont trouvables sur &lt;a href=&quot;https://github.com/mcorbin/cabourotte/releases/tag/v0.1.0&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je vais répéter un peu le &lt;a href=&quot;https://github.com/mcorbin/cabourotte#cabourotte&quot;&gt;README&lt;/a&gt; dans cet article, donc n&amp;#8217;hésitez pas à le consulter pour avoir un complément d&amp;#8217;information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les healthchecks peuvent se configurer de deux manières:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Soit via un fichier de configuration YAML.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Soit via une API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les deux systèmes n&amp;#8217;entrent pas en conflit, il est possible de définir des healthchecks des deux manières sans problème sur la même instance du daemon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons par exemple ce fichier de configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;http:
  host: &quot;127.0.0.1&quot;
  port: 9013
dns_checks:
  - name: &quot;mcorbin-dns-check&quot;
    description: &quot;dns healthcheck example&quot;
    domain: &quot;mcorbin.fr&quot;
    interval: 5s
http_checks:
  - name: &quot;mcorbin-http-check&quot;
    description: &quot;http healthcheck example&quot;
    valid_status:
      - 200
      - 201
    target: &quot;mcorbin.fr&quot;
    port: 443
    protocol: &quot;https&quot;
    path: &quot;/&quot;
    timeout: 5s
    interval: 10s
tcp_checks:
  - name: &quot;mcorbin-tcp-check&quot;
    description: &quot;tcp healthcheck example&quot;
    target: &quot;mcorbin.fr&quot;
    port: 443
    timeout: 2s
    interval: 10s
exporters:
  http:
    - host: &quot;127.0.0.1&quot;
      port: 9595
      path: &quot;/&quot;
      protocol: &quot;http&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je définis ici l&amp;#8217;IP et le port de l&amp;#8217;API exposée par le daemon (en passant, mTLS est supporté pour le serveur HTTP), puis définit trois healthchecks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Un healthcheck de type DNS sur &lt;code&gt;mcorbin.fr&lt;/code&gt; qui s&amp;#8217;exécutera toutes les 5 secondes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un healthcheck de type HTTP (une requête GET) sur le même site toutes les 10 secondes. Là aussi, mTLS est supporté. Les status HTTP attendus sont configurables, et je prévois d&amp;#8217;ajouter dans le futur la possibilité d&amp;#8217;exécuter des requêtes de différents types (POST, PUT&amp;#8230;&amp;#8203;), de configurer les headers, paramètres&amp;#8230;&amp;#8203; pour ce type de healthcheck.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un healthcheck de type TCP, là aussi toutes les 10 secondes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Au démarrage, ces healthchecks vont commencer à s&amp;#8217;exécuter. Par défaut, le résultat de chaque healthcheck est:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Loggé dans stdout, par exemple &lt;code&gt;{&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:1592948336.1519916,&quot;caller&quot;:&quot;exporter/root.go:115&quot;,&quot;msg&quot;:&quot;Healthcheck successful&quot;,&quot;name&quot;:&quot;mcorbin-dns-check&quot;,&quot;date&quot;:&quot;2020-06-23 23:38:56.151955119 +0200 CEST m=+4605.356906567&quot;}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disponible sur le endpoint &lt;code&gt;/metrics&lt;/code&gt;: ce endpoint contient, en plus de métriques génériques au format &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt; sur l&amp;#8217;application et ses composants, le résultat (sous forme de counter prometheus) de chaque healthcheck, par status (success ou failure). Le temps d&amp;#8217;exécution de chaque healthcheck par status est aussi disponible (ce qui permet donc de monitorer également la latence).&lt;br&gt;
Cela vous permettra de configurer des alertes et de créer des graphes sur ses healthchecks très facilement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Récupérable via l&amp;#8217;API, mais j&amp;#8217;en parlerai un peu plus loin.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cabourotte peut également exporter les résultats au fil de l&amp;#8217;eau dans des &lt;code&gt;exporters&lt;/code&gt;.&lt;br&gt;
Dans ce fichier de configuration, je passe le résultat des healthchecks à un exporter HTTP (le seul disponible actuellement). La cible recevra le résultat de chaque healthcheck. D&amp;#8217;autres exporters, comme Kafka, seront rajoutés dans le futur.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_memory_store&quot;&gt;Le memory store&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, le status des healthchecks est récupérable via l&amp;#8217;API. En effet, le &lt;strong&gt;dernier résultat&lt;/strong&gt; de chaque healthcheck est récupérable sur le endpoint &lt;code&gt;/result&lt;/code&gt;, et &lt;code&gt;/result/&amp;lt;healthcheck-name&amp;gt;&lt;/code&gt; pour un healthcheck spécifique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les résultats vieux de plus de 120 secondes sont automatiquement supprimés de ce store.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_api&quot;&gt;L&amp;#8217;API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;API permet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;De récupérer la liste des healthchecks actuellement configurés.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;D&amp;#8217;ajouter, mettre à jour, supprimer des healthchecks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comme dit précédemment, de récupérer le résultat des healthchecks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un endpoint &lt;code&gt;/health&lt;/code&gt; (ou &lt;code&gt;/healthz&lt;/code&gt;) permet de savoir si le daemon est démarré.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_one_off_checks&quot;&gt;One-Off checks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;API permet de créer des healthchecks de type &quot;One-Off&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Que celui qui n&amp;#8217;a jamais fait un &lt;code&gt;netcat&lt;/code&gt; ou un &lt;code&gt;curl&lt;/code&gt; pour tester la connexion entre deux machines me jette la première pierre.&lt;br&gt;
Lorsqu&amp;#8217;un healthcheck est créé via l&amp;#8217;API avec l&amp;#8217;option &lt;code&gt;one-off&lt;/code&gt; à &lt;code&gt;true&lt;/code&gt;, le healthcheck est immédiatement exécuté et le résultat retourné dans la réponse HTTP (et le healthcheck ne sera pas exécuté périodiquement).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela permet d&amp;#8217;exécuter rapidement des healthchecks si besoin est. Un exemple où j&amp;#8217;exécute deux healthchecks de type &lt;code&gt;DNS&lt;/code&gt; en one-off via l&amp;#8217;API, un en succès et un en erreur:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mathieu@mathieu:~$ curl -H &quot;Content-Type: application/json&quot; 127.0.0.1:9013/healthcheck/dns -d '{&quot;name&quot;:&quot;mcorbin-dns-check&quot;,&quot;description&quot;:&quot;dns healthcheck example&quot;,&quot;domain&quot;:&quot;mcorbin.fr&quot;,&quot;interval&quot;:&quot;5s&quot;,&quot;one-off&quot;:true}'

{&quot;message&quot;:&quot;One-off healthcheck mcorbin-dns-check successfully executed&quot;}

mathieu@mathieu:~$ curl -H &quot;Content-Type: application/json&quot; 127.0.0.1:9013/healthcheck/dns -d '{&quot;name&quot;:&quot;mcorbin-dns-check&quot;,&quot;description&quot;:&quot;dns healthcheck example&quot;,&quot;domain&quot;:&quot;doesnotexist.mcorbin.fr&quot;,&quot;interval&quot;:&quot;5s&quot;,&quot;one-off&quot;:true}'

{&quot;message&quot;:&quot;Execution of one off healthcheck mcorbin-dns-check failed: Fail to lookup IP for domain: lookup doesnotexist.mcorbin.fr on 192.168.1.1:53: no such host&quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_hot_reload&quot;&gt;Hot Reload&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le daemon se reload sur un &lt;code&gt;SIGHUP&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les healthchecks en cours configurés via API, ou via le YAML et non modifiés continuent de fonctionner comme rien n&amp;#8217;était.&lt;br&gt;
Les healthchecks modifiés, supprimés, ou ajoutés sont gérés comme attendus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le serveur HTTP est aussi redémarré proprement en cas de changement de configuration. Les exporters sont eux stoppés et relancés, mais je prévois d&amp;#8217;améliorer ce point dans le futur (pour ne pas stopper un exporter si cela n&amp;#8217;est pas nécessaire).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le projet permet déjà de réaliser un certain nombre de choses.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gardez en tête que c&amp;#8217;est la toute première release, que j&amp;#8217;ai écris le projet assez rapidement sur mon temps libre, et que je prévois encore un certain nombre de refactoring dans le code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais je suis globalement assez content de l&amp;#8217;état actuel du projet et j&amp;#8217;espère que vous trouverez cela également intéressant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;aimerai ajouter d&amp;#8217;autres types de checks (validité de certificats et expiration par exemple), et peut être écrire une CLI pour intéragir avec le projet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;aimerai également dans le futur intégrer le daemon avec des outils comme Consul ou Kubernetes (via un Operator ?) pour pouvoir automatiquement détecter les applications à monitorer. C&amp;#8217;est d&amp;#8217;ailleus pour cela que le daemon supporte dès maintenant une API pour configurer les healthchecks en plus du fichier de configuration YAML.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaginez si vous pouviez automatiquement exécuter des healthchecks d&amp;#8217;un peu partout avec une configuration totalement automatisée. Peut être un jour ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Plus d&amp;#8217;infos dans les semaines à venir !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 24 Jun 2020 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-06-20-cloud-vendor-lock-in/
</guid>
<link>
https://mcorbin.fr/posts/2020-06-20-cloud-vendor-lock-in/
</link>
<title>
Cloud, Gaia-X: le faux débat du vendor lock-in
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En ce moment d&amp;#8217;annonces concernant Gaia-X, le &quot;meta-cloud&quot; européen (on y reviendra), on parle beaucoup de multi-cloud (le fait de pouvoir facilement déployer son application sur plusieurs Cloud, ou changer facilement de Cloud) et de vendor lock-in. Je donnerai dans cet article mon avis sur ces sujets, et expliquerai pourquoi le lock-in est selon moi un faux sujet dans ce cas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je voudrais également préciser que comme d&amp;#8217;habitude c&amp;#8217;est mon opinion personnelle que j&amp;#8217;exprime dans cet article, et non celle de mon employeur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_dernières_annonces&quot;&gt;Les dernières annonces&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai déjà eu plusieurs fois des discussions sur le Cloud et le lock-in, mais c&amp;#8217;est surtout l&amp;#8217;annonce de Gaia-X qui m&amp;#8217;a donné envie d&amp;#8217;écrire cet article.&lt;br&gt;
Avant de commencer, il faut énoncer une chose: ce qu&amp;#8217;est vraiment Gaia-X n&amp;#8217;est clair pour personne. Après m&amp;#8217;être documenté et assisté à un talk sur le sujet, voici ce que j&amp;#8217;ai cru comprendre.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gaia-X serait donc un produit créé par un consortium d&amp;#8217;entreprise (quelques Cloud providers, entreprises &quot;clientes&quot; de Cloud&amp;#8230;&amp;#8203;) dont l&amp;#8217;objectif serait d&amp;#8217;interfacer les Cloud entre eux dans le but de créer un &quot;meta Cloud&quot; européen. Il n&amp;#8217;y a pas vraiment d&amp;#8217;autres informations sur le sujet, les articles de la presse généraliste et technique ne faisant que répéter la communication officielle (qui elle même ne veut pas dire grand chose).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour l&amp;#8217;instant, la seule fonctionnalité présentée de Gaia-X est un catalogue. L&amp;#8217;utilisateur pourra rechercher dans ce catalogue des produits Cloud en fonction de différents critères, comme &quot;Je veux un Cloud hébergé en France, je veux pouvoir faire du S3&amp;#8230;&amp;#8203;&quot; ou des choses comme ça. Bref, c&amp;#8217;est la version Cloud Native de la Redoute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais qui va sincèrement choisir son Cloud Provider (et donc l&amp;#8217;architecture de son projet) sur catalogue ? La documentation, la qualité et cohérence des produits proposés, la qualité du support, le tooling disponible, la facilité d&amp;#8217;utilisation, le prix&amp;#8230;&amp;#8203; sont autant de facteurs qui vont influer le choix, bien plus que des résultats de recherches répondants à des critères simples.&lt;br&gt;
Je vois déjà les managers arriver un matin en disant &quot;bon, on utilisera maintenant Tartempion pour nos projets, j&amp;#8217;ai mis les critères de l&amp;#8217;appel d&amp;#8217;offre dans la moulinette et c&amp;#8217;était la première réponse&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ca parle aussi de certifications Gaia-X, donc peut être qu&amp;#8217;on peut s&amp;#8217;attendre à des appels d&amp;#8217;offres demandant le tampon Gaia-X, comme pour les certifications ISO actuellement (histoire de rajouter un peu de bureaucratie).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le but à terme serait aussi  d&amp;#8217;interconnecter les Cloud pour pouvoir passer facilement d&amp;#8217;un Cloud à l&amp;#8217;autre. Comment ? On ne sait pas. Une API commune peut être ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, peu d&amp;#8217;informations pour l&amp;#8217;instant. Mais la volonté d&amp;#8217;interconnecter les Clouds semble là. Mais même sans parler de Gaia-X, est ce vraiment utile et possible ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_des_api_communes&quot;&gt;Des API communes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On pourrait se dire &quot;ce serait quand même plus simple si tout le monde fournissait le même produit&quot;. Je ne crois pas du tout à cette approche. Je m&amp;#8217;explique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y a déjà un certain nombre de Cloud existants sur le marché. D&amp;#8217;ailleurs, le mot Cloud veut tout et rien dire. On parle de quoi là ? De IaaS ? de PaaS ? De Cloud fournissant des services spécifiques (comme le Cloud InfluxDB, Sentry, Datadog&amp;#8230;&amp;#8203;) ? Est-il possible de faire rentrer des produits aussi différents dans le même catalogue, et surtout vouloir construire quelque chose permettant de passer de l&amp;#8217;un à l&amp;#8217;autre sans aucun effort ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons le monde de l&amp;#8217;IaaS, que je connais bien. On retrouve entre les différents Cloud des produits qui de prime abord semblent assez proches: machines virtuelles, réseaux privés, load balancers, IP &quot;Elastiques&quot; ou &quot;Flottantes&quot; selon les Cloud &amp;#8230;&amp;#8203; Mais le diable se cache dans les détails.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quand on parle d&amp;#8217;un load balancer, on parle de quoi ? Un load balancer TCP, UDP, HTTP ? Qui fait terminaison ou non ? Qui supporte le proxy protocol ? Et les healthchecks, on les définit comment ? Comment le load balancer détecte-il les machines backends, faut-il les ajouter une par une, il y a t-il la notion de groupes de machines ? Je pourrai continuer comme ça pendant longtemps, et faire cela sur tous les produits.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chaque Cloud Provider a fait, et va faire des choix. En fonction de son existant (en effet, un Cloud ce n&amp;#8217;est pas selon moi des produits sans cohérences entre eux, généralement on construit sur les produits précédents), de ses compétences en interne, des outils choisis pour réaliser telle tâche, voir du matériel physique utilisé.&lt;br&gt;
Si demain on décidait de définir une API commune à tout le monde, on choisit quoi ? Celle du plus gros Cloud Provider, et les autres réimplémentent leurs produits ? Ou bien on construit une API géante, supportant tous les produits de tout le monde, avec toutes les variations possible, mais qui sera de ce fait une usine à gaz inutilisable ?&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai aussi déjà eu des discussions où l&amp;#8217;on me disait &quot;ce serait bien que tout le monde soit sur Openstack, au moins on passerait facilement d&amp;#8217;un Cloud à un autre&quot;. C&amp;#8217;est selon moi le meilleur moyen de tuer l&amp;#8217;innovation.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaginons que vous êtes CTO d&amp;#8217;un Cloud tournant sur Openstack (ou autre produit de plateforme Cloud, ce n&amp;#8217;est pas important). Déjà, il faut savoir que vous n&amp;#8217;utiliserez probablement qu&amp;#8217;une petite partie du code du produit (vu que c&amp;#8217;est un produit très générique fait pour tourner dans pleins de contextes), et que vous aurez probablement à maintenir un fork interne à vie car vous aurez forcément des problèmes spécifique.&lt;br&gt;
Vos clients utilisent donc le tooling Openstack (Terraform, Ansible&amp;#8230;&amp;#8203;) pour déployer de l&amp;#8217;infrastructure chez vous.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais vous avez maintenant une super idée de produit ! Vous allez rajouter rajouter de nouveaux endpoints dans l&amp;#8217;API, et pourquoi pas modifier un peu l&amp;#8217;API des machines virtuelles pour rajouter plus d&amp;#8217;options.&lt;br&gt;
Mais il se pose maintenant un problème: vous n&amp;#8217;êtes dorénavant plus un Cloud proposant de l&amp;#8217;Openstack, mais un Openstack légèrement modifié. Vous n&amp;#8217;êtes plus compatible avec le tooling (et les mainteneurs refusent de faire une exception pour vous).&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On parle beaucoup de vendor lock-in, dans le sens &quot;l&amp;#8217;entreprise proposant un service verrouille le client&quot;. Mais attention à l&amp;#8217;effet inverse où c&amp;#8217;est l&amp;#8217;entreprise qui se fait lock-in. Et c&amp;#8217;est le risque de notre meta-Cloud européen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maîtriser à 100 % sa stack technique est ce qui permet selon moi de développer des produits de qualité rapidement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_vendor_lock_in&quot;&gt;Vendor lock-in&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le vendor lock-in existe-il ? Oui.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quand vous déployez votre infrastructure ou applications chez un Cloud A, il faudra un peu de travail pour passer sur le Cloud B. Selon les Cloud ça peut se faire assez bien, parfois ça peut être compliqué.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par exemple, migrer des machines virtuelles d&amp;#8217;un Cloud à un autre, ce n&amp;#8217;est selon moi pas compliqué. La plupart des Cloud permettent d&amp;#8217;ailleurs de pousser vos propres images de machines virtuelles, donc il est facile d&amp;#8217;utiliser la même image de base sur de nombreux Cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par contre, si vous utilisez des services très spécifiques d&amp;#8217;AWS, Google Cloud ou autre (base de données présentes que chez eux par exemple), là ça peut être un peu plus compliqué. Mais ce n&amp;#8217;est pas la faute du Cloud Provider, qui est selon moi tout à fait en droit de proposer un service non présent chez la concurrence. C&amp;#8217;est de la votre.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y a des moments dans la vie d&amp;#8217;un projet où il faut faire des choix. Des choix de technologies, de langages, d&amp;#8217;hébergement. Ces choix auront une conséquence sur l&amp;#8217;avenir du projet.&lt;br&gt;
Vous pouvez partir &quot;all-in&quot; sur un Cloud, utiliser tous ses services dont ceux pouvant éventuellement vous verrouiller, ou bien n&amp;#8217;utiliser qu&amp;#8217;une partie des services, ou bien partir sur plusieurs Cloud différents dès le début&amp;#8230;&amp;#8203;&lt;br&gt;
Vous pouvez essayer de concevoir vos applications &lt;a href=&quot;https://mcorbin.fr/posts/2020-01-06-plateforme-execution/&quot;&gt;pour être indépendantes de la plateforme d&amp;#8217;exécution&lt;/a&gt;, et qu&amp;#8217;elles puissent être déployées dans différents contextes (PaaS, machines virtuelles, Kubernetes &amp;#8230;&amp;#8203;), ou bien utiliser des produits qui vous feront peut être gagner du temps mais vous enfermeront dans un écosystème.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il n&amp;#8217;y a pas un bon choix et un mauvais choix, c&amp;#8217;est des choix que vous devez faire selon votre contexte et dont vous serez responsable. A vous de définir votre limite dans le lock-in et de choisir en conséquence. Choix qui, soit dit en passant, demandent de bonnes connaissances pour juger les pour et les contre, et c&amp;#8217;est peut être ça qui manque un peu dans certaines entreprises, surtout si la personne qui prend la décision ne fait que prendre le Cloud proposé par la SSII du coin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_standards&quot;&gt;Standards&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Est-ce une raison pour se passer totalement de standards ? Non.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y a déjà des protocoles standards qu&amp;#8217;on utilise tous les jours. A nous de construire sur ces standards. Des standards pour communiquer avec des bus de messages, des standards pour le format d&amp;#8217;une métrique, ou bien des standards pour décrire une API tout en pouvant générer des clients et de la documentation, des standards décrivant des langages de requêtage de base de données&amp;#8230;&amp;#8203;&lt;br&gt;
Construisez vos applications sur ces standards, et ne vous enfermez pas sur des technologies propriétaires. Demandez vous toujours quelle serait la difficulté de redéployer vos applications sur un autre Cloud Provider, ou de passer d&amp;#8217;un produit fournit par le Cloud à un produit hébergé en interne. C&amp;#8217;est de cette façon que vous éviterez le lock-in.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cloud_européen&quot;&gt;Cloud Européen&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Est ce que créer le CORBA du Cloud européen permettra de concurrencer les GAFAM sur ce domaine ? Je ne pense pas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est vrai que les Cloud américains fournissent généralement plus de produits que les Cloud européens, mais je pense que le retard s&amp;#8217;amenuise peu à peu, surtout si l&amp;#8217;on compare les moyens disponibles de chaque côté.&lt;br&gt;
Je pense que tous les acteurs européens ne demandent qu&amp;#8217;à faire leurs preuves. Que des entreprises partent sur des produits américains, très bien, je n&amp;#8217;aime pas d&amp;#8217;ailleurs le marketing visant presque à culpabiliser les gens allant sur des GAFAM. Être européen ne fait pas tout, et non les clients ne font pas utiliser un produit mal ficelé juste par ce qu&amp;#8217;il est européen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais je pense qu&amp;#8217;aujourd&amp;#8217;hui on trouve des produits et entreprises de qualité en Europe, et qui n&amp;#8217;ont selon moi pas que ça à faire que de participer à des consortium aux objectifs peu clairs. Et ces acteurs ne demandent qu&amp;#8217;une chose: qu&amp;#8217;on leur laisse leur chance.&lt;br&gt;
Testez ces plateformes, faites des retours, dites ce qui va et ce qui ne va pas. Essayez de pousser les décideurs à investiguer d&amp;#8217;autres choix que les GAFAM sélectionnés par défaut. C&amp;#8217;est comme cela qu&amp;#8217;un écosystème européen se construira.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sat, 20 Jun 2020 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-05-02-meuse-0.5.0/
</guid>
<link>
https://mcorbin.fr/posts/2020-05-02-meuse-0.5.0/
</link>
<title>
Meuse 0.5.0 released !
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve released today the version 0.5.0 of &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Meuse&lt;/a&gt;, my free alternative registry for the Rust programming language. A new way to manage the crate index has been added in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_managing_the_crate_index&quot;&gt;Managing the crate index&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Crates metadata are stored in a Git repository. For example, the index for crates.io is available on &lt;a href=&quot;https://github.com/rust-lang/crates.io-index&quot;&gt;Github&lt;/a&gt;.
A crate registry should be able to manage this Git repository (adding files, running git commands like commit, push&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The previous versions of Meuse were shelling out to the &lt;code&gt;git&lt;/code&gt; command (which should then be available on the Meuse machine) to perform that. It works well, but a new way of managing the index has been added to this release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_jgit&quot;&gt;JGit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/jgit/&quot;&gt;JGit&lt;/a&gt; is an implementation of Git in pure Java. i&amp;#8217;ve integrated this library in Meuse. This allow users to manage the index even if the &lt;code&gt;git&lt;/code&gt; command is not installed on the machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can specify the way Meuse is managing the index in the configuration file. By default, the &lt;code&gt;git&lt;/code&gt; command is used, as it was before. You can enable &lt;code&gt;JGit&lt;/code&gt; by adding a &lt;code&gt;type: jgit&lt;/code&gt; in the &lt;code&gt;metadata&lt;/code&gt; configuration section:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;metadata:
  # use jgit
  type: &quot;jgit&quot;
  # The local path of your Git index
  path: &quot;/home/mathieu/prog/rust/testregistry&quot;
  # The branch which will contain the metadata files
  target: &quot;origin/master&quot;
  # The URL of your Git index.
  url: &quot;https://github.com/mcorbin/testregistry&quot;
  # the Git username
  username: my-git-usename
  # the Git password
  password: my-git-password&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should also specify in the configuration the credentials (&lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;) to interact with the Git repository. Remember that Meuse uses the &lt;a href=&quot;https://github.com/exoscale/yummy&quot;&gt;Yummy&lt;/a&gt; library to load the YAML file, so you can use for example the &lt;code&gt;!envvar&lt;/code&gt; flag to read an environment variable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JGit also works with Github Access Token (which are needed if you have enabled the 2FA on your Github account). In that case, the password should be the token.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope this feature will help you running Meuse in more contexts, for example in containers (where it can be difficult to set up SSH authentication for the &lt;code&gt;git&lt;/code&gt; command for example).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sat, 02 May 2020 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-04-25-guixsd-presentation/
</guid>
<link>
https://mcorbin.fr/posts/2020-04-25-guixsd-presentation/
</link>
<title>
GuixSD, une distrib Linux originale: présentation et déploiement dans le cloud
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;GuixSD est une distribution Linux inspirée de &lt;a href=&quot;https://nixos.org/&quot;&gt;Nix&lt;/a&gt; et unique en son genre: mises à jour atomiques, gestion des packages par utilisateur, rollbacks faciles, configuration des outils en &lt;a href=&quot;https://www.gnu.org/software/guile/&quot;&gt;Guile&lt;/a&gt; (une version de Scheme)&amp;#8230;&amp;#8203; On ne voit pas ça tous les jours. Je présenterai dans cet article cette distribution, et montrerai comment la déployer dans le Cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_note_sur_scheme_h_s&quot;&gt;Note sur Scheme/H.S&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, la configuration de Guix se fait via le langage &lt;a href=&quot;https://www.gnu.org/software/guile/&quot;&gt;Guile&lt;/a&gt;. Cela peut sembler surprenant aux premiers abords, mais personnellement je trouve cela très intéressant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Déjà, pourquoi un langage de type Scheme et non quelque chose de plus &quot;classique&quot; (comme Python par exemple) ? Les langages de la famille des Lisp sont généralement beaucoup plus flexibles que leurs homologues d&amp;#8217;autres familles, et ont une syntaxe concise et cohérente.&lt;br&gt;
Si vous n&amp;#8217;avez pas l&amp;#8217;habitude de Lisp/Scheme, insistez un peu, c&amp;#8217;est juste une famille de langages différente de ce qu&amp;#8217;on a l&amp;#8217;habitude de voir. Et ces langages ont beaucoup d&amp;#8217;avantages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De manière générale, je préfère configurer si possible mes outils avec un vrai langage de programmation et non avec des DSL limités inventés pour l&amp;#8217;occasion (coucou Prometheus). C&amp;#8217;est d&amp;#8217;ailleurs pour moi la grande force d&amp;#8217;outils comme &lt;a href=&quot;http://riemann.io/&quot;&gt;Riemann&lt;/a&gt;, dont les idées n&amp;#8217;ont malheureusement pas été reprises dans d&amp;#8217;autres outils de monitoring.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_au_commencement_l_installation&quot;&gt;Au commencement: l&amp;#8217;installation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Avant de pouvoir tester la distribution, il faut d&amp;#8217;abord l&amp;#8217;installer.&lt;br&gt;
Une solution serait d&amp;#8217;installer la distribution sur votre ordinateur. Cela peut marcher, mais GuixSD est une distribution founissant une quantité limitée de drivers (la distribution faisant partie du projet GNU, les drivers propriétaires en sont exclus), cela peut donc vous poser des problèmes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est également possible d&amp;#8217;installer &lt;code&gt;Guix&lt;/code&gt;, le package manager de GuixSD (qui est la distribution), sur une distribution comme Debian ou Ubuntu, ce qui permet de l&amp;#8217;utiliser tout en conservant une autre distribution comme distribution principale.&lt;br&gt;
J&amp;#8217;avais testé celle solution (Guix + Debian) il y a quelques années, mais j&amp;#8217;avais rencontré de nombreux problèmes de conflits entre les packages venant de Guix et ceux venant de Debian, je pense donc que ce n&amp;#8217;est pas une bonne idée.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La dernière solution est de déployer GuixSD sur un environnement contrôlé: le Cloud. Ici, pas besoin de drivers, et ça nous permettra de tester facilement la distribution. C&amp;#8217;est la solution que nous allons explorer dans cet article.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_créer_une_image_guixsd&quot;&gt;Créer une image GuixSD&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous allons tout d&amp;#8217;abord créer une image GuixSD qui sera ensuite envoyée sur le Cloud. Une solution pourrait être de démarrer avec par exemple &lt;code&gt;KVM&lt;/code&gt; l&amp;#8217;iso d&amp;#8217;installation de GuixSD, et de suivre le manuel (que vous trouverez &lt;a href=&quot;https://guix.gnu.org/manual/en/html_node/System-Installation.html&quot;&gt;ici&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais comme d&amp;#8217;habitude, on va essayer d&amp;#8217;automatiser un peu la chose, et nous allons construire notre image avec &lt;a href=&quot;https://www.packer.io/&quot;&gt;Packer&lt;/a&gt;. Cela nous permettra de reconstruire à tout moment notre image si besoin, en une commande.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous ne connaissez pas Packer, je vous recommande la lecture de &lt;a href=&quot;http://mcorbin.fr/posts/2019-11-21-exemple-infra-vm-image/&quot;&gt;mon article sur le sujet&lt;/a&gt; qui donne un bon aperçu de l&amp;#8217;outil.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_guixsd_et_packer&quot;&gt;GuixSD et Packer&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour construire notre image GuixSD avec Packer, nous allons tout simplement suivre &lt;a href=&quot;https://guix.gnu.org/manual/en/html_node/Manual-Installation.html#Manual-Installation&quot;&gt;la documentation officielle&lt;/a&gt; pour une installation en mode shell de GuixSD, et l&amp;#8217;implémenter dans Packer (avec quelques améliorations).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On part donc de l&amp;#8217;iso d&amp;#8217;installation de GuixSD, simulons le clavier grâce à l&amp;#8217;option &lt;a href=&quot;https://www.packer.io/docs/builders/qemu.html#boot-configuration&quot;&gt;boot_command&lt;/a&gt; du builder QEMU, et lançons de cette façon l&amp;#8217;installer en mode shell. Vous pouvez retrouver la &lt;code&gt;boot_command&lt;/code&gt; utilisée ainsi que le fichier &lt;code&gt;packer.json&lt;/code&gt; complet que j&amp;#8217;ai utilisé pour cet article &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/guix-packer/packer.json#L37&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous continuons ensuite l&amp;#8217;installation, toujours via l&amp;#8217;option &lt;code&gt;boot_command&lt;/code&gt;, en faisant exactement ce qui est décrit dans la documentation GuixSD, c&amp;#8217;est à dire:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Configurer le partitionnement avec &lt;code&gt;cfdisk&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Créer un système de fichier &lt;code&gt;ext4&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monter le système de fichier, lancer &lt;code&gt;herd start cow-store /mnt&lt;/code&gt;, puis lancer l&amp;#8217;installation de GuiXSD&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une chose intéressante est que l&amp;#8217;installation du système d&amp;#8217;exploitation se fait de manière déclarative via un fichier &lt;code&gt;config.scm&lt;/code&gt; (la section correspondante dans la documentation est trouvable &lt;a href=&quot;https://guix.gnu.org/manual/en/html_node/Proceeding-with-the-Installation.html#Proceeding-with-the-Installation&quot;&gt;ici&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si on suit la documentation officielle, on doit écrire ce fichier à la main.&lt;br&gt;
Mon premier réflexe a été d&amp;#8217;essayer d&amp;#8217;implémenter ce qui est possible de faire pour d&amp;#8217;autres distributions Linux (Red Hat par exemple): faire exposer le fichier de configuration (Kickstart, Preseed&amp;#8230;&amp;#8203;) via HTTP par Packer, et d&amp;#8217;une façon ou une autre le faire &quot;manger&quot; par l&amp;#8217;installer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour les distributions Linux mainstream, c&amp;#8217;est généralement supporté nativement par l&amp;#8217;installer. Je n&amp;#8217;ai pas trouvé comment réaliser cela avec GuixSD, il a donc fallu innover (surtout que les commandes comme curl, wget&amp;#8230;&amp;#8203; ne sont pas disponibles dans le shell d&amp;#8217;installation).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On expose donc avec Packer un dossier contenant notre fichier &lt;code&gt;.scm&lt;/code&gt; grâce à l&amp;#8217;option &lt;a href=&quot;https://www.packer.io/docs/builders/qemu.html#http_directory&quot;&gt;http_directory&lt;/a&gt; de Packer. Ensuite, il fallait récupérer ce fichier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Heureusement, je me suis vite rendu compte que &lt;code&gt;guile&lt;/code&gt; était disponible dans le shell de l&amp;#8217;installer. J&amp;#8217;ai donc passé cette commande (toujours via &lt;code&gt;boot_command&lt;/code&gt; de Packer) à l&amp;#8217;installer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-scheme&quot; data-lang=&quot;scheme&quot;&gt;guile -c '(use-modules (web client)) (define-values (a b) (http-request \&quot;http://{{ .HTTPIP }}:{{ .HTTPPort }}/config.scm\&quot;)) (display b)' &amp;gt; /mnt/etc/config.scm&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les variables &lt;code&gt;{{ .HTTPIP }}&lt;/code&gt; et &lt;code&gt;{{ .HTTPPort }}&lt;/code&gt; seront remplacées automatiquement par des valeurs choisies par l&amp;#8217;outil pour exposer le fichier HTTP. De cette façon, je récupère le fichier décrivant mon installation pour pouvoir ensuite la démarrer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mon fichier &lt;code&gt;config.scm&lt;/code&gt; est trouvable &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/guix-packer/http/config.scm&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_le_fichier_config_scm&quot;&gt;Le fichier config.scm&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce fichier décrit comment votre système est installé, ce qui inclut notamment:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;L&amp;#8217;hostname de la machine, sa timezone, la configuration de la locale.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Les systèmes de fichiers et la configuration du boot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Les utilisateurs, les groupes, la configuration du fichier sudoer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Les packages et services à installer et à lancer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Et plein d&amp;#8217;autres choses.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;l&amp;#8217;idée de GuixSD est de ne jamais installer ou configurer un package manuellement (par exemple en posant un binaire dans /bin, ou en modifiant un fichier dans /etc manuellement) mais de tout faire de manière déclarative via ce fichier de configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Durant mon installation, je pars donc d&amp;#8217;un fichier qui me crée un utilisateur appelé &lt;code&gt;guix&lt;/code&gt;, qui a les droits sudo sur la machine, et qui a un mot de passe par défaut.
Sinon, le reste de ce fichier est assez basique (j&amp;#8217;installe juste le package &lt;code&gt;curl&lt;/code&gt; en plus des packages par défaut).&lt;br&gt;
Les packages configurés dans ce fichier seront installés globalement, et disponible pour tous les utilisateurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je reparlerai de ce fichier dans la suite de l&amp;#8217;article.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_les_scripts_d_installation&quot;&gt;Les scripts d&amp;#8217;installation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une fois l&amp;#8217;installation principale terminée, la machine va redémarrer et Packer va exécuter la section &lt;code&gt;provisioners&lt;/code&gt; via SSH.&lt;br&gt;
Concernant la connexion SSH, j&amp;#8217;ai fait le choix (par simplicité on va dire) de configurer la machine virtuelle avec un mot de passe SSH &quot;en dur&quot; dans le fichier &lt;code&gt;packer.json&lt;/code&gt; ainsi que dans le fichier &lt;code&gt;config.scm&lt;/code&gt; (les valeurs doivent bien sûr être les mêmes).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je vous conseille fortement de changer ce mot de passe dans le script/désactiver l&amp;#8217;authentification par mot de passe pour une configuration de production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans mon cas, je me contente de poser un fichier &lt;code&gt;.bash_profile&lt;/code&gt; et d&amp;#8217;exécuter un script qui mettra la distribution à jour.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_enregistrement_sur_exoscale&quot;&gt;Enregistrement sur Exoscale&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il n&amp;#8217;y a plus maintenant qu&amp;#8217;à envoyer le template sur le Cloud. Dans mon cas, je le déploierai sur Exoscale. Il est possible d&amp;#8217;utiliser le &lt;a href=&quot;https://www.packer.io/docs/post-processors/exoscale-import.html&quot;&gt;post-processor&lt;/a&gt; Exoscale pour Packer, ou bien de le faire avec un autre outil (comme la &lt;a href=&quot;https://github.com/exoscale/cli/&quot;&gt;cli&lt;/a&gt;, ou bien l&amp;#8217;interface web).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_premier_boot_et_configuration&quot;&gt;Premier boot et configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On peut maintenant démarrer notre machine virtuelle, et commencer à jouer avec en se connectant dessus en SSH (en utilisant le mot de passe défini précédemment).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_installer_des_packages&quot;&gt;Installer des packages&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Subtitutes&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les packages de GuixSD sont par défaut compilés sur la machine après récupération. Il est possible de configurer GuixSD pour (essayer de) récupérer des binaires précompilés depuis un serveur.&lt;br&gt;
Un serveur officiel existe pour fournir ces binaires. Il est censé être activé par défaut sur GuixSD mais ça n&amp;#8217;avait pas l&amp;#8217;air d&amp;#8217;être le cas pour moi (le fichier &lt;code&gt;/etc/guix/acl&lt;/code&gt; était vide et me posait des problèmes). C&amp;#8217;est pour cela que j&amp;#8217;exécute dans le script passé à Packer les lignes suivantes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rm /etc/guix/acl
sudo guix archive --authorize &amp;lt; $(sudo find / -name &quot;ci.guix.gnu.org.pub&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ces deux lignes permettent de configurer GuixSD avec le subtitute officiel. C&amp;#8217;est peut être pas la façon officielle pour configurer un subtitute, mais je n&amp;#8217;ai pas trouvé dans la documentation comment faire autrement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Mettre à jour le système&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La commande &lt;code&gt;guix pull&lt;/code&gt; permet de télécharger les nouvelles versions des packages ou de Guix disponibles. Ensuite, a commande &lt;code&gt;guix package -u&lt;/code&gt; permet de mettre les packages à jour.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ces commandes sont à exécuter par utilisateur. Souvenez-vous, dans GuixSD, &lt;strong&gt;tout&lt;/strong&gt; est cloisonné par utilisateur, packages inclus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attention, cette opération peut être &lt;strong&gt;très&lt;/strong&gt; longue, surtout si vous avez le malheur de devoir compiler un package un peu gros. C&amp;#8217;est pour ça que j&amp;#8217;exécute également ces cmmandes dans le script passé à Packer.&lt;br&gt;
De manière générale, j&amp;#8217;ai trouvé que GuixSD mettait beaucoup de temps à se mettre à jour ou à installer de nouveaux packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Installer un package&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Installons par exemple le package &lt;code&gt;screen&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;guix package -i screen&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce package sera installé seulement pour l&amp;#8217;utilisateur courant. Si vous changez d&amp;#8217;utilisateurs (si vous passez root par exemple), la commande &lt;code&gt;screen&lt;/code&gt; ne sera pas disponible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;/etc/config.scm&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le fichier &lt;code&gt;/etc/config.scm&lt;/code&gt; contient la définition de l&amp;#8217;installation globale du système (la même qui a été utilisée par Packer). Si vous voulez définir un nouveau utilisateur, modifier une configuration&amp;#8230;&amp;#8203; Modifiez ce fichier, et lancez &lt;code&gt;guix system reconfigure /etc/config.scm&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Rollbacks&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout l&amp;#8217;intérêt de GuixSD est de pouvoir rollback facilement (que ce soit au niveau système ou utilisateur) sur une &quot;version&quot; précédente. Donc si vous cassez votre système après une mise à jour, il devrait être en théorie très facile de rollback sur une version antérieure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici &lt;a href=&quot;https://guix.gnu.org/blog/2018/multi-dimensional-transactions-and-rollbacks-oh-my/&quot;&gt;un article&lt;/a&gt; provenant du site de Guix sur le sujet si cela vous intéresse. Je n&amp;#8217;ai pas testé cette fonctionnalité (cf la section &lt;code&gt;Pour aller plus loin&lt;/code&gt; où j&amp;#8217;explique pourquoi).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pour_aller_plus_loin&quot;&gt;Pour aller plus loin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la base, j&amp;#8217;avais prévu un article beaucoup plus conséquent sur GuixSD (installation de packages, de services, intégration Ansible, rollbacks&amp;#8230;&amp;#8203;). Mais après avoir passé pas mal de soirées à jouer avec la distribution, j&amp;#8217;arrive aux conclusions suivantes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le manque de documentation fait qu&amp;#8217;il est quasiment impossible de comprendre comment utiliser la distribution (configurer un service, ou comment construire un package par exemple).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La documentation de GuixSD se limite généralement à une documentation des fonctions &lt;code&gt;Guile&lt;/code&gt; pour intéragir avec les différents sous modules. Très bien, écrire du code je sais faire. Mais ensuite, j&amp;#8217;en fais quoi ? Où est ce que je dois mettre mes fichiers de configurations, où est ce que je dois les référencer ? C&amp;#8217;est quoi les bonnes pratiques ? Mystère.&lt;br&gt;
Il manque selon moi toute la documentation &quot;utilisateur&quot;. Donner une collection de fonctions Scheme et leurs paramètres n&amp;#8217;est pas suffisant si on ne sait pas quoi en faire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quand vous avez un problème, vous trouverez &lt;strong&gt;peut être&lt;/strong&gt; quelqu&amp;#8217;un ayant eu le même problème ou la même question sur les logs IRC de Guix, ou bien quelqu&amp;#8217;un aura donné une solution sur un site web. Sinon, vous serez bloqué.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ne pouvant pas me permettre de repasser mes soirées pendant encore 2 semaines à lire des historiques de logs IRC et le code source GuixSD pour essayer de comprendre quoi faire, j&amp;#8217;ai donc abandonné et livre donc un article incomplet. Cela ne m&amp;#8217;était jamais arrivé, même mon article sur &lt;a href=&quot;https://mcorbin.fr/posts/2019-03-03-ebpf-xdp-introduction/&quot;&gt;eBPF&lt;/a&gt; avait été plus facile à écrire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quelques exemples de points de blocages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Packages&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y a peu de documentation sur comment packager une application. A force de chercher, j&amp;#8217;ai réussi à packager un simple shell script que je place dans un dossier &lt;code&gt;bin&lt;/code&gt;. A la base, je voulais coder une simple implémentation de &lt;code&gt;cloud-init&lt;/code&gt; en shell et pouvoir configurer ma machine Guix de cette façon (clés SSH notamment) sur Exoscale. Je mets le code du package (qui a l&amp;#8217;air de marcher) ici, ça servira peut être à quelqu&amp;#8217;un:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(define-module (gnu packages exo-init)
  #:use-module (guix packages)
  #:use-module (guix download)
  #:use-module (guix build-system copy)
  #:use-module (guix licenses))

(define-public exo-init
  (package
   (name &quot;exo-init&quot;)
   (version &quot;0.1.0&quot;)
   (source (origin
            (method url-fetch)
            (uri &quot;https://sos-ch-gva-2.exo.io/mcorbin.fr.iso/exo-init.tar.gz&quot;)
            (sha256
             (base32
              &quot;0igqkaz02fwr58fhzzrh51vfql6xz5ywhp9j0s2y5i2lxfvd9s4g&quot;))))
   (build-system copy-build-system)
   (arguments
    `(#:install-plan
      `((&quot;exo-init.sh&quot; &quot;bin/&quot;))))
   (synopsis &quot;A simple Cloud-Init like for the Exoscale platform&quot;)
   (description
    &quot;A simple Cloud-Init like for the Exoscale platform&quot;)
   (home-page &quot;https://www.gnu.org/software/hello/&quot;)
   (license gpl3+)))

exo-init&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Services&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons l&amp;#8217;exemple des services. Vous trouverez dans la documentation de Guix ou de shepherd (le daemon gérant les services dans Guix) une liste de fonctions pour configurer un service, mais pas vraiment d&amp;#8217;exemples. La section &lt;a href=&quot;https://www.gnu.org/software/shepherd/manual/html_node/Service-Examples.html&quot;&gt;example&lt;/a&gt; contient &lt;code&gt;FIXME: This needs a lot of work.&lt;/code&gt;, et l&amp;#8217;exemple donné à base de &lt;code&gt;make &amp;lt;service&amp;gt;&lt;/code&gt; ne fonctionne pas, j&amp;#8217;ai jamais réussi à trouver quel module importer pour le faire marcher.&lt;br&gt;
Ce problème d&amp;#8217;import se rencontre d&amp;#8217;ailleurs partout dans GuixSD, les exemples dans la documentation sont généralement mis sans la liste des modules à importer, donc le code est de fait inutilisable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je voulais à la base définir un service pour le package &lt;code&gt;exo-init&lt;/code&gt; définit précédemment, et pouvoir lancer ce script à chaque démarrage de la machine. Déjà, je n&amp;#8217;ai jamais trouvé comment configurer un service lors de l&amp;#8217;installation du package, j&amp;#8217;ai juste réussi à écrire cela en m&amp;#8217;inspirant de différentes sources trouvées à droite à gauche (dont le code source de Guix):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(define-module (mcorbin services exoinit)
  #:use-module (gnu)
  #:use-module (gnu services)
  #:use-module (gnu services base)
  #:use-module (gnu services shepherd)
  #:use-module (guix gexp)
  #:export (exo-init-service))

(define exo-init-service-type
  (shepherd-service-type
  'exo-init
  (lambda (name)
    (shepherd-service
    (documentation &quot;Exo init service&quot;)
    (provision '(exo-init))
    (start #~(lambda _
               (make-forkexec-constructor
               '(&quot;exo-init&quot;))))
    (one-shot? #t)))))

(define (exo-init-service) (service exo-init-service-type &quot;name&quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A noter: je voulais au début ne passer aucun paramètre à &lt;code&gt;exo-init-service-type&lt;/code&gt; mais ça n&amp;#8217;a pas l&amp;#8217;air possible, je passe donc un paramètre non utilisé.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et même une fois le service écrit, j&amp;#8217;en fais quoi ? Je dois l&amp;#8217;installer manuellement pour chaque utilisateur ? Je dois le définir dans &lt;code&gt;/etc/config.scm&lt;/code&gt; ? Je n&amp;#8217;ai pas la réponse à ces questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Bugs&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le coup de grâce a été un bug que je rencontre actuellement sur un template GuixSD tout neuf. Toutes les commandes &lt;code&gt;guix package&lt;/code&gt; finissent en:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;guix package: error: error parsing derivation `/gnu/store/b9vig6s9f3a9c6gr8889pn3dp6gaq89a-guile-gdbm-ffi-20120209.fa1d5b6.tar.xz.drv': expected string `Derive(['&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un &lt;code&gt;guix gc --delete /gnu/store/b09qkb8r06l64p809nysp67ihmvrib2f-guile-gdbm-ffi-20120209.fa1d5b6.drv&lt;/code&gt; permet de supprimer ce fichier, mais il revient lors d&amp;#8217;une installation de package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Donc en gros je ne peux plus rien faire sur la machine. Je me dis donc &lt;code&gt;tiens, c&amp;#8217;est le moment de tester les rollbacks !&lt;/code&gt;. Je lance donc &lt;code&gt;guix package --list-generations&lt;/code&gt; (commande trouvée dans l&amp;#8217;article partagé précemment), j&amp;#8217;obtiens maintenant:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$guix package --list-generations
guix package: error: profile '/var/guix/profiles/per-user/guix/guix-profile' does not exist&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(╯°□°）╯︵ ┻━┻&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_en_conclusion&quot;&gt;En conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les idées de GuixSD sont très bonnes, le choix de Scheme pour la configuration est super. Mais pour faire marcher le machin, faut s&amp;#8217;accrocher. Et encore, je faisais mes tests sur un cloud, donc aucun problème de drivers ou autre, et pas de risque de flinguer ma machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Peut être que je referais une tentative dans quelques années ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sat, 25 Apr 2020 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-04-06-meuse-0-4-1-release/
</guid>
<link>
https://mcorbin.fr/posts/2020-04-06-meuse-0-4-1-release/
</link>
<title>
Meuse 0.4.1 released !
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m happy to announce the release &lt;code&gt;0.4.1&lt;/code&gt; of Meuse. This release allows you to disable authentication for the frontend if you want to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since &lt;code&gt;0.4.0&lt;/code&gt;, Meuse supports authentication for its read-only frontend. With this new release, a &lt;code&gt;public&lt;/code&gt; flag can be set to &lt;code&gt;true&lt;/code&gt; (default to &lt;code&gt;false&lt;/code&gt;) to completely disable authentication for the frontend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, the &lt;a href=&quot;https://meuse.mcorbin.fr/installation/configuration/&quot;&gt;documentation&lt;/a&gt; has been updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will now start working on a CLI (which will be written in Rust !) for the project. Stay tuned !&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>
Mon, 06 Apr 2020 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-03-24-meuse-0-4-0-release/
</guid>
<link>
https://mcorbin.fr/posts/2020-03-24-meuse-0-4-0-release/
</link>
<title>
Meuse 0.4.0 released !
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m happy to announce the release of &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Meuse&lt;/a&gt; 0.4.0. Meuse is an alternative registry for the Rust programming language. This release will probably be the last one before a &lt;code&gt;1.0.0&lt;/code&gt; release. What&amp;#8217;s new ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_frontend_improvement_and_authentication&quot;&gt;Frontend improvement and authentication&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Meuse frontend has been improved, and now supports authentication. The frontend offers a simple way to browse crates and gather some information about them.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_read_only_roles&quot;&gt;Read-only roles&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Originally, Meuse had 2 roles for users:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Admin, which can do anything (manage users, crates, categories&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tech, which can manage crates (create new crates, publish new versions of a crate if it owns the crate, yank/unyank crates&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But I felt something was missing. The &lt;code&gt;Tech&lt;/code&gt; role was nice for a CI user for example (if you want to publish new crates from your CI platform), but not so much for developers (you may want to allow only your CI to publish packages).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release adds a new &lt;code&gt;read-only&lt;/code&gt; roles, which should be perfect for developers. Read-only users can still access Meuse, browse and search crates, categories, manage their accounts&amp;#8230;&amp;#8203; But they cannot do actions on crates.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_improvements_on_logs_and_metrics&quot;&gt;Improvements on logs and metrics&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Logs and metrics has been improved. Logs contain more informations, and new metrics are now provided.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_internal_refactoring&quot;&gt;Internal Refactoring&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lot of refactoring has been done to simplify the request lifecycle. For example, the &lt;a href=&quot;https://github.com/exoscale/interceptor&quot;&gt;Interceptor&lt;/a&gt; Clojure library is now used by Meuse (I highly recommand this lib if you are a Clojure developer).&lt;br&gt;
Some refactoring has also be done on the unit tests.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_try_it&quot;&gt;Try it !&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to try Meuse, please take a look at the &lt;a href=&quot;https://meuse.mcorbin.fr/&quot;&gt;documentation&lt;/a&gt;. Feedbacks are always appreciated ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Tue, 24 Mar 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-02-22-jvm-ecosysteme/
</guid>
<link>
https://mcorbin.fr/posts/2020-02-22-jvm-ecosysteme/
</link>
<title>
La JVM, Java, ses haters, son écosystème
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme beaucoup de monde, j&amp;#8217;ai eu l&amp;#8217;occasion de travailler professionnellement avec Java (et je continue de le faire ponctuellement aujourd&amp;#8217;hui). Dans cet article, je parlerais de la JVM, de Java, et de la (mauvaise) réputation que ce langage se traîne. Mais cette dernière est-elle vraiment justifiée ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_jvm&quot;&gt;La JVM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pense que la JVM est probablement la plateforme la plus mature pour développer des applications aujourd&amp;#8217;hui. Elle a en effet plusieurs avantages :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;De très très bonnes performances.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un écosystème énorme. Il existe des clients écrits en Java pour à peu près toutes les bases de données, broker de messages etc&amp;#8230;&amp;#8203; disponibles sur le marché. Ces clients sont de plus généralement des clients officiels maintenus par les développeurs du produit. La librairie standard est également très riche.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De nombreux langages disponibles (Java, Clojure, Scala, Kotlin, Groovy&amp;#8230;&amp;#8203;), tous bénéficiant de l&amp;#8217;écosystème et des performances de la JVM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Il est très facile aujourd&amp;#8217;hui de déployer des applications sur la JVM. Généralement installer la JVM puis lancer un &lt;code&gt;java -jar app.jar&lt;/code&gt; suffit, des outils comme &lt;code&gt;jlink&lt;/code&gt; permettent même d&amp;#8217;optimiser cela.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De nombreuses innovations apparaissent sur la JVM ou dans son écosystème, comme par exemple &lt;em&gt;GraalVM&lt;/em&gt;, les différents types de garbage collector etc&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je développe depuis plusieurs années sur la JVM (en Clojure majoritairement aujourd&amp;#8217;hui), et j&amp;#8217;en ai toujours été très content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et pourtant&amp;#8230;&amp;#8203; quand je présente un de mes projets open source écrit en Clojure, j&amp;#8217;ai régulièrement droit à des :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pourquoi ça tourne sur la JVM ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jamais je ne déployerais des application sur la JVM de nouveau, c&amp;#8217;est l&amp;#8217;enfer à gérer !&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mon expérience de la JVM a toujours été désastreuse !&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tourner sur la JVM n&amp;#8217;est pas un avantage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est aussi quelque chose qu&amp;#8217;on voit souvent sur les réseaux sociaux. La JVM serait lente, consommerait beaucoup de RAM, les applications seraient difficiles à maintenir&amp;#8230;&amp;#8203;&lt;br&gt;
Pourtant, comme dit précédemment, il est facile de faire des applications très performantes consommant quelques centaines de Mo de RAM. On voit d&amp;#8217;ailleurs bien que la JVM est performante vu la quantité d&amp;#8217;outils &quot;Big Data&quot; tournant dessus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais alors, comment en est-on arrivé là ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_langage_java&quot;&gt;Le langage Java&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Certains diront que la faute revient à Java. Ce langage serait lourd, verbeux, et ce serait un calvaire de développer des applications en Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est vrai, Java a des inconvénients mais ce n&amp;#8217;est pas le pire langage du monde. De plus, le langage s&amp;#8217;améliore, certes lentement mais ça va dans le bon sens.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le langage n&amp;#8217;a pas un système de type digne des langages fortements typés comme OCaml ou Rust, le &quot;tout objet&quot; du langage est parfois lourd, l&amp;#8217;immuabilité n&amp;#8217;est pas vraiment encouragé, la programmation fonctionnelle est limitée&amp;#8230;&amp;#8203; Mais on peut largement travailler avec.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, la critique de Java est encore plus savoureuse quand elle vient de développeurs Golang (je développe aussi en Golang, vous pouvez retrouver mon avis sur le langage &lt;a href=&quot;https://mcorbin.fr/posts/2019-06-13-one-year-of-go/&quot;&gt;ici&lt;/a&gt;). Java n&amp;#8217;a rien à envier à Golang en terme de fonctionnalité.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais alors, quel est le problème ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_serveurs_d_applications&quot;&gt;Les serveurs d&amp;#8217;applications&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une génération complète de développeurs et de sysadmin ont été traumatisé par les Glassfish, JBoss et autres WebSphere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai eu la chance de commencer ma carrière vers la fin de leurs utilisations (bon il y en a toujours qui tournent en prod aujourd&amp;#8217;hui mais ça se voit moins on va dire), et en effet j&amp;#8217;ai quelques souvenirs de fichiers &lt;code&gt;domain.xml&lt;/code&gt; bien violents (le tout branché sur de l&amp;#8217;Oracle sur AIX histoire de bien faire les choses).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais comme dit précédemment, aujourd&amp;#8217;hui un &lt;code&gt;java -jar&lt;/code&gt; suffit généralement pour lancer une application. Mais cette époque a fait du dégât, généralement les remarques du type &quot;OMG Java en prod plus jamais!&quot; viennent de gens ayant connu cette époque.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_frameworks_java&quot;&gt;Les frameworks Java&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour moi, la mauvaise réputation de Java aujourd&amp;#8217;hui vient principalement de ses frameworks &lt;em&gt;et non du langage&lt;/em&gt;, j&amp;#8217;insiste sur ce point.&lt;br&gt;
Il y a une culture de l&amp;#8217;usine à gaz difficile à comprendre dans la communauté Java, et c&amp;#8217;est quelque chose que je n&amp;#8217;ai jamais vu dans d&amp;#8217;autres langages ou communautés.
L&amp;#8217;expression &quot;pourquoi faire simple quand on peut faire compliqué&quot; prend ici tout son sens. L&amp;#8217;exemple type de cette culture étant Spring.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_c_est_quoi_le_problème_avec_spring&quot;&gt;C&amp;#8217;est quoi le problème avec Spring ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai eu l&amp;#8217;occasion de travailler professionnellement sur des projets Spring dans plusieurs contextes.
Je parle ici de projets avec du Spring &quot;modernes&quot;: Spring Boot, Spring Cloud, &quot;microservices&quot;&amp;#8230;&amp;#8203; Et c&amp;#8217;était à peu près ma réaction quand j&amp;#8217;arrivais sur les projets:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/jvm-ecosysteme/wtf.gif&quot; alt=&quot;what the fuck&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On me disait : &quot;tu verras, c&amp;#8217;est des stacks modernes&quot;.&lt;br&gt;
Quel naïf j&amp;#8217;étais ! Essayons de résumer un projet Java/Spring comme ils sont faits aujourd&amp;#8217;hui.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_génération_du_projet&quot;&gt;Génération du projet&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les développeurs adorent générer les projets via des archetypes Maven, ou si vous n&amp;#8217;avez pas de chance avec &lt;a href=&quot;https://mcorbin.fr/posts/2018-02-08-spring-generateur/&quot;&gt;JHipster&lt;/a&gt;.&lt;br&gt;
Vous n&amp;#8217;avez pas commencé à coder, mais vous avez déjà 25 classes et un &lt;code&gt;pom.xml&lt;/code&gt; de 2000 lignes.
Soyons franc, la seule chose à faire après ça devrait être &lt;code&gt;rm -rf *&lt;/code&gt; et repartir sur des bases saines, mais bon, c&amp;#8217;est comme ça qu&amp;#8217;il faut faire il paraît.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_annotation&quot;&gt;Annotation&lt;/h3&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/jvm-ecosysteme/annotation.jpg&quot; alt=&quot;tout doit être annoté&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le projet devient un jeu où le but est simple, le mot-clé &lt;code&gt;new&lt;/code&gt; est interdit.
Plus il y a de magie, plus il y a d&amp;#8217;annotations, mieux c&amp;#8217;est.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Métriques ? Annotations.&lt;br&gt;
Mocks ? Annotations.&lt;br&gt;
Dépendances ? Annotations.&lt;br&gt;
Getters ? Annotation (coucou lombok).&lt;br&gt;
Routes HTTP ? Annotations.&lt;br&gt;
Cache de la DB ? Annotation.&lt;br&gt;
Mapping entre objets ? Annotations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pourrais continuer comme ça longtemps&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La plupart des projets pourraient avoir une class &lt;code&gt;Main&lt;/code&gt; qui serait plus ou moins :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Cache cache = new cache(cacheConfig);
Database database = new Database(databaseConfig);
HTTPServer server = new HTTPServer(cache, database);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Où &lt;code&gt;database&lt;/code&gt; et &lt;code&gt;cache&lt;/code&gt; implémentent une interface (pour écrire facilement un mock).&lt;br&gt;
Bien sûr, comme dit précédemment utiliser &lt;code&gt;new&lt;/code&gt; est interdit, donc vous ne verrez jamais ça.
J&amp;#8217;ai eu des discussions hallucinantes où les devs ne pouvaient même pas envisager ne pas utiliser &lt;code&gt;@Inject&lt;/code&gt;, comme si on leur demandait de coder avec &lt;code&gt;ed&lt;/code&gt; à la place de leur IDE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On préfère avoir une mega usine à gaz qui explose au runtime. Bah oui, c&amp;#8217;est super utile d&amp;#8217;avoir du typage statique quand derrière on a du &lt;code&gt;bean not found&lt;/code&gt; au démarrage du projet (démarrage qui met 2 plombes au passage généralement).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_utilisez_les_libs_les_plus_bloated_de_l_écosystème&quot;&gt;Utilisez les libs les plus bloated de l&amp;#8217;écosystème&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rule 34: IF IT EXISTS, THERE IS A SPRING STARTER FOR IT.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous ne pensiez quand même pas pouvoir utiliser les clients officiels Kafka, Elasticsearch etc&amp;#8230;&amp;#8203; quand même ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Non, il faut utiliser Spring Kafka, Spring Elasticsearch, Spring Redis&amp;#8230;&amp;#8203; ces libs cachent les implémentations officiels, sont très peu flexibles, et sont surtout totalement inutiles.
Bah oui, faire &lt;code&gt;KafkaConsumer consumer = new KafkaConsumer(config)&lt;/code&gt; c&amp;#8217;est trop compliqué.
Mais bon, le but de ces frameworks est de cocher des cases, pour pouvoir dire &quot;Oui c&amp;#8217;est supporté !!&quot; dès qu&amp;#8217;une techno est mentionnée en réunion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JPA, AspectJ, Hibernate&amp;#8230;&amp;#8203; Il y aurait tellement de choses à dire sur ces technos sorties de l&amp;#8217;enfer.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Spring Data ? True story, j&amp;#8217;arrive sur un projet : &quot;gnagna microservices, gnagna stack moderne, gnagna on est le meilleur projet de la ville&amp;#8230;&amp;#8203;&quot; j&amp;#8217;ouvre un fichier et je tombe sur une tonne de fonctions ressemblant à :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;findByLibelleIgnoreCaseContainingOrOuvrageIgnoreCaseContainingOrCreatedByIgnoreCaseContaining&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;WTF ?&lt;/strong&gt; C&amp;#8217;est un &lt;em&gt;vrai nom&lt;/em&gt; de fonction qui était dans le projet, hein, et que j&amp;#8217;ai conservé précieusement pour la ressortir. C&amp;#8217;est un peu à ce moment où je me suis dis que je devais soit repasser sysadmin, soit trouver une boîte qui ne fait pas du Java (j&amp;#8217;ai fait l&amp;#8217;un puis l&amp;#8217;autre d&amp;#8217;ailleurs). Et ces fonctions ne choquaient &lt;strong&gt;PERSONNE&lt;/strong&gt; sur le projet, c&amp;#8217;était &quot;business as usual&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_design_pattern&quot;&gt;Design pattern&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une classe &lt;strong&gt;==&lt;/strong&gt; une interface, c&amp;#8217;est la règle ! Chaque requête HTTP faisant un accès à une base de données devra aussi au moins créer :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;un DAO,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;un DTO,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;un VO.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pourquoi ? Car ça fait 20 ans qu&amp;#8217;on cargo cult le Gang of Four.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hiérarchie_de_pom_complexe&quot;&gt;Hiérarchie de pom complexe&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Avec les starters Spring et compagnie, votre &lt;code&gt;pom.xml&lt;/code&gt; fait maintenant 3500 lignes.
Sauf qu&amp;#8217;en fait le pom a aussi un pom &quot;parent&quot;, un &quot;BOM&quot;&amp;#8230;&amp;#8203; chaque montée de version d&amp;#8217;un de ces trucs vous coûtera des jours de travail.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_montées_de_versions&quot;&gt;Montées de versions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, parlons en des montées de versions.
Chaque montée de version de Spring et de ses starters amènera son lot de bugs bien louches, et beaucoup de projets/libs n&amp;#8217;ont même pas de changelog donc amusez-vous bien lors du débugging.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_faites_ch_er_les_ops_au_maximum&quot;&gt;Faites ch*er les ops au maximum&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La stack Spring Cloud Netflix (Ribbon &amp;amp; co) est un enfer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Votre projet est maintenant un load balancer bugué, pas flexible, exposant très difficilement ses métriques.
C&amp;#8217;est toujours cool quand on on se rend compte que N % des requêtes partent dans les limbes sans avoir aucune métrique et aucun moyen de débuguer le truc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_de_toute_façon_personne_ne_comprend_comment_ça_marche&quot;&gt;De toute façon, personne ne comprend comment ça marche&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai travaillé avec de très bons développeurs Java, certains &quot;connus&quot;.
Des devs qui en font &quot;depuis 199X&quot;.
Des gens qui font du Spring depuis le tout début.
Même eux ne pourront pas vous aider, le framework est juste trop complexe.
Et quand ton annotation marche pas car un truc rentre en conflit avec un autre, va trouver la source du problème&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je me rappelle d&amp;#8217;une montée de version de Spring où mon CTO de l&amp;#8217;époque avait tweeté : &quot;Quelle douleur les montées de version Spring et ces dépendances. A la limite de l&amp;#8217;abandon mais toujours en cours&quot;.
Oui, les montées de versions étaient &lt;strong&gt;dingues&lt;/strong&gt;, de mémoire celle là commençait à se compter en mois.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_mais_pourtant&quot;&gt;Mais pourtant&amp;#8230;&amp;#8203;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Malgré cette complexité &lt;strong&gt;ENORME&lt;/strong&gt;, il ne faut surtout pas changer ! Incompréhensible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tu passes 2 semaines sur un bug Ribbon, tu mets 1 mois à monter de version Spring, tu mets 3 jours à monter de version ton pom parent, ton &quot;microservice&quot; avec 10 endpoints REST a 60 classes, 10 000 lignes de code et a un pom de 3000 lignes&amp;#8230;&amp;#8203; Mais tout le monde est content et continue dans sa lancée !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sur un des projets où je suis intervenu, quelques développeurs (généralement ceux qui avaient codés avec autre chose que Java dans leurs carrières) voulaient lancer un microservice avec &lt;em&gt;Vert.x&lt;/em&gt; pour tester (certains l&amp;#8217;avaient déjà utilisés en prod, d&amp;#8217;ailleurs j&amp;#8217;en ai également entendu de bons retours).&lt;br&gt;
Bien sûr les autres développeurs étaient contre (fallait faire du microservice mais &lt;em&gt;avec Spring&lt;/em&gt;), et d&amp;#8217;ailleurs les décideurs étaient aussi contre car : &quot;Quand je demande à la SSII du coin des développeurs Spring ils en ont en stock&quot;. OK.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_un_nouvel_espoir&quot;&gt;Un nouvel espoir ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais de nouveaux frameworks Java apparaissent, amenant simplicité avec eux&amp;#8230;&amp;#8203; Ah non, on me souffle dans l&amp;#8217;oreillette que les Quarkus, Micronaut &amp;amp; co vous feront aussi faire de l&amp;#8217;annotation driven development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et c&amp;#8217;est pourquoi j&amp;#8217;ai arrêté de coder en Java.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sat, 22 Feb 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-02-13-informatique-coeur-metier/
</guid>
<link>
https://mcorbin.fr/posts/2020-02-13-informatique-coeur-metier/
</link>
<title>
L'informatique, c'est pas notre coeur de métier !
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;informatique, c&amp;#8217;est pas notre coeur de métier ! On a tous déjà entendu cette phrase, et je ne sais pas vous, mais cette phrase m&amp;#8217;a toujours donné des sueurs froides.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aux premiers abords, la phrase peut sembler valide.
En effet, une entreprise dont le métier est par exemple de distribuer de l&amp;#8217;énergie, ou de transporter des personnes d&amp;#8217;un point A à un point B&amp;#8230;&amp;#8203; Son coeur de métier, ce n&amp;#8217;est pas l&amp;#8217;informatique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le gros problème avec cette phrase est qu&amp;#8217;elle est généralement utilisée pour justifier des mauvaises pratiques, un manque de moyen, un système d&amp;#8217;information dans un état déplorable&amp;#8230;&amp;#8203; Bref, &quot;l&amp;#8217;informatique, c&amp;#8217;est pas notre coeur de métier&quot;, c&amp;#8217;est la phrase que vous entendez généralement quand vous pointez un problème et que personne ne veut faire l&amp;#8217;effort de réfléchir à une solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_informatique_en_partie_votre_coeur_de_métier&quot;&gt;L&amp;#8217;informatique, (en partie) votre coeur de métier ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons l&amp;#8217;exemple du leader de la distribution d&amp;#8217;électricité en France.
Son coeur de métier, c&amp;#8217;est tout simplement de distribuer de l&amp;#8217;électricité.
Mais on parle quand même d&amp;#8217;une entreprise qui :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pose 35 millions de compteurs &quot;connectés&quot; sur le territoire Français.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Où les clients font de plus en plus de choses via Internet (ouverture et fermeture de lignes, gestion des factures&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Où un tas de logiciels internes servent à faire tourner la boîte.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Est-ce que l&amp;#8217;informatique n&amp;#8217;est pas devenu de facto un domaine essentiel de l&amp;#8217;entreprise, sans lequel elle ne pourrait pas fonctionner ? Cela pourrait rapidement se tester: coupez les serveurs pendant une heure et on verra ce qu&amp;#8217;il se passera ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pourtant, la tendance en France depuis de nombreuses années est d&amp;#8217;externaliser complètement tout ce qui touche à l&amp;#8217;informatique, par exemple :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Plus aucun de recrutement &quot;technique&quot;, on recrute éventuellement des profils &quot;chef de projets&quot;, &quot;fonctionnels&quot; (choisissez le nom que vous voulez) mais surtout pas un tech.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Les équipes projets sont composées à 100 % de prestataires, souvent avec un turn-over important.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_impact_de_l_externalisation&quot;&gt;L&amp;#8217;impact de l&amp;#8217;externalisation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;externalisation de la technique a selon moi plusieurs effets. Le premier est bien sûr la perte de compétences en interne.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La dépendance aux sociétés de services devient donc totale. Sauf qu&amp;#8217;il y a un problème: les entreprises veulent un système d&amp;#8217;information et des applications répondant à leurs besoins, alors que les sociétés de services veulent faire de l&amp;#8217;argent.
Il est donc dans l&amp;#8217;intêret des sociétés de services que les projets durent et demandent une main d&amp;#8217;oeuvre importante.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est là que ça devient intéressant : les entreprises clientes ne sont même plus capables de juger ce que les sociétés de services vendent, et deviennent des vaches à lait qui signeront n&amp;#8217;importe quoi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Parlez-en à votre entourage hors tech, je suis sûr que vous avez des amis, ou de la famille dans différents domaines qui auront des discours de type : &quot;Ah oui nos logiciels, ils sont faits par &amp;lt;grosse SSII&amp;gt;, ils nous coûtent 2 millions par an, ça fonctionne pas, à chaque fois qu&amp;#8217;on demande une modification ça coûte 50 000 € et ça met un an à apparaître&amp;#8230;&amp;#8203; d&amp;#8217;ailleurs, on va lancer bientôt un nouveau appel d&amp;#8217;offre pour tout réécrire&quot;.&lt;br&gt;
Ce genre d&amp;#8217;arnaques (oui, le terme est bien choisi) est très courant, et certaines sociétés se gavent en profitant que l&amp;#8217;informatique et ses métiers soient encore mal compris dans beaucoup d&amp;#8217;endroits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans le même genre, on a sûrement tous vu des projets simples type CRUD mais où des archis (avec des gros TJM tant qu&amp;#8217;à faire) débarquent en mode &quot;Si si je vous promets vous avez absolument besoin de microservices pour votre projet, ça tombe bien je suis un expert sur le sujet&quot;.&lt;br&gt;
Le décideur de l&amp;#8217;entreprise a en effet vaguement entendu parler de microservices, il parait qu&amp;#8217;il faut absolument faire ça maintenant.&lt;br&gt;
Et sans trop comprendre comment l&amp;#8217;application se transforme en un système distribué à 5000 jours hommes, 40 développeurs, 15 ops et 10 agilistes. Jackpot pour les SSII ! Et de toute façon, vu le turn-over dans 6 mois l&amp;#8217;équipe actuelle ne sera plus là, autant se faire plaisir sur les technos en attendant non ? En plus, le manager est content, son équipe est maintenant la plus grosse du bâtiment, elle doit sûrement faire des choses très importantes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_et_le_management_dans_tout_ça&quot;&gt;Et le management dans tout ça ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le problème apparait aussi dans la hiérarchie.
Plus personne ne comprenant la technique, il n&amp;#8217;y a &lt;em&gt;aucune&lt;/em&gt; vision sur la stratégie long terme de la boite. la &quot;DSI&quot; n&amp;#8217;en porte que le nom.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous entendrez des phrases du type : &quot;Nous allons digitaliser l&amp;#8217;entreprise grâce à l&amp;#8217;intelligence artificielle et la blockchain&quot;, mais ça n&amp;#8217;ira pas plus loin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ou pire, quelqu&amp;#8217;un signera pendant un bon repas d&amp;#8217;affaire un deal avec IBM ou autre et il faudra tout migrer sur des outils moisis.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_un_équilibre_à_trouver&quot;&gt;Un équilibre à trouver&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Faire appel à des prestataires externes peut avoir son intérêt.
Je comprends tout à fait qu&amp;#8217;il soit difficile de se passer totalement de prestataires quand on a plusieurs projets qui se lancent et se terminent en parallèle.&lt;br&gt;
Mais dans beaucoup de boites, il y a bien assez de travail pour avoir au moins une partie des effectifs en interne. On ne me fera pas croire que des boîtes qui ont des sites avec 500 prestas dans le bâtiment depuis toujours ne trouveraient pas de quoi occuper des gens en interne.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je suis persuadé que le recours massif à la prestation en France est en partie responsable du retard que nous avons par rapport à certains de nos voisins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela cause des soucis aux entreprises (perte de compétences, gouffre financier, dépendance totale aux prestataires pour des projets pourtant stratégiques&amp;#8230;&amp;#8203;), mais aussi aux prestataires eux même (turn over, manque de reconnaissance, de moyens, remarques non écoutées, impression que le seul but de votre hiérarchie dans la vie est de vous empêcher de travailler correctement&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;espère que dans le futur, on remettra en valeur les profils techniques (ce n&amp;#8217;est pas le sujet de cet article, mais la dévalorisation des profils techniques et le &quot;plafond de verre&quot; qu&amp;#8217;ils atteignent en France est également un problème. La technique c&amp;#8217;est sale, donc on délègue et on écoute surtout pas les remarques des équipes tech), que de vrais CTO et de vrais DSI pilotent la vision technique des entreprises, et que l&amp;#8217;excellence technique revienne au coeur des préoccupations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 13 Feb 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-01-06-plateforme-execution/
</guid>
<link>
https://mcorbin.fr/posts/2020-01-06-plateforme-execution/
</link>
<title>
Développement d'applications, conteneurs et plateforme d'exécution
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus en plus d&amp;#8217;applications tournent dans des conteneurs, et de plus en plus de conteneurs tournent sur des plateformes types Kubernetes. Devons nous changer nos habitudes lorsque nous développons des applications conteneurisées ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_plateforme_d_exécution_n_est_pas_importante&quot;&gt;La plateforme d&amp;#8217;exécution n&amp;#8217;est pas importante&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;je pense qu&amp;#8217;il faut dissocier l&amp;#8217;application en elle même (et donc son développement) de la plateforme d&amp;#8217;exécution (où l&amp;#8217;application tournera). En effet, une application aura toujours besoin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;D&amp;#8217;exposer un endpoint de &lt;code&gt;health&lt;/code&gt; indiquant si l&amp;#8217;application fonctionne correctement et est prête à fonctionner (et donc prête à recevoir du trafic pour une application web par exemple).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;D&amp;#8217;exposer des métriques (au format Prometheus par exemple), ou alors de les générer dans votre format préféré (Graphite, InfluxDB&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De générer des logs corrects, avec une manière de contrôler la verbosité des logs etc&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela n&amp;#8217;a &lt;strong&gt;aucun&lt;/strong&gt; rapport avec la plateforme d&amp;#8217;exécution de l&amp;#8217;application. Par exemple, mon endpoint de &lt;code&gt;health&lt;/code&gt; peut aussi bien être utilisé par un load balancer comme HAProxy, par un agent comme Consul, ou bien par Kubernetes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une application devrait pouvoir passer très facilement d&amp;#8217;une plateforme d&amp;#8217;exécution à une autre, comme par exemple d&amp;#8217;un déploiement sur machines virtuelles classiques, sans conteneurs, à un déploiement dans Kubernetes. Si cela n&amp;#8217;est pas possible, cela veut dire qu&amp;#8217;on a lié l&amp;#8217;application à sa plateforme, et ce couplage fort rend la possibilité de changement beaucoup plus difficile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En effet, on parle beaucoup aujourd&amp;#8217;hui de Kubernetes, mais comme je le dis toujours, ce n&amp;#8217;est pas la plateforme miracle. Même si vous déployez vos applications sur Kubernetes aujourd&amp;#8217;hui, rien ne dit que vous ne voudrez pas les &quot;sortir&quot; de Kubernetes l&amp;#8217;année prochaine pour une raison ou une autre.&lt;br&gt;
De la même façon, il devrait être facile de passer d&amp;#8217;une application hébergée sur une machine virtuelle à une application tournant sur Kubernetes. L&amp;#8217;outillage autour de l&amp;#8217;application va changer, mais pas l&amp;#8217;application en elle même.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_impact_des_conteneurs_lors_du_dev&quot;&gt;L&amp;#8217;impact des conteneurs lors du dev&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A part &lt;code&gt;docker-compose&lt;/code&gt; qui est je trouve intéressant pour démarrer facilement des dépendances comme des bases de données, je ne vois pas pourquoi on devrait parler de conteneurs lors de la phase de développement. Comme dit dans le paragraphe précédemment, c&amp;#8217;est beaucoup trop tôt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le développeur doit pouvoir développer sans se soucier de la plateforme d&amp;#8217;exécution. Ce sera dans la plateforme d&amp;#8217;intégration continue que la plateforme d&amp;#8217;exécution aura un impact (pour construire un conteneur, un package&amp;#8230;&amp;#8203; à partir du projet).&lt;br&gt;
Bien sûr, il y aura toujours dans le dépôt Git du projet quelques fichiers en lien avec cela (Dockerfile par exemple), mais cela n&amp;#8217;a aucun impact sur le développement de l&amp;#8217;application elle même.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et surtout, quand je développe, je ne veux surtout pas à avoir à construire des conteneurs, installer un minikube ou avoir à déployer sur des clusters Kubernetes depuis mon poste de dev.&lt;br&gt;
Pour moi, cela doit être le job de la plateforme d&amp;#8217;intégration continue. Je pousse mon travail, et je peux d&amp;#8217;une façon ou une autre déployer mon application sur ma plateforme. Cela permet également une certaine tracabilité.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En local, je veux travailler en isolation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pense sincèrement qu&amp;#8217;il faut pouvoir s&amp;#8217;abstraire de la plateforme d&amp;#8217;exécution lors du développement.&lt;br&gt;
Les développeurs perdront un temps fou à configurer leurs postes, seront frustrés, à chaque montée de version plus rien ne fonctionnera etc&amp;#8230;&amp;#8203; si développer demande trop de dépendances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion: Evitez de faire fuiter votre infrastructure sur vos postes de développement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Mon, 06 Jan 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-01-01-exemple-infra-terraform/
</guid>
<link>
https://mcorbin.fr/posts/2020-01-01-exemple-infra-terraform/
</link>
<title>
Un exemple d'infrastructure: création avec Terraform
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans la &lt;a href=&quot;https://mcorbin.fr/posts/2019-11-21-exemple-infra-vm-image/&quot;&gt;partie précédente&lt;/a&gt;, nous avons vu comment créer des images de machines virtuelles. Dans cet article, nous allons déployer notre infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_infrastructure_à_déployer&quot;&gt;L&amp;#8217;infrastructure à déployer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici l&amp;#8217;infrastructure que nous allons déployer aujourd&amp;#8217;hui:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/exemple-infra/terraform/infra-example-terraform.png&quot; alt=&quot;Infrastructure à déployer avec Terraform&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette infrastucture, qui est assez simple, est susceptible d&amp;#8217;évoluer dans les articles suivants, notamment sur un article dédié au load balancing. Comme vous pouvez le voir, elle est actuellement composée de plusieurs éléments:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Les machines&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deux machines &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/frontend.tf&quot;&gt;frontend&lt;/a&gt; qui seront les points d&amp;#8217;entrées sur notre infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trois machines &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/master.tf&quot;&gt;consul_master&lt;/a&gt; sur lesquelles nous déploierons, comme leurs noms l&amp;#8217;indique, Consul dans un prochain article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/worker.tf&quot;&gt;Instance Pool&lt;/a&gt; qui se chargera de gérer nos workers et sur lesquels nous déploierons nos applications. Comme indiqué dans &lt;a href=&quot;https://community.exoscale.com/documentation/compute/instance-pools/&quot;&gt;la documentation&lt;/a&gt; d&amp;#8217;Exoscale, un Instance Pool est un groupe de machines identiques dont la taille peut être variable (pour s&amp;#8217;adapter aux besoins).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Une machine &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/database.tf&quot;&gt;database&lt;/a&gt; sur laquelle nous déploierons une petite application qui simulera une base de données.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Réseau&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Un &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/network.tf&quot;&gt;réseau privé&lt;/a&gt; dans lequel sera placé toutes les machines. Un serveur DHCP (géré automatiquement par Exoscale) fournira aux interfaces privées une IP comprise dans la plage d&amp;#8217;adresse &lt;code&gt;10.240.0.1&lt;/code&gt;-&lt;code&gt;10.240.0.220&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/firewall.tf&quot;&gt;security group&lt;/a&gt; (notre firewall) qui nous permet d&amp;#8217;accéder par SSH aux machines, et qui ouvrent les ports 80 et 443 en sortie des machines.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/keypair.tf&quot;&gt;clé SSH publique&lt;/a&gt; sera créée et déployée sur les machines, et un &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/data.tf&quot;&gt;fichier de configuration&lt;/a&gt; Cloud Init nous permettra entre autre de configurer l&amp;#8217;interface &lt;code&gt;eth1&lt;/code&gt; de nos machines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_terraform&quot;&gt;Terraform&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform est un outil développé par Hashicorp qui simplifie la gestion d&amp;#8217;infrastructures. Vous définissez vos ressources (réseaux, machines virtuelles, clés ssh&amp;#8230;&amp;#8203;) dans des fichiers d&amp;#8217;une manière déclarative, et Terraform se chargera de les créer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme toujours, avoir sa configuration dans des fichiers texte permet de la pousser sur Git et de traiter l&amp;#8217;infrastructure comme du code (reviews de pull requests etc&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform gère l&amp;#8217;infrastructure comme un graphe où chaque ressource peut avoir des dépendances sur d&amp;#8217;autres. Par exemple, une machine peut avoir besoin d&amp;#8217;une clé SSH. Cette machine peut être elle même dans un réseau privé. Terraform se chargera de créer (et détruire) les ressources dans le bon ordre.&lt;br&gt;
Terraform possède même une commande (&lt;code&gt;terraform graph&lt;/code&gt;) permerttant de générer le graphe de vos ressources au format.dot. Voici le nôtre (cliquez pour agrandir):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;/img/exemple-infra/terraform/graph.png&quot;&gt;&lt;img src=&quot;/img/exemple-infra/terraform/graph.png&quot; alt=&quot;graphe de notre infrastructure&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme tous les outils Hashicorp, Terraform est un outil très bien pensé, supporté par la plupart des Cloud du marché, et qui est devenu de facto un outil de plus en plus utilisé lorsqu&amp;#8217;il faut gérer de l&amp;#8217;infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_fichier_state&quot;&gt;Le fichier state&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform maintient son état dans un fichier &lt;code&gt;state&lt;/code&gt;. Ce fichier contient l&amp;#8217;état de votre infrastructure vu par Terraform. Il ne faut jamais modifier ce fichier manuellement, Terraform s&amp;#8217;en chargera lorsqu&amp;#8217;il exécutera des actions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_remote_backend&quot;&gt;Remote backend&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce fichier peut être stocké sur votre système de fichier (par défaut), ou bien sur un &lt;code&gt;remote backend&lt;/code&gt;. Cela est notamment utile pour plusieurs raisons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cela permet de conserver le fichier state si vous perdez votre ordinateur par exemple.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Il est plus simple de travailler en équipe et de partager son fichier state entre plusieurs personnes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Certains backends supportent le chiffrement du fichier state. En effet, ce fichier peut contenir des informations sensibles à propos de votre infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enfin, certains backends permettent de poser un lock sur le fichier state. Cela permet d&amp;#8217;éviter les opérations concurrentes sur l&amp;#8217;infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez retrouver dans la &lt;a href=&quot;https://www.terraform.io/docs/backends/types/index.html&quot;&gt;documentation&lt;/a&gt; les backends existants. Par exemple, le backend S3 est très intéressant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_backend_s3&quot;&gt;Backend S3&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce backend permet de stocker le fichier sur un stockage compatible S3. Il fonctionne par exemple sur l&amp;#8217;&lt;a href=&quot;https://www.exoscale.com/object-storage/&quot;&gt;Object Storage&lt;/a&gt; d&amp;#8217;Exoscale qui est compatible S3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce backend supporte aussi d&amp;#8217;autres fonctionnalités seulement disponible sur Amazon, comme la gestion du chiffrement ou l&amp;#8217;ajout du lock sur le fichier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour le configurer (et aussi configurer le provider Exoscale présenté plus loin), vous devez définir quelques variables d&amp;#8217;environnements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export TF_VAR_exoscale_api_key=&amp;lt;exoscale key&amp;gt;
export TF_VAR_exoscale_secret_key=&amp;lt;exoscale secret&amp;gt;
export AWS_ACCESS_KEY_ID=${TF_VAR_exoscale_api_key}
export AWS_SECRET_ACCESS_KEY=${TF_VAR_exoscale_secret_key}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_description_de_la_configuration&quot;&gt;Description de la configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez regarder les différents fichiers dont j&amp;#8217;ai mis les liens précédemment pour voir à quoi ressemble la configuration de Terraform, mais voici quelques explications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_variables&quot;&gt;Variables&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est possible de vérifier des variables dans la configuration. Par exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;variable &quot;ssh_public_key_path&quot; {
  description = &quot;Path to the ssh public key&quot;
  default     = &quot;/home/mathieu/.ssh/example-infra/id_rsa.pub&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, je déclare une variable nommée &lt;code&gt;ssh_public_key_path&lt;/code&gt;. Cette variable a une description et une valeur par défaut.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est ensuite possible de surcharger cette variable lors de l&amp;#8217;exécution de Terraform de plusieurs manières:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Passage d&amp;#8217;une variable d&amp;#8217;environnement nommée TF_VAR_&amp;lt;nom de la variable&amp;gt;, comme par exemple &lt;code&gt;TF_VAR_ssh_public_key_path&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passage lors de l&amp;#8217;appel de Terraform en passant une option &lt;code&gt;-var=&quot;ssh_public_key_path=value&quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ajout des valeurs des variables dans un fichier et passage de ce fichier lors de l&amp;#8217;appel de Terraform de cette façon: &lt;code&gt;-var-file=&quot;file.vars&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans mon exemple de configuration, j&amp;#8217;ai besoin par exemple de passer des variables pour configurer mon provider.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_configuration_du_provider&quot;&gt;Configuration du provider&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe un grand nombre de provider Terraform. Les providers sont utilisés pour créer des ressources sur différents systèmes (Exoscale, Openstack, Cloudflare&amp;#8230;&amp;#8203;). Voici par exemple comment configurer le provider Exoscale:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;provider &quot;exoscale&quot; {
  version = &quot;~&amp;gt; 0.15&quot;
  key = var.exoscale_api_key
  secret = var.exoscale_secret_key
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit qu&amp;#8217;il est possible de configurer la version du provider utilisée par Terraform.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_configuration_du_backend_s3&quot;&gt;Configuration du backend S3&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici un exemple où je configure le backend S3 pour le faire fonctionner sur Exoscale:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;terraform {
  backend &quot;s3&quot; {
    bucket   = &quot;mcorbin-example-infra-tf&quot;
    key    = &quot;mcorbin-example-infra.tfstate&quot;
    region = &quot;ch-gva-2&quot;

    endpoint = &quot;https://sos-ch-gva-2.exo.io&quot;

    # Deactivate the AWS specific behaviours
    #
    # https://www.terraform.io/docs/backends/types/s3.html#skip_credentials_validation
    skip_credentials_validation = true
    skip_get_ec2_platforms      = true
    skip_requesting_account_id  = true
    skip_metadata_api_check     = true
    skip_region_validation      = true

  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On configure tout simplement le bucket où le fichier state sera stocké.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les options &lt;code&gt;skip_&lt;/code&gt; sont là pour désactiver certains comportements spécifiques à S3. Il n&amp;#8217;y a pas d&amp;#8217;inquiétide à avoir, par exemple &lt;code&gt;skip_credentials_validation&lt;/code&gt; ne veut pas dire que votre fichier state sera public.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_les_datasources&quot;&gt;Les datasources&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les datasources dans Terraform permettent de récupérer de l&amp;#8217;information. Un exemple concret est par exemple récupérer un template de machine virtuelle selon différents critères. Ce template peut ensuite être utilisé dans les ressources décrivant les machines virtuelles par exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici un exemple d&amp;#8217;utilisation d&amp;#8217;une datasource (cf le mot clé &lt;code&gt;data&lt;/code&gt;) servant à récupérer le template que nous avons construit dans l&amp;#8217;article précédent sur Packer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;data &quot;exoscale_compute_template&quot; &quot;debian&quot; {
  zone = var.exoscale_zone
  name = &quot;Debian 10 1574286847&quot;
  filter = &quot;mine&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme nous le verrons ensuite, nous pourrons utiliser dans d&amp;#8217;autres ressources les informations récupérées.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_cloud_init&quot;&gt;Cloud Init&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform permet bien sûr de déployer des machines virtuelles en passant un fichier Cloud Init. Cela se fait également via une datasource de manière très simple. Il est également possible de passer des variables au fichier Cloud Init chargé, qui sera donc un template (cela est utile pour avoir un fichier différent par host si besoin).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_count&quot;&gt;Count&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous voulez déployer une ressource plusieurs fois (comme par exemple déployer plusieurs machines virtuelles identiques), vous pouvez utiliser l&amp;#8217;attribut &lt;code&gt;count&lt;/code&gt; sur les ressources. Un exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;resource &quot;exoscale_compute&quot; &quot;consul_master&quot; {
  count = 3

  display_name = &quot;consul-master-${count.index}&quot;
  template_id  = &quot;${data.exoscale_compute_template.debian.id}&quot;

  zone = var.exoscale_zone

  size            = &quot;tiny&quot;
  disk_size       = 20
  key_pair        = exoscale_ssh_keypair.example-infra-perso.name
  security_groups = [exoscale_security_group.example-infra-common.name]
  tags = {
    ansible_groups = &quot;consul-master&quot;
  }

  user_data = data.template_cloudinit_config.config.rendered
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je déploie ici 3 machines virtuelles (&lt;code&gt;count = 3&lt;/code&gt;). A part leurs noms, ces machines seront identiques. On voit que j&amp;#8217;utilise dans le nom de la machine (paramètre &lt;code&gt;display_name&lt;/code&gt;) une variable &lt;code&gt;${count.index}&lt;/code&gt;. Mes machines seront donc nommées &lt;code&gt;consul-master-0&lt;/code&gt;, &lt;code&gt;consul-master-1&lt;/code&gt; et &lt;code&gt;consul-master-2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cet exemple montre aussi comment cette ressource de type &lt;code&gt;exoscale_compute&lt;/code&gt; référence d&amp;#8217;autres ressources et variables:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Le template est configuré en récupérant l&amp;#8217;ID exposé par la datasource de type template présentée précédemment: &lt;code&gt;&quot;${data.exoscale_compute_template.debian.id}&quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La zone est configurée via &lt;code&gt;var.exoscale_zone&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La keypair, le security group, et les user data (pour cloud init) sont également configurés via référencement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est également possible d&amp;#8217;itérer sur des ressources déclarées avec un &lt;code&gt;count&lt;/code&gt;. Par exemple, je souhaite placer ces machines dans un réseau privé. Cela se fait de cette façon:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;exoscale_nic&quot; &quot;eth_consul_master&quot; {
  count = length(exoscale_compute.consul_master)

  compute_id = exoscale_compute.consul_master.*.id[count.index]
  network_id = exoscale_network.example-infra.id
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La variable &lt;code&gt;exoscale_compute.consul_master.*.id[count.index]&lt;/code&gt; permettra de créer une ressource de type &lt;code&gt;exoscale_nic&lt;/code&gt; par machine virtuelle, et donc permettra d&amp;#8217;attacher chaque machine au réseau.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_init&quot;&gt;Init&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La première commande Terraform à lancer est &lt;code&gt;terraform init&lt;/code&gt;. Cette commande sert tout simplement à initialiser le backend utilisé.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_plan&quot;&gt;Plan&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une fois que votre configuration est écrite, vous pouvez lancer &lt;code&gt;terraform plan&lt;/code&gt;. Cette commande crée et affiche le plan d&amp;#8217;exécution. Ce dernier permet de voir toutes les actions que réalisera Terraform: création, suppression, mise à jour de ressources. Il peut par exemple être intéressant d&amp;#8217;attacher la sortie de &lt;code&gt;terraform plan&lt;/code&gt; en commentaire d&amp;#8217;une pull request lorsque l&amp;#8217;on travaille avec Terraform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est toujours important de regarder ce que va faire Terraform avant de réaliser un déploiement. En effet, il est très facile de détruire des ressources avec Terraform. Une ressource est détruite (ou reconstruite) si:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Elle a été supprimée du plan.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un champ immuable a été mis à jour. Par exemple, si je change le template utilisé par une machine virtuelle, Packer essayera de la recréer (donc de détruire la machine existante et de la reconstruire).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Si la ressource dépend d&amp;#8217;une autre ressource qui sera elle même détruite. Comme dit précédemment, si une ressource est détruite ou reconstruite, les ressources dépendantes le seront aussi.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_apply&quot;&gt;Apply&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La commande &lt;code&gt;terraform apply&lt;/code&gt; appliquera les modifications à votre infrastructure. Terraform affichera encore une fois le plan, et demandera une confirmation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_destroy&quot;&gt;Destroy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La commande &lt;code&gt;terraform destroy&lt;/code&gt; vous permet de détruire votre infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cycle_de_vie&quot;&gt;Cycle de vie&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform présente selon moi une difficulté majeure: la gestion du cycle de vie des ressources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reprenons mon exemple précédent: je veux changer le template utilisé par mes machines virtuelles. Vous voulez probablement faire ça régulièrement sur certaines machines (cf mon article précédent sur Packer où j&amp;#8217;expose quelques raisons pour reconstruire régulièrement ses templates).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par défaut, Terraform voudra détruire et recréer toutes mes machines. Bien sûr, ce n&amp;#8217;est pas ce que nous voulons. Ce problème se retrouve un peu partout dans Terraform (vous modifiez une ressource et Terraform décide que cela provoquera la reconstruction de votre infrastructure).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est possible de contrôler le comportement de Terraform sur ce point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_depends_on&quot;&gt;depends_on&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout d&amp;#8217;abord, il est possible de forcer la dépendance entre deux ressources via l&amp;#8217;option &lt;code&gt;depends_on&lt;/code&gt; sur une ressource. Cela peut être utile parfois pour forcer une destruction qui ne se produirait pas par défaut par exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_lifecycle&quot;&gt;lifecycle&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;option &lt;code&gt;lifecycle&lt;/code&gt; sur une ressource permet, comme son nom l&amp;#8217;indique, de contrôler le cycle de vie d&amp;#8217;une ressource. Voyons quelques exemples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_ignore_changes&quot;&gt;ignore_changes&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;ignore_changes&lt;/code&gt; permet d&amp;#8217;indiquer à Terraform de ne pas reconstruire une ressource si le ou les attributs spécifiés ont été mis à jour.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par exemple, sur une ressource de type &lt;code&gt;exoscale_compute&lt;/code&gt;, indiquer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lifecycle {
    ignore_changes = [key_pair]
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;permettra d&amp;#8217;éviter la reconstruction de la machine si la keypair référencée par la ressource est modifiée.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_prevent_destroy&quot;&gt;prevent_destroy&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette option indiquer tout simplement à Terraform de ne jamais détruire la ressource. Par exemple, si j&amp;#8217;indique &lt;code&gt;prevent_destroy = true&lt;/code&gt; pour une ressource de type &lt;code&gt;exoscale_compute&lt;/code&gt; et que j&amp;#8217;essaye de détruire cette resource, j&amp;#8217;obtiendrais:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error: Instance cannot be destroyed

  on master.tf line 2:
   2: resource &quot;exoscale_compute&quot; &quot;consul_master&quot; {

Resource exoscale_compute.consul_master[1] has lifecycle.prevent_destroy set,
but the plan calls for this resource to be destroyed. To avoid this error and
continue with the plan, either disable lifecycle.prevent_destroy or reduce the
scope of the plan using the -target flag.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_create_before_destroy&quot;&gt;create_before_destroy&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une fois ajoutée sur une ressource, cette option permet de recréer une ressource &lt;strong&gt;avant&lt;/strong&gt; sa destuction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons par exemple le cas d&amp;#8217;une ressource de type &lt;code&gt;exoscale_compute&lt;/code&gt;. Si on modifie le template de la ressource, Terraform voudra par défaut détruire puis reconstruire la ressource.&lt;br&gt;
Grâce à l&amp;#8217;option &lt;code&gt;create_before_destroy = true&lt;/code&gt;, la nouvelle machine sera créée avant la destruction de l&amp;#8217;ancienne machine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_provisioners&quot;&gt;Provisioners&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les provisioners permettent tout simplement d&amp;#8217;exécuter une action après la création d&amp;#8217;une ressource, comme par exemple exécuter un script ou bien déployer un fichier sur une instance nouvellement créée.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela permet par exemple d&amp;#8217;attendre qu&amp;#8217;un service soit démarré avant de considérer une machine comme créée par Terraform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par exemple, si j&amp;#8217;ajoute sur une ressource de type &lt;code&gt;exoscale_compute&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;provisioner &quot;local-exec&quot; {
  command = &quot;echo 'create' &amp;amp;&amp;amp; sleep 10&quot;
}

provisioner &quot;local-exec&quot; {
  when = &quot;destroy&quot;
  command = &quot;echo 'destroy' &amp;amp;&amp;amp; sleep 20&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le premier provisioner sera appelé lors de la création (ou recréation) d&amp;#8217;une ressource, et le second lors d&amp;#8217;une destruction. Dans mon exemple de configuration, j&amp;#8217;utilise par exemple un provisioner de type &lt;code&gt;local-exec&lt;/code&gt; pour ajouter des tags sur les machines virtuelles de mon instance pool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme indiqué dans la &lt;a href=&quot;https://www.terraform.io/docs/provisioners/index.html#provisioners-are-a-last-resort&quot;&gt;documentation de Terraform&lt;/a&gt;, il ne faut pas abuser des provisioners. De plus, certains problèmes existent avec les provisioners. Par exemple, si j&amp;#8217;ajoute sur une ressource:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lifecycle {
  create_before_destroy = true
}

provisioner &quot;local-exec&quot; {
  command = &quot;echo 'create' &amp;amp;&amp;amp; sleep 10&quot;
}

provisioner &quot;local-exec&quot; {
  when = &quot;destroy&quot;
  command = &quot;echo 'destroy' &amp;amp;&amp;amp; sleep 20&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bizarrement, le provisioner &lt;code&gt;destroy&lt;/code&gt; ne sera pas appelé (cf &lt;a href=&quot;https://github.com/hashicorp/terraform/issues/13395&quot;&gt;cette issue&lt;/a&gt; sur Github).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_terraform_vs_gestionnaire_de_configuration&quot;&gt;Terraform vs gestionnaire de configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform est très bon pour créer de l&amp;#8217;infrastructure, mais selon moi pas pour configurer des serveurs ou faire de l&amp;#8217;orchestration (même si cela peut être possible via les provisioners).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pense qu&amp;#8217;il est important de ne pas essayer d&amp;#8217;utiliser un seul outil pour tout faire. Il vaut mieux restreindre Terraform à faire ce qu&amp;#8217;il fait bien, et utiliser par exemple Ansible pour la configuration, le déploiement d&amp;#8217;applications, l&amp;#8217;orchestration&amp;#8230;&amp;#8203; Nous verrons ça dans les articles suivants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De même, je préfère éviter de créer de l&amp;#8217;infrastucture avec Ansible (la capacité de Terraform à gérer les dépendances entre ressources étant un gros plus).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pour_aller_plus_loin&quot;&gt;Pour aller plus loin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je n&amp;#8217;ai pas parlé de tout ce qui est possible de faire avec Terraform. Par exemple, les &lt;a href=&quot;https://www.terraform.io/docs/modules/index.html&quot;&gt;modules&lt;/a&gt; permettent de créer des morceaux de configurations réutilisables. Cela est très utile pour éviter d&amp;#8217;avoir à se répéter, par exemple pour la création de machines virtuelles partageant certaines choses en commun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform ne se limite pas à la création d&amp;#8217;infrastructure. Il permet de configurer des applications comme RabbitMQ, PostgresSQL, MySQL&amp;#8230;&amp;#8203; Vous pouvez jeter un coup d&amp;#8217;oeil à la liste des &lt;a href=&quot;https://www.terraform.io/docs/providers/index.html&quot;&gt;providers&lt;/a&gt; disponibles. A vous de trancher ce qui doit être géré par Terraform ou par un autre outil.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il n&amp;#8217;est pas toujours évident de mettre à jours des ressources nécessitant une destruction avec Terraform (surtout si ces ressources sont référencées par d&amp;#8217;autres ressources). Utiliser les provisioners comme par exemple &lt;a href=&quot;https://www.hashicorp.com/blog/zero-downtime-updates-with-terraform&quot;&gt;dans cet article d&amp;#8217;Hashicorp&lt;/a&gt; peut fonctionner, mais il est selon moi plus simple (et plus sûr) de dupliquer l&amp;#8217;infrastructure dans ce cas (et donc faire du déploiement blue/green).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform est aussi un outil dangereux: un mauvais &lt;code&gt;terraform destroy&lt;/code&gt; peut détruire toute votre infrastructure. Faites toujours très attention à ce que vous faites, et n&amp;#8217;hésitez pas à utiliser &lt;code&gt;prevent_destroy&lt;/code&gt; sur vos ressources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;N&amp;#8217;hésitez pas non plus à découper votre déploiement en plusieurs projets Terraform (par environnement, client, provider etc&amp;#8230;&amp;#8203;), ce sera comme cela plus simple à gérer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est tout pour cet article, dans l&amp;#8217;article suivant on parlera de déploiement et d&amp;#8217;Ansible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 01 Jan 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-12-08-meuse-0.3.0/
</guid>
<link>
https://mcorbin.fr/posts/2019-12-08-meuse-0.3.0/
</link>
<title>
Meuse 0.3.0 released !
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve just released the version 0.3.0 of &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Meuse&lt;/a&gt;, an alternative registry for the Rust programming language. What&amp;#8217;s new in this release ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_database_migrations&quot;&gt;Database migrations&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meuse will now automatically create its database, and apply migration scripts when it starts. No need to execute SQL scripts manually anymore !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_a_frontend&quot;&gt;A frontend&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve created a frontend for Meuse. The frontend is very limited (you can only browse crates and categories, there is no authentication etc&amp;#8230;&amp;#8203;) but I plan to improve it in the future. You can disable it in the configuration if you want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/meuse030/frontend.jpg&quot; alt=&quot;Meuse frontend example&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_download_count&quot;&gt;Download count&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meuse now counts the number of times that a a crate is downloaded, per version. The number is returned by the API when you retrieve informations about crates, and is also available in the frontend.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_a_new_call_to_retrieve_statistics&quot;&gt;A new call to retrieve statistics&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The URL &lt;code&gt;api/v1/meuse/statistics&lt;/code&gt; now returns the number of crates, crates versions, users and the total number of downloads.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_refactoring_and_enhancement&quot;&gt;Refactoring and enhancement&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I did some internal refactorings on the database layer and on error handling. I also added new metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will now write a CLI for the project (&lt;code&gt;curl&lt;/code&gt; works well, but I want to have something better).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would also like to improve the frontend, but I&amp;#8217;m a very bad frontend developer (and I do not really like it). If you want to contribute, please ping me (by email or by creating issues on the &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Github repository&lt;/a&gt;). The frontend is generated by the server, so the work should be mostly HTML, CSS and javascript.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sun, 08 Dec 2019 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-11-21-exemple-infra-vm-image/
</guid>
<link>
https://mcorbin.fr/posts/2019-11-21-exemple-infra-vm-image/
</link>
<title>
Un exemple d'infrastructure: gestion des images
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans cet article, je montrerais comment construire les images qui seront utilisées pour créer nos machines virtuelles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_machine_virtuelle_la_base_de_tout&quot;&gt;La machine virtuelle, la base de tout.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Toutes nos applications tourneront sur des machines virtuelles. Ces machines virtuelles auront comme système d&amp;#8217;exploitation &lt;code&gt;Debian 10&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais je veux pouvoir gérer les images de ces machines. En effet, beaucoup de gens utilisent les images de base fournies par leur cloud provider, et passent ensuite du Ansible/Puppet&amp;#8230;&amp;#8203; pour faire les mises à jour du système d&amp;#8217;exploitation et pour installer un certain nombre d&amp;#8217;outils &quot;de base&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pourtant, il est beaucoup plus efficace de construire en amont une image pour sa machine virtuelle, avec les mises à jour déjà appliquées, et les outils déjà installés. Cela permet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;De déployer chez un cloud provider des distributions Linux ou des systèmes d&amp;#8217;exploitations non disponibles par défaut.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De gagner du temps et pas de perdre 5 minutes lors du déploiement de chaque nouvelle machine virtuelle pour installer toujours la même chose.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De pouvoir facilement livrer une nouvelle image contenant par exemple des mises à jour de sécurité ou un nouveau outil: de cette façon, on a la garantie que toutes les nouvelles machines créées seront à jour.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De savoir &quot;où on en est&quot; sur notre infrastructure: en mettant par exemple la date de construction de l&amp;#8217;image dans le nom de cette dernière, on peut facilement savoir quelle machine reconstruire (le but étant d&amp;#8217;avoir l&amp;#8217;infrastructure la plus immutable possible, je dirais qu&amp;#8217;il faut toujours se méfier des machines trop vieilles).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De configurer notre image comme on le veut, comme par exemple avoir un partitionnement spécifique.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pourquoi pas même d&amp;#8217;installer vos applications directement sur l&amp;#8217;image, et donc de vous servir des images comme outil de packaging ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour construire nos images, on utilisera &lt;a href=&quot;https://www.packer.io/intro/&quot;&gt;Packer&lt;/a&gt; de Hashicorp. J&amp;#8217;avais d&amp;#8217;ailleurs réalisé un talk sur Packer dont vous pouvez retrouver les slides &lt;a href=&quot;https://mcorbin.fr/posts/2019-09-10-machines-virtuelles/&quot;&gt;ici&lt;/a&gt;. Je vous conseille de les dérouler car elles contiennent pas mal d&amp;#8217;infos intéressantes, notamment sur les les différentes stratégies de construction d&amp;#8217;images. je parle notamment dans les slides de la construction d&amp;#8217;images:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;En partant d&amp;#8217;images de base &lt;code&gt;cloud&lt;/code&gt; fournies par les distributions (Debian, Ubuntu, RedHat&amp;#8230;&amp;#8203;): c&amp;#8217;est ce que nous allons faire dans la suite de cet article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;En répondant intéractivement aux questions d&amp;#8217;un installer, avec Packer qui simule le clavier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Via des fichiers de description d&amp;#8217;installations, comme par exemple les fichiers &lt;code&gt;kickstart&lt;/code&gt; de RedHat.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_packer&quot;&gt;Packer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Packer est donc un outil servant à automatiser la création d&amp;#8217;images pour machines virtuelles. Il a plusieurs avantages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Il est simple à installer et à utiliser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La recette des images est écrite en json, et donc se versionne très bien dans Git.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packer permet de construire et de déployer les images sur de nombreux cloud, ou bien de les construire avec des outils comme &lt;code&gt;qemu&lt;/code&gt; ou &lt;code&gt;vagrant&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez trouver les fichiers de configurations utilisés dans cet article &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/tree/master/packer&quot;&gt;sur Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La configuration de packer se décompose en plusieurs sections:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;variables: on peut déclare des variables dans cette section. Elles pourront être réutilisées ensuite dans le reste de la configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;builders: cette section sert à configure le &quot;quoi&quot; qui démarrera notre machine virtuelle sur laquelle nous appliquerons des modifications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provisioners: cette section sert à configurer les actions à exécuter sur la machine virtuelle, comme par exemple exécuter des scripts shell.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;post-processors: cette section sert à exécuter des actions &lt;code&gt;après&lt;/code&gt; la construction d&amp;#8217;une machine virtuelle, comme par exemple la pousser sur un cloud provider pour utilisation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_construire_notre_image_debian_10&quot;&gt;Construire notre image Debian 10&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On va faire les choses assez simplement:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nous utiliserons le builder &lt;code&gt;qemu&lt;/code&gt; (avec l&amp;#8217;accélération &lt;code&gt;kvm&lt;/code&gt;, Packer utilisera kvm par défaut si disponible sur la machine) pour construire notre image. Cela nous permet de dissocier la construction de l&amp;#8217;image du cloud provider où elle sera utilisée, et il sera donc plus facile de faire du multi cloud si cela s&amp;#8217;avère un jour nécessaire.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nous nous contenterons de faire les mises à jour et d&amp;#8217;installer quelques packages sur l&amp;#8217;image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L&amp;#8217;image sera ensuite poussée sur le cloud Exoscale.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_recette_packer&quot;&gt;La recette Packer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, la configuration est &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/packer/debian.json&quot;&gt;trouvable sur Github&lt;/a&gt;.&lt;br&gt;
Je ne vais pas détailler tout le fichier de configuration &lt;code&gt;json&lt;/code&gt; de Packer (la doc Packer le fait très bien), mais il est quand même important d&amp;#8217;expliquer comment la création de l&amp;#8217;image est réalisée, et de ce qui se passe quand une machine démarre chez un cloud provider.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je vais partir d&amp;#8217;une autre image de base pour réaliser mon image. Cette image est l&amp;#8217;image &lt;code&gt;Cloud&lt;/code&gt; fournie par Debian, et est trouvable &lt;a href=&quot;https://cdimage.debian.org/cdimage/openstack/current-10/&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ces images sont des images ayant déjà &lt;a href=&quot;https://cloudinit.readthedocs.io/en/latest/&quot;&gt;Cloud Init&lt;/a&gt; d&amp;#8217;installé, et sont donc généralement utilisables telles quelles sur n&amp;#8217;importe quel cloud provider.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous ne savez pas ce qu&amp;#8217;est Cloud Init, voici un petit résumé: c&amp;#8217;est une collection de scripts Python qui se lancent lors du démarrage de la machine. Ces scripts Python vont faire plusieurs choses:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Chaque cloud provider expose une &lt;code&gt;datasource&lt;/code&gt;, qui est en fait un serveur HTTP exposant des informations sur la machine (zone, offering, ID de la machine, configuration réseau&amp;#8230;&amp;#8203;). Cloud Init se connecte à ce serveur lorsque la machine démarre, va chercher ces informations, et configure la machine en fonction de ce qu&amp;#8217;il a reçu.&lt;br&gt;
Par exemple, c&amp;#8217;est comme cela que les cloud providers déploiement vos clés SSH sur les machines: sans Cloud Init, vous ne pourriez pas vous connecter sur vos machines virtuelles.&lt;br&gt;
C&amp;#8217;est aussi Cloud Init qui gère généralement le redimensionnement d&amp;#8217;un disque lorsqu&amp;#8217;on l&amp;#8217;agrandit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Il est également possible de passer à Cloud Init un fichier &lt;code&gt;yaml&lt;/code&gt; décrivant des actions à exécuter au démarrage de la machine. De nombreuses choses sont possibles: configuration des utilisateurs, commandes shell à exécuter, écriture de fichiers&amp;#8230;&amp;#8203; Vous pouvez trouver quelques exemples &lt;a href=&quot;https://cloudinit.readthedocs.io/en/latest/topics/examples.html&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Packer démarrera donc avec &lt;code&gt;qemu&lt;/code&gt; une machine virtuelle Debian contenant Cloud Init. Une fois démarrée, Packer se connectera dessus via SSH et exécutera des actions (dans notre cas, il exécutera seulement un script shell).&lt;br&gt;
Mais nous ne sommes pas sur un Cloud Provider, donc comment pouvons nous passer notre clé publique à la machine pour que Packer se connecte ? C&amp;#8217;est là qu&amp;#8217;intervient la &lt;a href=&quot;https://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html&quot;&gt;datasource NoCloud&lt;/a&gt;. Nous allons passer à la machine un disque qui contiendra un fichier &lt;code&gt;user-data&lt;/code&gt;. Ce fichier configurera une clé publique sur la machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici par exemple le contenu du fichier &lt;code&gt;user-data&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;#cloud-config
ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDWhO7XUDYZDzKi+3TDrmwAsx3r+xtiz1uUoBP69z7cKEHiehXuORdQxi4o9/mA9Nz+fRWm3Wy2aAvm4ZjCpSTx77wTICaJ3mlbRpYfQHqCRiV2Qgeo94GErTpR6xPsn699bJKIu+N/dEzg6l3SV5XWslFZ/7asRc+iS+ZRu3dm2thOWnPwKNcIx9q/VjafdMqzwmV9HIPhfVOhB4MxQcQe0vOf1788cT0ef/5sOyVeYkcNjMvFfX/qb3M/VjvdrCPTzW01c53elptWBp6EVjQG3PQIh2qmhgx594jE3b/ZfHVgfqdkabIsFgF7f+xU1HVchMh5Q4iCDiypZkR3GoBcbW56GMayPoZ7duiCKnLyJJ9VDkZexMuR5suOxrFf5FqLvHW7alxvbmEHofk/nwCniF/OCeq9++MAPJp28wDeM748Im6I/NXk0wRV7I6AXbFLAgkEdU4C/GZ2EinNkRDJJ39ISV03VssYAKCZlYfuK+JvNZbg3smEOQgDa0sJvyN81CCKDl48hk963uUZK7iKy/Vch/abz9eT1t5PABB/7pW+sui0ohpCBYoKQXW6JCXNjE0i7K8uhF9kYXj4PINQd0+ikzbzwmippTJAWlfZMSh4+bpyNQfAZNz9rmXp8PFV51wJRsTPH2Bqzayy4MwXWIV6X4xd2pKptb6J0aZDZQ== packer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Générons ensuite un disque contenant ce fichier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;cloud-localds seed.img user-data&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le fichier &lt;code&gt;seed.img&lt;/code&gt; sera à passer à Packer, et Cloud Init exécutera automatiquement le contenu du fichier (et donc configurera notre clé publique).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est ce bloc dans la configuration &lt;code&gt;json&lt;/code&gt; de Packer qui permettra de passer ce disque à la machine virtuelle:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;qemuargs&quot;: [
    [&quot;-cpu&quot;, &quot;qemu64,rdrand=on&quot;],
    [&quot;-drive&quot;, &quot;file=output-qemu/debian-buster.qcow2,format=qcow2,if=virtio&quot;],
    [&quot;-drive&quot;, &quot;file=seed.img,format=raw,if=virtio&quot;]
],&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit que l&amp;#8217;on passe ici plusieurs paramètres à qemu:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Le premier concerne la génération de nombre aléatoire, chose importante sur une machine virtuelle. Si je sujet vous intéresse, &lt;a href=&quot;https://www.exoscale.com/syslog/random-numbers-generation-in-virtual-machines/&quot;&gt;allez ici&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Le deuxième spécifie le chemin vers l&amp;#8217;image qui sera créée par Packer (c&amp;#8217;est cette image qui sera envoyée sur le cloud provider).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Le troisième est notre fichier &lt;code&gt;seed.img&lt;/code&gt; qui contient donc notre fichier yaml.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il nous reste une dernière chose à configurer pour se connecter sur la machine: la clée privée à utiliser par Packer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela se configure dans le builder qemu, via l&amp;#8217;option &lt;code&gt;ssh_private_key_file&lt;/code&gt;. Nous allons passer le chemin vers notre clé privé (qui doit être la clé associée à la clé publique présente dans le fichier &lt;code&gt;seed.img&lt;/code&gt;) via une variable d&amp;#8217;environnement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans la section &lt;code&gt;variables&lt;/code&gt; du fichier Packer, vous pouvez voir:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;ssh_private_key_file&quot;: &quot;{{env `PACKER_PRIVATE_KEY`}}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite, dans la section &lt;code&gt;builders&lt;/code&gt;, vous trouverez:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;ssh_private_key_file&quot;: &quot;{{user `ssh_private_key_file`}}&quot;,&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous n&amp;#8217;aurons donc qu&amp;#8217;à configurer la variable d&amp;#8217;environnement &lt;code&gt;PACKER_PRIVATE_KEY&lt;/code&gt; pour pouvoir se connecter sur la machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, je n&amp;#8217;exécuterais qu&amp;#8217;un script shell sur notre machine qui installera quelques packages, mettra Cloud Init à jour (de façon assez sale, en téléchargeant le paquet via wget :D) et configurera la datasource Exoscale.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_un_premier_essai&quot;&gt;Un premier essai&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous devriez maintenant pouvoir construire votre image. Commentez toute la partie &lt;code&gt;post-processors&lt;/code&gt; du fichier &lt;code&gt;debian.json&lt;/code&gt; et lancez:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;PACKER_PRIVATE_KEY=/home/mathieu/.ssh/infra/id_rsa packer build debian.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En modifiant bien sûr la valeur de &lt;code&gt;PACKER_PRIVATE_KEY&lt;/code&gt;, et votre image devrait se construire !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si tout se passe bien, vous devriez voir les logs d&amp;#8217;exécution de Packer et à la fin un message indiquant &lt;code&gt;=&amp;#8658; Builds finished. The artifacts of successful builds are: -&amp;#8594; qemu: VM files in directory: output-qemu&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En effet, l&amp;#8217;image finale devrait être dans &lt;code&gt;output-qemu/debian-buster.qcow2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous avez un problème, vous pouvez regarder les logs ou utiliser un client &lt;code&gt;vnc&lt;/code&gt; (comme &lt;code&gt;remmina&lt;/code&gt;) sur Linux pour vous connecter sur la machine en cours de construction si besoin (le port &lt;code&gt;vnc&lt;/code&gt; est défini comme étant &lt;code&gt;6000&lt;/code&gt; dans mon exemple).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_changer_la_taille_de_l_image&quot;&gt;Changer la taille de l&amp;#8217;image&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La taille virtuelle d&amp;#8217;une image sur le cloud Exoscale doit être de 10G au minimum. Il faut donc mettre à jour la taille de notre image. Pour cela, nous utilisons un &lt;code&gt;post-processors&lt;/code&gt; de type &lt;code&gt;shell-local&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;type&quot;: &quot;shell-local&quot;,
    &quot;inline&quot;: [&quot;qemu-img resize output-qemu/debian-buster.qcow2 10G&quot;]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La taille virtuelle de notre image sera maintenant de 10G. Cela se vérifie facilement:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;qemu-img info output-qemu/debian-buster.qcow2
image: output-qemu/debian-buster.qcow2
file format: qcow2
virtual size: 10G (10737418240 bytes)
disk size: 522M
cluster_size: 65536
Format specific information:
    compat: 1.1
    lazy refcounts: false
    refcount bits: 16
    corrupt: false

du -sh output-qemu/debian-buster.qcow2
523M	output-qemu/debian-buster.qcow2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La taille de notre image sur le disque est de 523M, mais la taille virtuelle est bien de 10G.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pousser_l_image_sur_exoscale&quot;&gt;Pousser l&amp;#8217;image sur Exoscale&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le post processor &lt;a href=&quot;https://www.packer.io/docs/post-processors/exoscale-import.html&quot;&gt;exoscale-import&lt;/a&gt; nous permet d&amp;#8217;importer sur le Cloud Exoscale notre image fraîchement construite. Sa configuration est très simple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;type&quot;: &quot;exoscale-import&quot;,
    &quot;api_key&quot;: &quot;{{user `exoscale_api_key`}}&quot;,
    &quot;api_secret&quot;: &quot;{{user `exoscale_api_secret`}}&quot;,
    &quot;image_bucket&quot;: &quot;mcorbin.fr.images&quot;,
    &quot;template_name&quot;: &quot;Debian 10 {{timestamp}}&quot;,
    &quot;template_description&quot;: &quot;Debian 10 template&quot;,
    &quot;template_username&quot;: &quot;debian&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les variables d&amp;#8217;environnements &lt;code&gt;EXOSCALE_API_KEY&lt;/code&gt; et &lt;code&gt;EXOSCALE_API_SECRET&lt;/code&gt; serviront à configurer les credentials nécessaires au post processor. On spécifie aussi le bucket sur lequel sera poussée l&amp;#8217;image (en effet, les images sont d&amp;#8217;abord poussées sur l&amp;#8217;object store compatible S3 d&amp;#8217;Exoscale avant d&amp;#8217;être enregistrées).&lt;br&gt;
Le nom de l&amp;#8217;image contiendra le timestamp de la date de création.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous relancez le build en configurant les nouvelles variables d&amp;#8217;environnements et en utilisant un bucket vous appartenant dans &lt;code&gt;image_bucket&lt;/code&gt;, l&amp;#8217;image devrait être maintenant visible sur Exoscale !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/exemple-infra/packer/debian-template.png&quot; alt=&quot;image debian sur Exoscale&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour information, le temps entre le lancement du build Packer sur mon ordinateur portable et le moment où l&amp;#8217;image est disponible sur le Cloud Exoscale est de 3 minutes 30.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_aller_plus_loin&quot;&gt;Aller plus loin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout cela peut se faire dans une &lt;code&gt;plateforme d&amp;#8217;intégration continue&lt;/code&gt; type Jenkins. Le but est vraiment que vous puissiez livrer à tout moment une nouvelle image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est également très important de &lt;code&gt;tester ses images&lt;/code&gt;.&lt;br&gt;
Avant de les pousser en prod, exécutez des tests dessus: est ce que l&amp;#8217;image boot correctement, est ce que les services dessus sont bien démarrés, est ce qu&amp;#8217;il n&amp;#8217;y a pas de problèmes de sécurité sur l&amp;#8217;image&amp;#8230;&amp;#8203; Ces tests doivent aussi se lancer sur votre plateforme d&amp;#8217;intégration continue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous avons utilisé dans cet article la datasource Cloud Init &lt;code&gt;nocloud&lt;/code&gt;. Il existe une autre datasource, appelée &lt;code&gt;nocloud-net&lt;/code&gt; qui permet de faire presque la même chose: avec &lt;code&gt;nocloud-net&lt;/code&gt;, on ne passe pas un disque à Cloud Init, Packer exposera via HTTP un répertoire contenant le fichier &lt;code&gt;user-data&lt;/code&gt;. Ce dernier sera récupéré par Cloud Init lors du démarrage de la machine virtuelle.&lt;br&gt;
Attention, &lt;code&gt;nocloud-net&lt;/code&gt; n&amp;#8217;est pas supportée sur toutes les versions de Cloud Init.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_suite&quot;&gt;La suite&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous avons vu dans cet article comment construire des images. Dans le prochain article, nous créerons notre infrastructure (machines virtuelles, réseau&amp;#8230;&amp;#8203;) avec &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 21 Nov 2019 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-11-20-un-exemple-infra-intro/
</guid>
<link>
https://mcorbin.fr/posts/2019-11-20-un-exemple-infra-intro/
</link>
<title>
Un exemple d'infrastructure automatisée et scalable
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela faisait longtemps que je voulais écrire une série d&amp;#8217;articles sur le déploiement d&amp;#8217;une infrastructure et la gestion des applications qui tournent dessus, le tout répondant à certains critères:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Déploiement automatisé, que ce soit pour l&amp;#8217;infrastructure en elle même ou bien pour les applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pouvant monter en charge si besoin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Utilisant un certain nombre d&amp;#8217;outils qui se combinent bien ensemble.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chaque article sera consacré à une partie de l&amp;#8217;infrastructure ou à un sujet plus &quot;applicatif&quot;: gestion de machines virtuelles, déploiement de l&amp;#8217;infrastructure, intégration continue, packaging et déploiement des applications, load balancing, monitoring, métriques&amp;#8230;&amp;#8203; j&amp;#8217;essayerais aussi de justifier mes choix, en pesant le pour et le contre par rapport à d&amp;#8217;autres produits que ceux présentés.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout cela va probablement prendre pas mal de temps. Je prendrais peut être parfois quelques raccourcis si je vois qu&amp;#8217;une section me prend trop de temps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_et_ce_sera_déployé_où&quot;&gt;Et ce sera déployé où ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous déploierons l&amp;#8217;infrastructure chez un cloud provider.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Toute l&amp;#8217;infrastructure sera déployée sur &lt;a href=&quot;https://www.exoscale.com/&quot;&gt;Exoscale&lt;/a&gt;, qui est aussi mon employeur (vous allez dire que je prêche pour ma paroisse).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, si vous recherchez un cloud provider européen avec du bon tooling, un catalogue produit sympa, un support très réactif (car géré par l&amp;#8217;équipe tech), jetez un coup d&amp;#8217;oeil (et on a plusieurs nouveaux produits qui arrivent très prochainement, et une grosse roadmap pour 2020 :p).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les articles peuvent également s&amp;#8217;appliquer à d&amp;#8217;autres cloud en changeant quelques configurations dans certains outils, car je veillerais à rester général (et pour beaucoup d&amp;#8217;articles, le choix du cloud provider ne sera pas du tout important).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez retrouver dès à présent &lt;a href=&quot;https://mcorbin.fr/posts/2019-11-21-exemple-infra-vm-image/&quot;&gt;le premier article de cette série&lt;/a&gt;, qui concerne la gestion des images de nos futures machines virtuelles !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 20 Nov 2019 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-11-11-meuse-0.2.0/
</guid>
<link>
https://mcorbin.fr/posts/2019-11-11-meuse-0.2.0/
</link>
<title>
What's new in Meuse 0.2.0
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I released today the version 0.2.0 of &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Meuse&lt;/a&gt;, an alternative registry for the Rust programming language. A lot of improvements have been made, and new features (in beta :p) are availables in this release: S3 backend for crates binary files, and &lt;code&gt;crates.io&lt;/code&gt; mirroring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_new_things_in_this_release&quot;&gt;New things in this release&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_refactoring_and_bugfixes&quot;&gt;Refactoring and bugfixes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I did a lot of refactoring in the project internals. It&amp;#8217;s not finished yet, but the code looks better now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also fixed a couple of bugs, and also made a few improvements (for example in error handling).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_monitoring&quot;&gt;Monitoring&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meuse exposes a Prometheus endpoint since the release &lt;code&gt;0.1.0&lt;/code&gt;. This release adds more metrics: JVM metrics and the database connection pool metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_multiple_backends_for_the_crates_binary_files&quot;&gt;Multiple backends for the crates binary files&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I refactored the project to be able to easily add more backends for crates binary files, and added a S3 backend. This will allow you to store your crates binary files on any S3-compatible storage (I made my tests with SOS, the S3-compatible storage provided by &lt;a href=&quot;https://www.exoscale.com/&quot;&gt;Exoscale&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_crates_io_mirroring&quot;&gt;crates.io mirroring&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meuse is now able to mirror &lt;code&gt;crates.io&lt;/code&gt;, and will also cache crates binary files downloaded from &lt;code&gt;crates.io&lt;/code&gt; on its own store (so on its filesystem or on S3).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Using Meuse alongside crates.io&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was already possible to use &lt;code&gt;Meuse&lt;/code&gt; alongside &lt;code&gt;crates.io&lt;/code&gt;. You could for example upload private crates on Meuse, and these crates could have dependencies on crates stored on &lt;code&gt;crates.io&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To do that, you should configure the &lt;code&gt;allowed-registries&lt;/code&gt; parameter of your private registry index (cf &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/2141-alternative-registries.md#registry-index-format-specification&quot;&gt;the alternative registry RFC&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But we can do better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;crates.io mirroring&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meuse can download crates files from &lt;code&gt;crates.io&lt;/code&gt;, and then cache them on its own store. The next time you download this crate, &lt;code&gt;crates.io&lt;/code&gt; will not be contacted at all, Meuse will serve the crate from its store directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you store your crates files on the &lt;code&gt;filesystem&lt;/code&gt;, Meuse will write the cached crates in a directory named &lt;code&gt;.crates.io&lt;/code&gt;, which will be automatically created at the root of the store directory. If the crates are stored in a S3-compatible storage, the file path will be prefixed by &lt;code&gt;.crates.io&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/meuse_020/cargo_mirror1.jpg&quot; alt=&quot;cargo mirror explanation&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To find how to create a &lt;code&gt;crates.io&lt;/code&gt; mirror, please check the &lt;a href=&quot;https://meuse.mcorbin.fr/installation/mirroring/&quot;&gt;Meuse documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next Meuse release, I will add an endpoint to force the caching of a crate. Like that, you will be able to cache crates from &lt;code&gt;crates.io&lt;/code&gt; in Meuse even if you don&amp;#8217;t run &lt;code&gt;cargo build&lt;/code&gt; for your project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_auth_issues&quot;&gt;Auth issues&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;cargo&lt;/code&gt; does not pass the authentication token for the &lt;code&gt;cargo search&lt;/code&gt; command, and when a crate is downloaded. This means that I cannot authenticate the user for these actions in Meuse (cf &lt;a href=&quot;https://github.com/rust-lang/cargo/issues/7091&quot;&gt;this issue&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next steps for Meuse are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More refactoring: there are several things that I don&amp;#8217;t like in the codebase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New features around &lt;code&gt;crates.io&lt;/code&gt; mirroring.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More metrics (especially for the S3 client).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better documentation (in the code and in the documentation website).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A CLI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A read-only frontend.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, don&amp;#8217;t hesitate to test the project, report issues, and give me feedbacks. It would be very helpful for me.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Mon, 11 Nov 2019 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-09-10-machines-virtuelles/
</guid>
<link>
https://mcorbin.fr/posts/2019-09-10-machines-virtuelles/
</link>
<title>
Slides: Gérez les images de vos machines virtuelles
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai récemment donné un talk au Café Devops de Lyon à propos de la gestion des images pour machines virtuelles. Vous pouvez retrouver les slides &lt;a href=&quot;https://mcorbin.fr/pdf/slides/virtual_machines.pdf&quot;&gt;ici&lt;/a&gt; ;)&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>
Tue, 10 Sep 2019 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-07-11-repl-driven-development/
</guid>
<link>
https://mcorbin.fr/posts/2019-07-11-repl-driven-development/
</link>
<title>
REPL Driven Development et gestion des états
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lorsque l&amp;#8217;on code en Clojure (mais pas que), il y a un outil formidable pour nous accompagner: le REPL. Dans cet article, je parlerais de programmation intéractive et de la gestion des états dans une application&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_programmation_intéractive&quot;&gt;Programmation intéractive&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_présentation&quot;&gt;Présentation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Clojure (et dans les langages de la famille des LISP en général), nous développons avec un REPL. On pourrait définir le REPL comme un interpréteur évolué, en permanence connecté à notre code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici par exemple à quoi ressemble mon écran lorsque je code en Clojure (Emacs ftw):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/repl/repl-emacs.png&quot; alt=&quot;mon environnement de développement&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On peut voir ici que j&amp;#8217;ai sur le côté gauche de mon écran mon REPL, et sur le côté droit mon code. Je peux à tout moment intéragir avec mon REPL, comme par exemple &quot;charger&quot; le code de mon projet dans le REPL et exécuter le code. Je peux également définir des fonctions, variables temporaires etc&amp;#8230;&amp;#8203; directement dans le REPL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quand je parles du REPL à d&amp;#8217;autres développeurs, j&amp;#8217;ai souvent des réflexions du type &lt;code&gt;mais des interpréteurs il y en a dans tous les langages !&lt;/code&gt;. Effectivement, même Java a maintenant un REPL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pourtant, vous vous voyez coder avec le REPL en Java ? Charger un &lt;a href=&quot;https://mcorbin.fr/posts/2018-02-08-spring-generateur/&quot;&gt;programmes Spring Boot&lt;/a&gt; dans un REPL puis intéragir avec ? Taper du code ultra verbeux dans le REPL ? Ceci est de la science fiction, et n&amp;#8217;arrivera jamais.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_mon_workflow&quot;&gt;Mon workflow&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lorsque je code en Clojure, mon workflow est le suivant:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Je réfléchis à mon problème en écrivant du code et en le chargeant dans le REPL. J&amp;#8217;intéragis avec celui ci via le REPL (j&amp;#8217;appelle les fonctions que j&amp;#8217;écris avec certains paramètres par exemple).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;J&amp;#8217;écris des tests, et je fignole, toujours en utilisant le REPL. L&amp;#8217;exécution de mes tests est &lt;code&gt;ultra rapide&lt;/code&gt;, car ma JVM/mon application est déjà démarrée.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Intéragir avec son code via le REPL ne remplace donc pas les tests. Par contre, la boucle de feedback sur ce que l&amp;#8217;on fait est ultra rapide. J&amp;#8217;écris une fonction, je peux immédiatement jouer avec.&lt;br&gt;
Je ne pratique donc pas le TDD lorsque je fais du Clojure, je ne commence pas à écrire mes tests mais j&amp;#8217;utilise le REPL pour définir la structure de mon programme, puis je les écris.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le fait que Clojure soit un langage où la syntaxe est très concise et où l&amp;#8217;immuabilité est très présente joue aussi. Je n&amp;#8217;aurais pas la même expérience dans un langage verbeux ou pleins d&amp;#8217;états.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, parlons d&amp;#8217;états.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_gestion_des_états&quot;&gt;Gestion des états&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_composants&quot;&gt;Composants&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, en Clojure pratiquement tout est immuable, ce qui est génial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais dans un programme, j&amp;#8217;ai quand même besoin d&amp;#8217;états (faut bien faire des entrées/sorties un jour ou l&amp;#8217;autre pour intéragir avec). Prenons par exemple &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Meuse&lt;/a&gt;, mon projet de registry Rust sur lequel je travaille actuellement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce projet est une application web classique. Voici les composants devant garder un état/faisant des effets de bords dans cette application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Le chargement de ma configuration (un fichier yaml).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un serveur HTTP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un threadpool de connexion vers une base de données.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un composant envoyant des commandes Git, et qui possède un lock.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans d&amp;#8217;autres cas, j&amp;#8217;aurais pû avoir un cache, ou d&amp;#8217;autres threadpools&amp;#8230;&amp;#8203; Mais finalement, il y a peu de composants avec état dans un programme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On remarque facilement que ces états ont des dépendances. Mon composant &lt;code&gt;database&lt;/code&gt; a besoin de sa configuration, le composant &lt;code&gt;http&lt;/code&gt; a aussi besoin de sa configuration mais aussi du composant &lt;code&gt;database&lt;/code&gt; et &lt;code&gt;git&lt;/code&gt;. Le composant &lt;code&gt;git&lt;/code&gt; a lui même besoin d&amp;#8217;une configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/repl/components_repl.png&quot; alt=&quot;hiérarchie de composants&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les dépendances de mon application peuvent donc se voir comme un arbre.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Java, c&amp;#8217;est généralement via l&amp;#8217;injection de dépendance que les composants sont instanciés dans le bon ordre, et &quot;stockés&quot; dans un conteneur de façon un peu magique&lt;br&gt;
En parlant de cela, je trouve dommage que l&amp;#8217;écosystème Java pousse à cette pratique (&lt;code&gt;@inject&lt;/code&gt; moi mes objets et après moi le déluge), là où quelques &lt;code&gt;new&lt;/code&gt; et des constructeurs bien écrits suffiraient à résoudre le problème. Bref.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Clojure, il est possible de définir ces composants via certaines librairies, comme par exemple &lt;a href=&quot;https://github.com/stuartsierra/component&quot;&gt;component&lt;/a&gt;, &lt;a href=&quot;https://github.com/tolitius/mount&quot;&gt;mount&lt;/a&gt; ou &lt;a href=&quot;https://github.com/weavejester/integrant&quot;&gt;integrant&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sans rentrer dans les détails de chaque librairie, chacune permet à sa manière de définir cette hiérarchie de composant.&lt;br&gt;
Chaque librairie permet aussi de facilement démarrer votre système (un système étant la somme de vos composants). Démarrer votre système équivant donc à démarrer votre application. Il est également possible de stopper le système, de le démarrer partiellement, et même de remplacer un composant par un mock pour les tests !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et bien sûr, tout cela est faisable via le REPL. Un exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Je démarre mon application via le REPL. Mon application est maintenant active. J&amp;#8217;ajoute une nouvelle route dans mon routeur HTTP, &quot;charge&quot; mon code dans le REPL. La route est tout de suite active !&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;J&amp;#8217;implémente le code de ma nouvelle route. A tout moment, je peux recharger mon code, et celui ci sera actif. Je peux également expérimenter facilement via le REPL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;j&amp;#8217;écris des tests, qui comme dit précédemment s&amp;#8217;exécutent à toute vitesse vu que ma JVM tourne déjà.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est possible de modifier n&amp;#8217;importe quelle partie de mon programme &lt;code&gt;à chaud&lt;/code&gt; à tout moment. Bref, mon confort de développement est énorme (je n&amp;#8217;ai rien trouvé de semblable en Python/Rust/Go/Java/C etc&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;il est d&amp;#8217;ailleurs même possible d&amp;#8217;avoir un port ouvert avec un REPL pour vos applications même en prod si vous le voulez (bien que cela soit une grosse faille de sécurité). Mais c&amp;#8217;est possible, et là aussi n&amp;#8217;importe quelle fonction pourrait être patchée à chaud. Des gens ont fait des choses formidables comme cela, lisez donc ça par exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;An impressive instance of remote debugging occurred on NASA’s 1998 Deep Space 1 mission. A half year after the space craft launched, a bit of Lisp code was going to control the spacecraft for two days while conducting a sequence of experiments. Unfortunately, a subtle race condition in the code had escaped detection during ground testing and was already in space. When the bug manifested in the wild–100 million miles away from Earth–the team was able to diagnose and fix the running code, allowing the experiments to complete.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_etat_du_repl&quot;&gt;Etat du REPL&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il me reste un dernier soucis. Le REPL garde son état.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaginons que je démarre une application. Je vais pouvoir comme dit précédemment modifier à chaud mon programme, ou définir dans mon REPL des variables ou des fonctions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Problème: il est facile de se perdre, et d&amp;#8217;avoir un doute: est ce que le code dans mon fichier reflète le code qui tourne dans mon REPL ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour cela, il existe des outils comme &lt;a href=&quot;https://github.com/clojure/tools.namespace&quot;&gt;clojure.tools.namespace&lt;/a&gt;. Ces outils, combinés aux librairies de gestion de composants décrites précédemment, permettent de recharger proprement (et quasi instantanément) l&amp;#8217;état de votre application. Une fois rechargé, vous avez la garantie que votre REPL est synchronisé avec votre code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_arrêt_d_un_système&quot;&gt;Arrêt d&amp;#8217;un système&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;je parle beaucoup de stopper, ou recharger un système. Cela implique une chose: chaque composant stateful doit pouvoir être démarré et stoppé &lt;code&gt;proprement&lt;/code&gt;.&lt;br&gt;
Il arrive encore trop souvent de voir des programmes ne pouvant pas se stopper de manière propre. Cette approche n&amp;#8217;est pas possible si l&amp;#8217;on veut faire du REPL Driven Development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est d&amp;#8217;ailleurs une difficulté, même en Clojure. &lt;a href=&quot;https://github.com/ztellman/aleph/issues/365&quot;&gt;Certains bugs&lt;/a&gt; peuvent vous empêcher de stopper proprement certains composants. Cela casse donc votre workflow de développement. La bonne chose, c&amp;#8217;est que cela nous force à faire des trucs propres pour que ça marche ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette façon de développer a été une des choses qui m&amp;#8217;a fait accrocher à Clojure. Cette architecture sous forme de composants, le fait de toujours pouvoir stopper un système gracieusement&amp;#8230;&amp;#8203; est quelque chose qu&amp;#8217;il est selon moi nécessaire d&amp;#8217;appliquer quel que soit le langage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si Clojure vous intéresse, allez donc faire un tour sur &lt;a href=&quot;https://tour.mcorbin.fr/&quot;&gt;https://tour.mcorbin.fr/&lt;/a&gt; :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 11 Jul 2019 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-06-28-ansible-assemble-config/
</guid>
<link>
https://mcorbin.fr/posts/2019-06-28-ansible-assemble-config/
</link>
<title>
Ansible tip: configuration, assemble and idempotence
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il arrive parfois que vous ayez à configurer avec Ansible un logiciel n&amp;#8217;acceptant qu&amp;#8217;un fichier de configuration, et où il est impossible d&amp;#8217;inclure un autre fichier ou dossier depuis ce fichier.
Je présenterais ici une astuce pour gérer cela avec Ansible et le module &lt;code&gt;assemble&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_problème&quot;&gt;Le problème&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons par exemple &lt;code&gt;haproxy&lt;/code&gt;. &lt;span class=&quot;line-through&quot;&gt;Il est impossible d&amp;#8217;inclure depuis le fichier de configuration principal d&amp;#8217;autres fichiers ou dossiers (bien qu&amp;#8217;il soit possible de passer plusieurs fichiers de configuration en passant plusieurs fois le paramètre &lt;code&gt;-f`&lt;/code&gt; à la commande de lancement).&lt;/span&gt;&lt;br&gt;
&lt;strong&gt;EDIT&lt;/strong&gt;: faux ! Il est en fait possible de passer un répertoire à HAProxy. Mais nous utiliserons quand même HAProxy comme exemple dans cet article ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe une solution élégante avec Ansible permettant de découper cette configuration en plusieurs fichiers dans un dossier, tout en ayant un déploiemnt idempotent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_solution&quot;&gt;La solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous allons créer plusieurs fichiers dans un dossier, puis les concaténer pour obtenir le fichier final.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On commence par supprimer ledit dossier, par exemple &lt;code&gt;/etc/haproxy/haproxy.d&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;- name: delete haproxy.d directory
  become: true
  file:
    path: /etc/haproxy/haproxy.d
    state: absent
  changed_when: false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notez le &lt;code&gt;changed_when: false&lt;/code&gt;: Ansible ne considérera pas qu&amp;#8217;il y a eu un changement si le dossier est effectivement supprimé.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Puis on recrée ce répertoire:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;- name: create haproxy.d directory
  become: true
  file:
    path: /etc/haproxy/haproxy.d
    state: directory
    owner: root
    group: root
    mode: 0755
  changed_when: false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Là aussi, on a un &lt;code&gt;changed_when: false&lt;/code&gt;. A cette étape du rôle, on a donc la garantie d&amp;#8217;avoir un dossier &lt;code&gt;/etc/haproxy/haproxy.d&lt;/code&gt; vide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite, on utilise la directive &lt;code&gt;template&lt;/code&gt; pour déployer dans ce nouveau dossier nos fichiers de configuration. Attention, il faut que les fichiers soient ordonnés par ordre alphabétique. Par exemple, je pourrais préfixer chaque fichier par un numéro:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;haproxy_configuration_templates:
  - src: haproxy/haproxy.cfg.j2
    dest: 01_haproxy.cfg
  - src: haproxy/frontend.j2
    dest: 02_frontend.cfg
  - src: haproxy/blog.j2
    dest: 03_blog.cfg
  - src: haproxy/meuse.j2
    dest: 03_meuse.cfg
  - src: haproxy/tour.j2
    dest: 03_tour.cfg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite, je template ces fichiers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;- name: template haproxy configuration in haproxy.d
  become: true
  template:
    src: &quot;{{ item.src }}&quot;
    dest: &quot;/etc/haproxy/haproxy.d/{{ item.dest }}&quot;
    owner: root
    group: root
    mode: 0644
  with_items: &quot;{{ haproxy_configuration_templates }}&quot;
  changed_when: false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici aussi on a un &lt;code&gt;changed_when: false&lt;/code&gt;, ce qui est très important. Cette tâche ne provoquera aucun changement lors de son exécution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite, je concatène tous ces fichiers ensemble en utilisant &lt;code&gt;assemble&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- name: assemble haproxy.d configuration
  become: true
  assemble:
    src: /etc/haproxy/haproxy.d
    dest: /etc/haproxy/haproxy.cfg
    owner: root
    group: root
    mode: 0644
  notify: haproxy | reload&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un handler me permet de reload HAProxy en cas de changement. &lt;code&gt;assemble&lt;/code&gt; ne provoquera un changement que si le résultat de l&amp;#8217;assemblage des fichiers est différent de l&amp;#8217;état existant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et c&amp;#8217;est fini.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si une configuration identique est déployée, les &lt;code&gt;changed_when: false&lt;/code&gt; feront qu&amp;#8217;Ansible ne détectera pas de changement. Si une configuration différente est déployée, on aura un changement sur la tâche &lt;code&gt;assemble&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le fait de supprimer et recréer le dossier contenant les fichiers est obligatoire pour gérer le cas d&amp;#8217;un fichier template qui serait supprimé de la liste des fichiers à déployer. Dans ce cas, on ne veut pas avoir des fichiers non voulus dans &lt;code&gt;/etc/haproxy/haproxy.d&lt;/code&gt; venant d&amp;#8217;un ancien déploiement (d&amp;#8217;où le nettoyage).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Fri, 28 Jun 2019 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-06-13-one-year-of-go/
</guid>
<link>
https://mcorbin.fr/posts/2019-06-13-one-year-of-go/
</link>
<title>
One year of Golang
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela fait maintenant plus d&amp;#8217;un an que j&amp;#8217;ai l&amp;#8217;occasion d&amp;#8217;utiliser Golang professionnellement (bien que j&amp;#8217;en faisais déjà un peu avant cela sur des projets Open Source). je décrirais dans cet article mon ressenti actuel sur le langage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_contexte&quot;&gt;Le contexte&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai rejoint en Mai 2018 &lt;a href=&quot;https://www.exoscale.com/&quot;&gt;Exoscale&lt;/a&gt;, où je travaille notamment sur le développement et la maintenance de certains produits.
Ce n&amp;#8217;est pas un secret, nous sommes à Exoscale de gros utilisateurs de &lt;a href=&quot;https://clojure.org/&quot;&gt;Clojure&lt;/a&gt;, mais nous avons aussi pas mal de Go pour des services orientés &quot;système&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus, en tant que cloud provider, il est important de s&amp;#8217;intégrer dans l&amp;#8217;écosystème &quot;cloud&quot; existant. Aujourd&amp;#8217;hui, cet écosystème est en Go. Les outils comme Terraform, Packer, l&amp;#8217;écosystème conteneur et Kubernetes&amp;#8230;&amp;#8203; tout est écrit en Go. Les intégrations avec ces produits sont donc logiquement écrites en Go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je suis encore loin d&amp;#8217;être un expert sur Go (n&amp;#8217;hésitez pas à me contacter si vous n&amp;#8217;êtes pas d&amp;#8217;accord avec quelque chose dans cet article), mais je voulais partager mon expérience avec le langage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_trucs_cools&quot;&gt;Les trucs cools&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_l_écosystème_et_la_librairie_standard_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;L&amp;#8217;écosystème et la librairie standard&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le gros plus de Go selon moi est son écosystème. Comme dit précédemment, si vous voulez vous intégrer dans l&amp;#8217;écosystème &quot;cloud&quot;, vous n&amp;#8217;aurez pas vraiment le choix que de partir sur Go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous avez besoin d&amp;#8217;écrire des daemons intéragissant avec le système et le réseau, là aussi vous y trouverez votre compte.&lt;br&gt;
Par exemple, des projets comme &lt;a href=&quot;https://github.com/vishvananda/netlink&quot;&gt;netlink&lt;/a&gt; ou &lt;a href=&quot;https://github.com/google/netstack&quot;&gt;netstack&lt;/a&gt; sont très utiles lorsque vous avez à intéragir avec le réseau. Vous pouvez également vous intégrer avec systemd avec &lt;a href=&quot;https://github.com/coreos/go-systemd&quot;&gt;go-systemd&lt;/a&gt;.&lt;br&gt;
Il est également simple d&amp;#8217;écrire de petits serveurs TCP, UDP ou HTTP en Go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De manière générale, l&amp;#8217;écosystème Go est assez complet. On n&amp;#8217;est plus aujourd&amp;#8217;hui sur un langage de niche.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La librairie standard est également riche et complète.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_gofmt_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;gofmt&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://golang.org/cmd/gofmt/&quot;&gt;gofmt&lt;/a&gt; est le formatter de Go. J&amp;#8217;aime le fait de n&amp;#8217;avoir pas à me poser de questions sur le style à adopter (et l&amp;#8217;outil s&amp;#8217;intègre très bien avec les IDE). Pas grand chose d&amp;#8217;autres à dire sur ce sujet ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_temps_de_compilation_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Temps de compilation&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ça compile vite, c&amp;#8217;est toujours intéressant.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_performances_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Performances&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les performances du langage sont bonnes, et il est possible d&amp;#8217;écrire des services très peu gourmands. C&amp;#8217;est assez plaisant de pouvoir écrire de petits daemons consommant moins de 15MB de RAM.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_le_package_time_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;le package time&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;aime comment le temps est géré en Golang. C&amp;#8217;est généralement un point noir pour un certain nombre de langages, mais en Go c&amp;#8217;est facile et assez intuitif. Jetez un oeil à la &lt;a href=&quot;https://golang.org/pkg/time/&quot;&gt;documentation&lt;/a&gt; si ce sujet vous intéresse.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_ok_mais_sans_plus&quot;&gt;OK mais sans plus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_multithreading_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Multithreading&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On présente souvent Golang comme un langage &lt;code&gt;génial&lt;/code&gt; pour le multithreading. Je ne suis que moyennement d&amp;#8217;accord. Vous avez en gros à votre disposition les &lt;a href=&quot;https://tour.golang.org/concurrency/1&quot;&gt;goroutines&lt;/a&gt;, et c&amp;#8217;est tout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Parlons tout d&amp;#8217;abord de concurrence. En Go, vous n&amp;#8217;avez pas de structures de données concurrentes, pas de structures de données &lt;code&gt;compare and set&lt;/code&gt; (les &lt;code&gt;atom&lt;/code&gt; en Clojure), pas de software transactional memory&amp;#8230;&amp;#8203; Les programmes Go sont remplis de mutex.
Cela est assez fâcheux (pas la peine d&amp;#8217;expliquer les problèmes qu&amp;#8217;apportent les locks lors de l&amp;#8217;écriture de programmes conséquents et complexes), mais il n&amp;#8217;y a pas vraiment d&amp;#8217;autres solutions lorsque l&amp;#8217;on a besoin d&amp;#8217;avoir des structures de données partagées entre plusieurs threads en Go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bien sûr, tout Gopher digne de ce nom nous dira à se moment que nous ne respectons pas la philosophie de Golang et que nous devons réécrire notre programme pour utiliser des goroutines et des channels. Malheureusement ce n&amp;#8217;est pas simple, et je ne dois pas être le seul à le penser vu la quantité impressionnante de résultats lorsqu&amp;#8217;on recherche l&amp;#8217;utilisation de Mutex dans de gros projets open source Go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, parlons des goroutines et des channels. C&amp;#8217;est en effet un outil intéressant, mais il est &lt;code&gt;très&lt;/code&gt; facile en les utilisant de :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Leak des goroutines, c&amp;#8217;est à dire en démarrer mais d&amp;#8217;oublier de les stopper. On se retrouve donc avec de plus en plus de goroutines, jusqu&amp;#8217;au l&amp;#8217;éventuel explosion du programme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De se faire deadlock. Cela peut facilement arriver lorsque plusieurs goroutines attendent sur des channels. Si vous ratez votre coup, vous pouvez vous retrouver avec toutes les goroutines en attente, et votre programme est bloqué.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe des outils pour limiter en partie ces problèmes, comme le &lt;a href=&quot;https://blog.golang.org/race-detector&quot;&gt;race detector&lt;/a&gt; ou encore la librairie tomb, &lt;a href=&quot;https://mcorbin.fr/posts/2018-12-03-golang-tomb/index.html&quot;&gt;sur lequel j'ai déjà écrit un article&lt;/a&gt;. Mais malgré cela, les goroutines ne sont pas si simples que cela.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce qui me surprend toujours, c&amp;#8217;est que le concept de goroutines existe depuis longtemps et est disponible dans de nombreux langages, langages qui fournissent également généralement de nombreux autres moyens pour le multithreading. j&amp;#8217;ai du mal à voir la &quot;révolution&quot; que serait Go dans ce domaine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_courbe_d_apprentissage_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Courbe d&amp;#8217;apprentissage&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go est simple à apprendre. Le langage est pauvre et sa syntaxe réduite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Contrairement à beaucoup de monde, je ne vois pas vraiment ça comme une bonne chose: le langage est tellement réduit que ça en devient handicapant.
Je pense également qu&amp;#8217;il faut du temps pour s&amp;#8217;habituer aux bonnes pratiques et éviter certains pièges. (cf le reste de l&amp;#8217;article).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_défauts_du_langage&quot;&gt;Les défauts du langage&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_le_typesystem_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Le typesystem&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce sujet a déjà été débattu en long, en large et en travers, mais je vais en remettre une couche.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;aime Clojure entre autre parce qu&amp;#8217;il est dynamiquement typé. Quand je code en Clojure, les types ne me manquent pas, et de manière générale je ne pense pas qu&amp;#8217;un typage fort soit nécessaire pour réaliser des programmes corrects (surtout si à côté vous avez l&amp;#8217;immutabilité, des structures de données géniales, la programmation fonctionnelle &amp;#8230;&amp;#8203; Bref, ce que fournit Clojure).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais je sais aussi apprécier les langages fortement typés, comme Ocaml ou Rust. Il y a une certaine beauté dans les types comme &lt;code&gt;Result&lt;/code&gt; ou &lt;code&gt;Option&lt;/code&gt;, les algebraic data types, le pattern matching&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Golang se trouve dans la pire catégorie possible: statiquement typé mais avec un typesystem moisi.
Les types ne seront pas là pour vous aider, vous lutterez contre le typesystem. Vous n&amp;#8217;aurez pas accès aux generics, pas d&amp;#8217;algebraic data type, pas de pattern matching, pas de type Result/Option&amp;#8230;&amp;#8203; Bref, les types ne vous aideront pas tant que ça. Un exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je veux définir un type contenant les jours de la semaine. En Rust (que je n&amp;#8217;ai pas pratiqué depuis longtemps d&amp;#8217;ailleurs), j&amp;#8217;écrirais:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub enum Weekday {
	Monday
	Tuesday
	Wednesday
	Thursday
	Friday
	Saturday
        Sunday
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pourrais ensuite utiliser par exemple du pattern matching sur une variable de ce type, et j&amp;#8217;aurais la garantie à la compilation que tous les jours possibles sont traités par mon programme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Go (solution venant de la doc officielle), voici comment faire:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;type Weekday int

const (
	Sunday Weekday = iota
	Monday
	Tuesday
	Wednesday
	Thursday
	Friday
	Saturday
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;iota&lt;/code&gt; indique que ma valeur &lt;code&gt;Sunday&lt;/code&gt; est initialisée à 0, et que les jours suivant vaudront &lt;code&gt;jours précédents + 1&lt;/code&gt; (donc &lt;code&gt;Monday&lt;/code&gt; = 1, &lt;code&gt;Tuesday&lt;/code&gt; = 2&amp;#8230;&amp;#8203;). Bien sûr, il sera facile de se retrouver dans des cas comme ça:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func main() {
	var day Weekday = 10
	fmt.Printf(&quot;It compiles ! %d&quot;, day)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il n&amp;#8217;y aura aucune vérification ici que toutes les valeurs possibles de votre type &lt;code&gt;Weekday&lt;/code&gt; (qui n&amp;#8217;est qu&amp;#8217;un alias pour &lt;code&gt;int&lt;/code&gt; finalement) soient traitées. Pour être franc, ma première réaction quand j&amp;#8217;ai vu le système de iota a été:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/one_year_go/wtf_is_this.jpg&quot; alt=&quot;wtf is this shit&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_les_valeurs_par_défaut_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Les valeurs par défaut&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Go, chaque type a sa valeur par défaut, et combiné au typesystem décrit précédemment, c&amp;#8217;est horrible. Je vais expliquer cela par un exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mettons que je veuille écrire un client Go pour &lt;a href=&quot;https://riemann.io/&quot;&gt;Riemann&lt;/a&gt;. Un &lt;code&gt;event&lt;/code&gt; Riemann possède un certain nombre de champ, tous optionnels.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Rust, la définition d&amp;#8217;un event donnerait à peu près:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[derive(Debug)]
pub enum Metric {
    Int64(i64),
    Double(f64),
    Float(f32)
}

type State = String;
type Service = String;
type Host = String;
type Description = String;
type Tag = String;
type Tags = Vec&amp;lt;Tag&amp;gt;;
type Ttl = f32;
type AttrKey = String;
type AttrValue = String;
type Attributes = HashMap&amp;lt;AttrKey, AttrValue&amp;gt;;

#[derive(Debug)]
pub struct Event {
    pub time: Option&amp;lt;DateTime&amp;lt;Utc&amp;gt;&amp;gt;,
    pub state: Option&amp;lt;State&amp;gt;,
    pub service: Option&amp;lt;Service&amp;gt;,
    pub host: Option&amp;lt;Host&amp;gt;,
    pub description: Option&amp;lt;Description&amp;gt;,
    pub tags: Option&amp;lt;Tags&amp;gt;,
    pub ttl: Option&amp;lt;Ttl&amp;gt;,
    pub attributes: Option&amp;lt;Attributes&amp;gt;,
    pub metric: Option&amp;lt;Metric&amp;gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme on peut le voir, la struct &lt;code&gt;Event&lt;/code&gt; a tous ses champs optionnels. J&amp;#8217;utilise également des alias pour représenter chaque champ. Enfin, mon champ &lt;code&gt;Metric&lt;/code&gt; peut avoir différents formats via une enum; &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt; ou &lt;code&gt;Double&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comment réaliser cela en Go ? On aura probablement une struct &lt;code&gt;Event&lt;/code&gt; contenant des champs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Event struct {
// ???
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons par exemple le champ &lt;code&gt;description&lt;/code&gt;. On aura probablement dans notre struct &lt;code&gt;Description string&lt;/code&gt;. Sauf que&amp;#8230;&amp;#8203; la valeur par défaut d&amp;#8217;une &lt;code&gt;string&lt;/code&gt; est une chaîne vide (&lt;code&gt;&quot;&quot;&lt;/code&gt;).&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lorsque je vais sérialiser mon event (en ce que vous voulez: json, protobuf&amp;#8230;&amp;#8203;), comment puis-je faire la différence entre &lt;code&gt;l&amp;#8217;utilisateur veur que la valeur de la description soit une chaîne vide&lt;/code&gt; et &lt;code&gt;l&amp;#8217;utilisateur n&amp;#8217;a pas défini l&amp;#8217;attribut description, et donc ne veut pas l&amp;#8217;envoyer&lt;/code&gt; ? Et bah vous pouvez pas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ceci est un &lt;code&gt;ENORME&lt;/code&gt; problème. La première fois que vous le rencontrez, je vous garantis que vous pétez un plomb. Tout ça car le type Option n&amp;#8217;existe pas en Golang.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/one_year_go/flip_go.png&quot; alt=&quot;flip go&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai déjà rencontré plusieurs fois ce cas. Par exemple, un appel de mise à jour d&amp;#8217;une API acceptait une liste de valeurs, et cette liste pouvait être vide (et dans ce cas côté serveur la liste était vide aussi).
Sauf qu&amp;#8217;il était &lt;code&gt;impossible&lt;/code&gt; de faire la distinction côté Golang entre une liste vide assignée par l&amp;#8217;utilisateur, et la liste vide de la valeur par défaut du type liste de Golang.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais revenons à notre client Riemann. On voit dans le type Rust que le champ &lt;code&gt;Metric&lt;/code&gt; peut avoir plusieurs valeurs. La solution naive en Go serait:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;Metricf float3
Metricd float64
Metrici int64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sauf que là aussi, toutes ces valeurs auront &lt;code&gt;0&lt;/code&gt; par défaut, et là encore aucun moyen de faire la distinction entre ce que veux l&amp;#8217;utilisateur et la valeur par défaut de golang. Donc vous finissez par faire:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;Metricf interface{} // Could be Int, Float32, Float64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le type &lt;code&gt;interface{}&lt;/code&gt; étant &lt;code&gt;nil&lt;/code&gt; par défaut. Et puis tant qu&amp;#8217;à faire des trucs dégueulasses:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;if event.Metric != nil {
	switch reflect.TypeOf(event.Metric).Kind() {
	case reflect.Int, reflect.Int32, reflect.Int64:
		e.MetricSint64 = pb.Int64(reflect.ValueOf(event.Metric).Int())
	case reflect.Float32:
		e.MetricD = pb.Float64(reflect.ValueOf(event.Metric).Float())
	case reflect.Float64:
		e.MetricD = pb.Float64(reflect.ValueOf(event.Metric).Float())
	case reflect.Uint, reflect.Uint32, reflect.Uint64:
		e.MetricSint64 = pb.Int64(int64(reflect.ValueOf(event.Metric).Uint()))
	default:
		return nil, fmt.Errorf(&quot;Metric of invalid type (type %v)&quot;,
			reflect.TypeOf(event.Metric).Kind())
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;interface{}&lt;/code&gt; est d&amp;#8217;ailleurs un type largement utilisé en Go (faites quelques recherches sur vos projets Go favoris&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bref, le typesystem combiné aux valeurs par défaut est un cauchemar. Une solution est parfois d&amp;#8217;utiliser des pointeurs (les pointeurs pouvant être &lt;code&gt;nil&lt;/code&gt;), mais ça fait un peu mal de pourrir sa struct avec des pointeurs juste parce que le langage a été mal pensé.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_les_pointeurs_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Les pointeurs&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, parlons en des pointeurs. Je cherche encore l&amp;#8217;intérêt d&amp;#8217;avoir des pointeurs dans un langage ayant un garbage collector. Il aurait été selon moi beaucoup plus simple d&amp;#8217;avoir un comportement des struct &quot;à la Java&quot; (passage par référence), et un passage par valeur pour certains types primitifs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Combiné aux problèmes concernant les valeurs par défaut exprimés précédemment (les pointeurs pouvant etre &lt;code&gt;nil&lt;/code&gt;), cela rajoute une difficulté de plus au langage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_la_gestion_des_erreurs_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;La gestion des erreurs&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un programme Go ressemble généralement à ça:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;foo, err := doFoo()
if err != nil {
	return nil, err
}
bar, err := doBar(foo)
if err != nil {
	return nil, err
}
baz, err := doBaz(bar)
if err != nil {
	return nil, err
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le code est littéralement pollué par la gestion des erreurs. Outre l&amp;#8217;aspect visuel, il est très facile d&amp;#8217;oublier de retourner une erreur, ou bien de se tromper et de retourner &lt;code&gt;nil&lt;/code&gt; où on aurait dû retourner &lt;code&gt;err&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela est dû au fait que Golang, comme dit précédemment, ne dispose pas de type &lt;code&gt;Result&lt;/code&gt; nous permettant de vérifier à la compilation que nous avons géré tous les cas d&amp;#8217;erreurs possibles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go n&amp;#8217;a pas non plus d&amp;#8217;exceptions (je ne parlerais pas de &lt;code&gt;panic&lt;/code&gt;&amp;#8230;&amp;#8203;.), même si finalement le package &lt;a href=&quot;https://godoc.org/github.com/pkg/errors&quot;&gt;errors&lt;/a&gt; amène plus ou moins le concept de &quot;stacktraces&quot; à construire manuellement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_la_gestion_des_dépendances_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;La gestion des dépendances&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Après une période chaotique où différents outils se tiraient la bourre (&lt;code&gt;glide&lt;/code&gt;, &lt;code&gt;godep&lt;/code&gt;&amp;#8230;&amp;#8203;), on a maintenant les &lt;a href=&quot;https://blog.golang.org/using-go-modules&quot;&gt;modules&lt;/a&gt;.
Mais bon, le principe reste le même: on récupère du code depuis Github. Si vous êtes un mainteneur de librairie Go, ne supprimez pas trop vite votre repository Git ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai aussi eu des expériences complètement hallucinantes (avec explosion au runtime) en utilisant la directive &lt;code&gt;replace&lt;/code&gt; dans un &lt;code&gt;go.mod&lt;/code&gt; (cela permet de remplacer une dépendance par un fork par exemple), mais n&amp;#8217;ayant jamais trop réussi à reproduire je n&amp;#8217;irais pas plus loin sur le sujet.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_la_surcharge_de_fonction_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;La surcharge de fonction&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il n&amp;#8217;est pas possible de définir une fonction avec plusieurs implémentations, ce qui est assez frustrant (il n&amp;#8217;est par exemple pas possible de définir les fonctions &lt;code&gt;add(i int)&lt;/code&gt; et &lt;code&gt;add(i int, j int&lt;/code&gt;) dans le même programme).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est quelque chose que j&amp;#8217;utilise énormément dans d&amp;#8217;autres langages, et devoir nommer différement des fonctions faisant la même chose donne un code plus difficile à maintenir&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_programmation_fonctionnelle_immutabilité_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;programmation fonctionnelle, immutabilité&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus en plus de langages incorporent des éléments fonctionnnels. Mais pas Go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pas de fonctions de type &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;&amp;#8230;&amp;#8203; on fait de bonnes vieilles loop &lt;code&gt;for&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pas d&amp;#8217;immutabilité, vous vivrez dans un monde d&amp;#8217;effet de bord.&lt;br&gt;
Une erreur classique que tout le monde fait une fois dans sa vie:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func main() {
	toto := []int{1, 2, 3, 4, 5}
	for _, value := range toto {
		go func() {
			time.Sleep(1 * time.Second)
			fmt.Println(value)
		}()
	}
	time.Sleep(3 * time.Second)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le résultat de ce programme est:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5
5
5
5
5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En effet, la variable &lt;code&gt;value&lt;/code&gt; est mise à jour à chaque itération de la boucle ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme vous le voyez, j&amp;#8217;ai eu du mal à trouver des choses à dire dans la première section de l&amp;#8217;article.
Go est loin d&amp;#8217;être mon langage favoris. Pourtant, malgré ces défauts, ses avantages (écosystème, performances&amp;#8230;&amp;#8203;) font que je comprends tout à fait son utilisation aujourd&amp;#8217;hui dans certains contextes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quid des alternatives ? Si je veux un langage:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Compilant en binaire statique facilement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Garbage collecté (donc exit Rust, je peux me permettre un garbage collector dans mes projets et j&amp;#8217;ai moyennement envie de gérer des lifetimes et les whatmille types de pointeurs de Rust).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avec un écosystème correct (malheureusement, exit Ocaml, bien que j&amp;#8217;espère qu&amp;#8217;un jour cela changera.).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avec des performances correctes et prédictives.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il ne reste pas grand chose à part Go. Mais bon, voyons ce qui arrivera pour Go 2.0, peut être qu&amp;#8217;on aura des surprises.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 13 Jun 2019 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-05-28-ansible-common/
</guid>
<link>
https://mcorbin.fr/posts/2019-05-28-ansible-common/
</link>
<title>
Ansible: common roles considered harmful
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;English version &lt;a href=&quot;https://mcorbin.fr/pages/ansible-common/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
C&amp;#8217;est un classique des projets Ansible: un rôle appelé &lt;code&gt;common&lt;/code&gt; ou assimilé. Vous savez, ce genre de rôles où l&amp;#8217;angoisse vous saisit quand vous l&amp;#8217;ouvrez. Voyons ensemble les problèmes de ce type de rôle, et parlons de la granularité des rôles Ansible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_rôles_poubelles&quot;&gt;Les rôles poubelles&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce rôle &lt;code&gt;common&lt;/code&gt; est généralement un rôle poubelle. Tout ce que les gens ne savent pas où mettre va dans common. J&amp;#8217;ai travaillé dans plusieurs entreprises faisant du Ansible, et toutes avaient un rôle &lt;code&gt;common&lt;/code&gt;. J&amp;#8217;ai moi même contribué à un rôle common pendant quelque temps lors de ma première mission Ansible avant de le détruire définiivement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela donne généralement un rôle inmaintenable, faisant des tâches diverses et variées mais sans rapport entre elles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons un rôle &lt;code&gt;common&lt;/code&gt; fictif. Ce rôle ferait peut être&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;La mise à jour de la distribuction Linux (Debian par exemple).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La configuration des clés SSH de la machine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La configuration de base de syslog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La configuration de DHCP.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Avec le temps, ce rôle va grossir, de nouvelles choses finiront dedans, et le rôle finit par devenir du gloubi boulga.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ansible_common/gloubi_boulga.png&quot; alt=&quot;gloubi boulga&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Vous ne voulez pas en manger du gloubi boulga ? Vraiment pas ?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce genre de rôle doit être explosé en plusieurs rôles, cbaque rôle devant faire une action spécifique. Vous pourriez par exemple avoir à la place de ce rôle &lt;code&gt;common&lt;/code&gt; des rôles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;debian&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ssh&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;syslog&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dhcp&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce sera beaucoup plus lisible, testable et maintenable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_granularité_des_rôles&quot;&gt;La granularité des rôles&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finalement, tout est une question de granularité. Je suis partisan d&amp;#8217;un découpage fin des rôles Ansible, chaque rôle ayant une petite responsabilité (cette expérience vient de l&amp;#8217;écriture et de la maintenance de &lt;code&gt;centaines&lt;/code&gt; de rôles dans différents contextes).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Beaucoup de gens essayent de faire trop de choses au sein des rôles. Prenons par exemple un rôle installant &lt;code&gt;Kafka&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vous utilisez Collectd dans votre entreprise. Est ce que ce rôle doit également déployer la configuration Collectd nécessaire pour monitorer Kafka ? La réponse est non. Cela donnerait un rôle inutilisable dans un autre contexte où Collectd n&amp;#8217;est pas utilisé.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Est ce que la remontée des logs doit être gérée dans le rôle ? Là encore, je préfère externaliser (même si ça se discute pour logrotate/syslog), car peut être que j&amp;#8217;utilise syslog-ng, ou bien filebeat, ou logstash. Je ne veux pas lier ces technologies à ce rôle.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les rôles &lt;code&gt;doivent rester simple&lt;/code&gt;, faire une seule chose et la faire bien.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un autre exemple: Vous voulez déployer Kubernetes avec Ansible. A votre avis, c&amp;#8217;est quoi le plus maintenable et le plus réutilisable niveau rôle:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;common&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;master&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;worker&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ou bien:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;kubelet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kube-proxy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kube-dns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ssh&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;etcd&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;calico&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans le second cas, il sera beaucoup plus simple de maintenir de petits rôles. Cela simplifiera aussi les déploiements, et évitera les accidents de type &lt;code&gt;oups, j&amp;#8217;ai redéployé kube-dns mais en fait ça a aussi upgrade etcd&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_playbooks_à_la_rescousse&quot;&gt;Les playbooks à la rescousse&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a tendance à oublier les playbooks, et à ne les utiliser que pour appeler des rôles. Mais les playbooks sont également un super moyen d&amp;#8217;écrire des scénarios de déploiement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un rolling-upgrade d&amp;#8217;un cluster doit vivre dans un playbook, et non dans le rôle de l&amp;#8217;application par exemple. De même, pour de petites tâches comme lancer un &lt;code&gt;dist-upgrade&lt;/code&gt;, les playbooks font sens (pas la peine d&amp;#8217;utiliser un rôle pour ça).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gardez des rôles simples, et vous aurez un déploiement simple.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Tue, 28 May 2019 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-05-01-meuse-rust-registry/
</guid>
<link>
https://mcorbin.fr/posts/2019-05-01-meuse-rust-registry/
</link>
<title>
Meuse, a free Rust private Registry
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;English version &lt;a href=&quot;https://mcorbin.fr/pages/meuse-rust-registry/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Je m&amp;#8217;étais intéressé à Rust à sa sortie en version 1.0. Après avoir pas mal joué avec, j&amp;#8217;ai un peu mis de côté ce langage pour me consacrer à d&amp;#8217;autres choses. Mais une phrase de la &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1340-2019-04-11&quot;&gt;release note&lt;/a&gt; de la version 1.34 m&amp;#8217;a interpellé: &lt;code&gt;You can now use alternative registries to crates.io.&lt;/code&gt; J&amp;#8217;avais trouvé mon prochain projet: écrire un registry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_meuse_un_registry_pour_vos_crates&quot;&gt;Meuse, un registry pour vos crates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Meuse&lt;/code&gt; est un registry écrit en &lt;a href=&quot;https://clojure.org/&quot;&gt;Clojure&lt;/a&gt;. Mon objectif est de fournir un registry simple à déployer et à administrer. Le code est disponible &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;sur Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le statut du projet est actuellement &lt;code&gt;ça marche sur ma machine&lt;/code&gt;. il reste &lt;code&gt;beaucoup&lt;/code&gt; de travail à faire, le code doit être remanié et beaucoup mieux testé. Toute la partie concernant l&amp;#8217;authentification et la gestion des tokens est manquante.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mon premier objectif était de poser les bases du projet de voir un peu les difficultés que j&amp;#8217;allais rencontrer. Mais j&amp;#8217;ai déjà quelque chose d&amp;#8217;intéressant:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cargo publish --allow-dirty --registry custom
    Updating `https://github.com/mcorbin/testregistry.git` index
warning: manifest has no license, license-file, documentation, homepage or repository.
See &amp;lt;http://doc.crates.io/manifest.html#package-metadata&amp;gt; for more info.
   Packaging testpublish v0.1.13 (/home/mathieu/prog/rust/testpublish)
   Verifying testpublish v0.1.13 (/home/mathieu/prog/rust/testpublish)
   Compiling testpublish v0.1.13 (/home/mathieu/prog/rust/testpublish/target/package/testpublish-0.1.13)

cargo yank --vers 0.1.13 --registry custom
    Updating `https://github.com/mcorbin/testregistry.git` index
        Yank testpublish:0.1.13

cargo yank --undo --vers 0.1.13 --registry custom
    Updating `https://github.com/mcorbin/testregistry.git` index
      Unyank testpublish:0.1.13

cargo owner --add user1 --registry custom    Updating `https://github.com/mcorbin/testregistry.git` index
       Owner added user(s) user1 as owner(s) of crate testpublish

cargo owner --list --registry custom
    Updating `https://github.com/mcorbin/testregistry.git` index
user1 (user1)

cargo owner --remove user1 --registry custom
    Updating `https://github.com/mcorbin/testregistry.git` index
       Owner removing [&quot;user1&quot;] from crate testpublish

cargo search --registry custom &quot;project&quot; -v
testpublish = &quot;0.1.13&quot;    # This is a description of my project&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je peux aussi récupérer des dépendances depuis le registry ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_fonctionnement&quot;&gt;Fonctionnement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Meuse&lt;/code&gt; utilise &lt;code&gt;PostgreSQL&lt;/code&gt; comme base de données (crates et versions, categories, utilisateurs&amp;#8230;&amp;#8203;). La recherche (très basique pour l&amp;#8217;instant) est également implémentée grâce au type &lt;code&gt;TSVECTOR&lt;/code&gt; de PostgreSQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les registries Rust utilisent également un repository Git pour stocker les metadata des crates (versions, est ce qu&amp;#8217;une crate est &lt;code&gt;yanked&lt;/code&gt; ou non&amp;#8230;&amp;#8203; cf la &lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/registries.html&quot;&gt;documentation&lt;/a&gt;). &lt;code&gt;Meuse&lt;/code&gt; va donc également intéragir avec un repository Git quand une crate est publiée ou &quot;yankée&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enfin, les fichiers crates contenant le code source sont également gérés par &lt;code&gt;Meuse&lt;/code&gt; qui se charge de les sauvegarder sur disque et de les exposer via HTTP (mais je prévois quelques fonctionnalités de ce côté là, comme par exemple le fait de pouvoir pousser les crates sur un object store compatible S3).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Donc si vous avez une instance &lt;code&gt;PostgreSQL&lt;/code&gt;, déployer votre registry ne sera que lancer un &lt;code&gt;java -jar&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_suite&quot;&gt;La suite&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le prochain mois sera consacré à stabiliser le projet, réécrire ce qui doit être réécrit, et ajouter la gestion des tokens,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En plus de l&amp;#8217;API &lt;code&gt;crate&lt;/code&gt; utilisée par cargo, une autre API (que j&amp;#8217;ai déjà commencé) permettra de gérer les catégories de vos crates, les utilisateurs etc&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pense également que j&amp;#8217;écrirais une CLI pour intéragir avec le projet. Par contre, je ne ferais pas d&amp;#8217;interface graphique (je suis trop mauvais en front et cela ne m&amp;#8217;intéresse pas vraiment), libre à vous de faire ça de votre côté si vous êtes motivés ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;espère pouvoir sortir une version à peu près fonctionnel avec un peu de documentation pour la fin du mois.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_appendice_pourquoi_clojure&quot;&gt;Appendice: pourquoi Clojure ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédement, &lt;code&gt;Meuse&lt;/code&gt; est écrit en Clojure. Parmis tous les langages que j&amp;#8217;ai utilisé Clojure est celui où je suis le plus productif.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;écosystème est très riche, avec des librairies de grandes qualitées (comme &lt;a href=&quot;https://github.com/ztellman/aleph&quot;&gt;Aleph&lt;/a&gt; ou &lt;a href=&quot;https://github.com/jkk/honeysql&quot;&gt;HoneySQL&lt;/a&gt;), et la façon de travailler avec le REPL (un &lt;code&gt;reloaded workflow&lt;/code&gt; avec &lt;a href=&quot;https://github.com/tolitius/mount&quot;&gt;Mount&lt;/a&gt; dans mon cas, qui fera d&amp;#8217;ailleurs l&amp;#8217;objet d&amp;#8217;un article un jour ou l&amp;#8217;autre) est géniale.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On rajoute à ça un langage extrêmement bien designé, l&amp;#8217;immutabilité, il y a de quoi être heureux (et non, le typage statique ne me manque pas).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 01 May 2019 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-03-03-ebpf-xdp-introduction/
</guid>
<link>
https://mcorbin.fr/posts/2019-03-03-ebpf-xdp-introduction/
</link>
<title>
Introduction to eBPF and XDP
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;English version &lt;a href=&quot;https://mcorbin.fr/pages/xdp-introduction/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Cela fait un moment que j&amp;#8217;entends parler de eBPF et de XDP (eXpress Data Path) mais je n&amp;#8217;avais pas vraiment eu l&amp;#8217;occasion de jouer avec. J&amp;#8217;ai donc décidé comme projet de week-end d&amp;#8217;écrire un programme XDP le plus simple possible permettant de filtrer les paquets pour une addresse IP donnée. Je présenterais comment ce programme fonctionne, comment le compiler et l&amp;#8217;exécuter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_ebpf_et_xdp&quot;&gt;eBPF et XDP&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je ne connais pas encore dans le détail ces technologies, donc n&amp;#8217;hésitez pas à me remonter mes eventuelles erreurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;eBPF est une technologie du kernel Linux permettant d&amp;#8217;écrire des programmes qui seront compilés en bytecode BPF. Ce bytecode est ensuite vérifié (certaines erreurs comme une lecture sans vérifier si la valeur lue est &lt;code&gt;null&lt;/code&gt; ne sont pas possibles empêchent la compilation) et exécuté dans une machine virtuelle présente dans le kernel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;eBPF peut être utilisé pour écrire des outils de monitoring (en attachant le programme pour réagir à des événements comme des appels systèmes par exemple). Ici, l&amp;#8217;intêret de eBPF est son faible impact sur les performances du système que l&amp;#8217;on instrumente.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais eBPF permet aussi d&amp;#8217;intéragir avec le réseau avec XDP (comme par exemple pour écrire un load balancer ou un firewall). Ici aussi, l&amp;#8217;intêret de XDP est qu&amp;#8217;il s&amp;#8217;exécute au plus prêt du hardware et permet donc d&amp;#8217;atteindre de très bonnes performances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici une collection de liens avec plus d&amp;#8217;informations sur ces sujets:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.brendangregg.com/ebpf.html&quot; class=&quot;bare&quot;&gt;http://www.brendangregg.com/ebpf.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.brendangregg.com/blog/2019-01-01/learn-ebpf-tracing.html&quot; class=&quot;bare&quot;&gt;http://www.brendangregg.com/blog/2019-01-01/learn-ebpf-tracing.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.iovisor.org/technology/xdp&quot; class=&quot;bare&quot;&gt;https://www.iovisor.org/technology/xdp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je ne sais pas pour vous, mais pour moi eBPF et XDP sont clairement le genre de technologies où même après lecture de 20 articles sur le sujet, je ne suis pas vraiment sûr de bien comprendre ce qu&amp;#8217;il se passe vraiment. J&amp;#8217;ai donc décidé de pratiquer un maximum pour mieux comprendre tout cela, et cet article sera (j&amp;#8217;espère !) le premier d&amp;#8217;une longue série.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_installation&quot;&gt;Installation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour compiler un programme BPF, le plus simple semble de compiler directement le programme dans l&amp;#8217;arborescence du kernel Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On commence donc par cloner le kernel avec un &lt;code&gt;git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai également dû installer sur ma machine (Debian) un certain nombre de paquets. Peut être que vous en aurez d&amp;#8217;autres à installer (vous le saurez à la compilation): &lt;code&gt;apt-get install bison clang flex libelf-dev llvm&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Allez maintenant à la racine du projet Linux, et exécutez &lt;code&gt;make headers_install&lt;/code&gt; puis &lt;code&gt;make menuconfig&lt;/code&gt; (pour cette phase, j&amp;#8217;ai tout simplement laissé la configuration par défaut).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous devriez maintenant pouvoir compiler les programmes BPF inclus dans le kernel avec &lt;code&gt;make samples/bpf/&lt;/code&gt; (attention, le &lt;code&gt;/&lt;/code&gt; est important à la fin) sans erreurs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_mise_en_place_du_projet&quot;&gt;Mise en place du projet.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, mon but est d&amp;#8217;écrire un programme permettant de filtrer tous les paquets venant d&amp;#8217;une addresse IP donnée sur l&amp;#8217;interface localhost. Le nom de mon programme sera &lt;code&gt;xdp_ip_filter&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_makefile&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Makefile&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous allons tout d&amp;#8217;abord rajouter dans le fichier &lt;code&gt;samples/bpf/Makefile&lt;/code&gt; les instructions pour compiler notre futur programme. Vous verrez dans ce fichier de multiples déclarations commençant par &lt;code&gt;hostprogs-y&lt;/code&gt;, rajouter la ligne &lt;code&gt;hostprogs-y += xdp_ip_filter&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De la même façon, rajoutez la ligne &lt;code&gt;xdp_ip_filter-objs := bpf_load.o xdp_ip_filter_user.o&lt;/code&gt; à l&amp;#8217;endroit où se trouve les déclarations commençant par &lt;code&gt;xdp_&lt;/code&gt;, puis &lt;code&gt;always += xdp_ip_filter_kern.o&lt;/code&gt; un peu plus loin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le Makefile est maintenant prêt.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_les_fichiers_du_projet&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Les fichiers du projet&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous allons travailler dans deux fichiers &lt;code&gt;samples/bpf/xdp_ip_filter_kern.c&lt;/code&gt; et &lt;code&gt;samples/bpf/xdp_ip_filter_user.c&lt;/code&gt;. Le fichier &lt;code&gt;kern&lt;/code&gt; contiendra le code qui sera compilé en bytecode BPF, le fichier &lt;code&gt;user&lt;/code&gt; sera notre point d&amp;#8217;entrée pour démarrer ce dernier. Je me référerais souvent à ces fichiers par les noms abrégés &lt;code&gt;user&lt;/code&gt; ou &lt;code&gt;kern&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le code de ces fichiers est disponible à ces deux emplacements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sur Github, avec la coloration syntaxique &lt;a href=&quot;https://github.com/mcorbin/blog/tree/master/resources/templates/static/ebpf_xdp&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sur ce site aux url suivantes: &lt;a href=&quot;../../static/ebpf_xdp/xdp_ip_filter_kern.c&quot;&gt;xdp_ip_filter_kern.c&lt;/a&gt; et &lt;a href=&quot;../../static/ebpf_xdp/xdp_ip_filter_user.c&quot;&gt;xdp_ip_filter_user.c&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il faut savoir que je n&amp;#8217;ai pas fait de C depuis &lt;strong&gt;très&lt;/strong&gt; longtemps (et j&amp;#8217;ai jamais pratiqué le C à haut niveau), donc mon code est assez moche (mais ce n&amp;#8217;est pas très grave pour cet exemple &lt;code&gt;¯_(ツ)_/¯&lt;/code&gt;).&lt;br&gt;
Je vous conseille également de lire cet article en ayant ouvert dans votre éditeur favoris les deux fichiers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_xdp_ip_filter_kern_c&quot;&gt;xdp_ip_filter_kern.c&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Après la déclaration des headers (que vous pouvez retrouver dans les liens mis au dessus), nous avons une première macro:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define bpf_printk(fmt, ...)                    \
({                              \
           char ____fmt[] = fmt;                \
           bpf_trace_printk(____fmt, sizeof(____fmt),   \
                ##__VA_ARGS__);         \
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette macro sera utilisée comme logger. Son fonctionnement n&amp;#8217;est pas important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_les_maps&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Les maps&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a maintenant une partie plus intéressante:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;struct bpf_map_def SEC(&quot;maps&quot;) ip_map = {
	.type        = BPF_MAP_TYPE_HASH,
	.key_size    = sizeof(__u32),
	.value_size  = sizeof(__u32),
	.max_entries = 1,
};

struct bpf_map_def SEC(&quot;maps&quot;) counter_map = {
	.type        = BPF_MAP_TYPE_PERCPU_ARRAY,
	.key_size    = sizeof(__u32),
	.value_size  = sizeof(__u64),
	.max_entries = 1,
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On définit ici deux &lt;code&gt;maps&lt;/code&gt;. Ces maps sont donc des associations clé/valeurs, et c&amp;#8217;est ces maps qui sont utilisées pour intéragir avec l&amp;#8217;extérieur (notre fichier &lt;code&gt;user&lt;/code&gt; que je présenterais tout à l&amp;#8217;heure). Le programme &lt;code&gt;user&lt;/code&gt; pourra lire et écrire dans ces maps, même chose pour le programme &lt;code&gt;kern&lt;/code&gt;. Vous pouvez donc voir les maps comme de la mémoire partagée entre les deux programmes, et c&amp;#8217;est d&amp;#8217;ailleurs à ma connaissance la seule façon de faire communiquer ces programmes entre eux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La première map &lt;code&gt;ip_map&lt;/code&gt; est une map de type &lt;code&gt;BPF_MAP_TYPE_HASH&lt;/code&gt; (voyez ça comme une map classique), dont les clés et valeurs sont des &lt;code&gt;u32&lt;/code&gt; (en effet, une addresse IP v4 peut être représentée sous forme d&amp;#8217;un simple integer). Cette map ne peut contenir qu&amp;#8217;une entrée (cf &lt;code&gt;max_entries&lt;/code&gt;).&lt;br&gt;
Cette map servira au programme &lt;code&gt;user&lt;/code&gt; à transmettre au programme &lt;code&gt;kern&lt;/code&gt; l&amp;#8217;adresse IP à filtrer (et ici, on ne filtre qu&amp;#8217;une IP donc la map n&amp;#8217;aura qu&amp;#8217;une entrée).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La seconde map nommée &lt;code&gt;counter_map&lt;/code&gt; est une map de type &lt;code&gt;BPF_MAP_TYPE_PERCPU_ARRAY&lt;/code&gt;. Ce type indique que l&amp;#8217;on aura en fait une map par core de notre CPU (si vous avez 8 cores, vous aurez 8 maps). Ces map serviront à compter par core combien de paquets ont été filtrés. Le type &lt;code&gt;ARRAY&lt;/code&gt; indique également que la clé de notre map sera entre &lt;code&gt;0&lt;/code&gt; et &lt;code&gt;max_entries -1&lt;/code&gt; (donc dans notre cas nous n&amp;#8217;aurons qu&amp;#8217;une entrée pour la clé &lt;code&gt;0&lt;/code&gt;). On aura donc pour chaque core une map dont la valeur pour la clé &lt;code&gt;0&lt;/code&gt; contiendra le nombre de paquets filtrés par ce core.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ebpf_xdp/ebpf_maps_1.png&quot; alt=&quot;maps xdm et abpf&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_le_code&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Le code&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Récupération de l&amp;#8217;IP à filtrer&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, nous avons une fonction prenant en paramètre une struct &lt;code&gt;xdp_md&lt;/code&gt;. Cette struct contiendra le paquet réseau avec lequel nous allong intéragir.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;SEC(&quot;xdp_ip_filter&quot;)
int _xdp_ip_filter(struct xdp_md *ctx) {
  // key of the maps
  u32 key = 0;
  // the ip to filter
  u32 *ip;

  bpf_printk(&quot;starting xdp ip filter\n&quot;);

  // get the ip to filter from the ip_filtered map
  ip = bpf_map_lookup_elem(&amp;amp;ip_map, &amp;amp;key);
  if (!ip){
    return XDP_PASS;
  }
  bpf_printk(&quot;the ip address to filter is %u\n&quot;, ip);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La première chose à faire est de récupérer dans la map &lt;code&gt;ip_map&lt;/code&gt; l&amp;#8217;ip addresse que nous voulons filtrer. Pour cela, nous utilisons &lt;code&gt;bpf_map_lookup_elem&lt;/code&gt; sur &lt;code&gt;ip_map&lt;/code&gt; avec comme clé &lt;code&gt;0&lt;/code&gt; (rappelez vous, notre map n&amp;#8217;a qu&amp;#8217;un élément). Comme dit précédemment, l&amp;#8217;IP retournée par &lt;code&gt;bpf_map_lookup_elem&lt;/code&gt; est sous format &lt;code&gt;u32&lt;/code&gt; en &lt;code&gt;little endian&lt;/code&gt; (par exemple 192.168.1.78 &amp;#8658; 0xC0A8014E en hexadécimal &amp;#8658; on lit à l&amp;#8217;envers &amp;#8658; 0x4E0180C0 &amp;#8658; 1308721344 en base 10).&lt;br&gt;
Vous pouvez voir également que j&amp;#8217;utilise &lt;code&gt;bpf_printk&lt;/code&gt; comme un logger.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ebpf_xdp/ebpf_maps_2.png&quot; alt=&quot;lookup map ebpf&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Récupération de l&amp;#8217;IP source du paquet&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maintenant, nous voulons récupérer l&amp;#8217;adresse IP source du paquet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  void *data_end = (void *)(long)ctx-&amp;gt;data_end;
  void *data     = (void *)(long)ctx-&amp;gt;data;
  struct ethhdr *eth = data;

  // check packet size
  if (eth + 1 &amp;gt; data_end) {
    return XDP_PASS;
  }

  // check if the packet is an IP packet
  if(ntohs(eth-&amp;gt;h_proto) != ETH_P_IP) {
    return XDP_PASS;
  }

  // get the source address of the packet
  struct iphdr *iph = data + sizeof(struct ethhdr);
  if (iph + 1 &amp;gt; data_end) {
    return XDP_PASS;
  }
  u32 ip_src = iph-&amp;gt;saddr;
  bpf_printk(&quot;source ip address is %u\n&quot;, ip_src);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous commençons par récupérer la donnée contenue dans &lt;code&gt;ctx&lt;/code&gt; grâce à &lt;code&gt;ctx&amp;#8594;data&lt;/code&gt;, et un pointer sur la fin du paquet via &lt;code&gt;(void *)(long)ctx&amp;#8594;data_end&lt;/code&gt;. Ensuite, on assigne &lt;code&gt;data&lt;/code&gt; à une struct de type &lt;code&gt;ethhdr&lt;/code&gt; (représentant une trame Ethernet).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On doit ensuite vérifier que &lt;code&gt;eth + 1&lt;/code&gt; ne dépasse pas &lt;code&gt;data_end&lt;/code&gt; en mémoire. Ce check est obligatoire (sans cela, le programme refuse de compiler). Si la taille est supérieuse, on ne fait rien (on laisse passer le paquet en retournant &lt;code&gt;XDP_PASS&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On vérifie ensuite que le paquet est un paquet IP via &lt;code&gt;if(ntohs(eth&amp;#8594;h_proto) != ETH_P_IP)&lt;/code&gt;. Si le paquet n&amp;#8217;est pas un paquet IP, il ne nous intéresse pas, donc là aussi on retourne &lt;code&gt;XDP_PASS&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous créons maintenant une nouvelle struct de type &lt;code&gt;iphdr&lt;/code&gt; à partir de la struct ethernet, nous refaisons également une vérification (obligatoire) sur &lt;code&gt;data_end&lt;/code&gt;, puis nous récupérons enfin l&amp;#8217;IP source du paquet via &lt;code&gt;iph&amp;#8594;saddr&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Filtrer le paquet&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a maintenant l&amp;#8217;IP source, nous allons la comparer avec l&amp;#8217;IP que nous avons récupérée dans la map en début de programme:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  // drop the packet if the ip source address is equal to ip
  if (ip_src == *ip) {
    u64 *filtered_count;
    u64 *counter;
    counter = bpf_map_lookup_elem(&amp;amp;counter_map, &amp;amp;key);
    if (counter) {
      *counter += 1;
    }
    return XDP_DROP;
  }
  return XDP_PASS;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, on compare &lt;code&gt;ip_src&lt;/code&gt; avec &lt;code&gt;ip&lt;/code&gt;. Si le paquet source doit être filtré, on incrémente dans la map &lt;code&gt;counter_map&lt;/code&gt; le compteur de paquet filtré (en utilisant encore la clé &lt;code&gt;0&lt;/code&gt;) via &lt;code&gt;bpf_map_lookup_elem&lt;/code&gt; (qui retourne un pointeur dont on peut donc incrémenter la valeur), et on filtre le paquet en retournant &lt;code&gt;XDP_DROP&lt;/code&gt;. Sinon, on retourne &lt;code&gt;XDP_PASS&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est tout pour le programme &lt;code&gt;kern&lt;/code&gt; !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_xdp_ip_filter_user_c&quot;&gt;xdp_ip_filter_user.c&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_le_code_2&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Le code&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce fichier commence comme l&amp;#8217;autre par l&amp;#8217;inclusion de nombreux fichiers headers, puis de:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;static int ifindex = 1; // localhost interface ifindex
static __u32 xdp_flags = 0;

// unlink the xdp program and exit
static void int_exit(int sig) {
  printf(&quot;stopping\n&quot;);
  bpf_set_link_xdp_fd(ifindex, -1, xdp_flags);
  exit(0);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On définit ici une variable &lt;code&gt;ifindex&lt;/code&gt; qui est l&amp;#8217;index de l&amp;#8217;interface &lt;code&gt;localhost&lt;/code&gt; (je parlerais plus en détail de cela plus loin), puis &lt;code&gt;xdp_flags&lt;/code&gt; qui vaut zéro.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La fonction &lt;code&gt;int_exit&lt;/code&gt; est une fonction servant à stopper le programme &lt;code&gt;kern&lt;/code&gt; en cas de signal, via &lt;code&gt;bpf_set_link_xdp_fd&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;La fonction main, récupération de l&amp;#8217;IP&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici maintenant la fonction &lt;code&gt;main&lt;/code&gt; qui sera exécutée pour démarrer notre programme BPF:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int argc, char **argv) {
  const char *optstr = &quot;i:&quot;;
  char *filename=&quot;xdp_ip_filter_kern.o&quot;;
  char *ip_param = &quot;127.0.0.1&quot;;
  int opt;
  // maps key
  __u32 key = 0;

  while ((opt = getopt(argc, argv, optstr)) != -1) {
    switch(opt)
      {
      case 'i':
        ip_param=optarg;
      break;
    }
  }

  // convert the ip string to __u32
  struct sockaddr_in sa_param;
  inet_pton(AF_INET, ip_param, &amp;amp;(sa_param.sin_addr));
  __u32 ip = sa_param.sin_addr.s_addr;
  printf(&quot;the ip to filter is %s/%u\n&quot;, ip_param, ip);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, on définit quelques variables comme les paramètres attendues à &lt;code&gt;main&lt;/code&gt;, le nom du fichier &lt;code&gt;.o&lt;/code&gt; (xdp_ip_filter_kern.o) qui devra être lancé, et une valeur par défaut pour l&amp;#8217;IP à filtrer (&lt;code&gt;127.0.0.1&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On récupère l&amp;#8217;IP à filtrer (qui sera passé via l&amp;#8217;option &lt;code&gt;-i&lt;/code&gt; au programme), et on la convertit en un u32 (par exemple &quot;192.168.1.78&quot; &amp;#8658; 0xC0A8014E &amp;#8658; on lit à l&amp;#8217;envers &amp;#8658; 0x4E0180C0 &amp;#8658; 1308721344 en base 10).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Changements de limits&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit dans beaucoup de programmes eBPF que les limites du système sont augmentées, j&amp;#8217;ai laissé ce comportement:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// change limits
  struct rlimit r = {RLIM_INFINITY, RLIM_INFINITY};
  if (setrlimit(RLIMIT_MEMLOCK, &amp;amp;r)) {
    perror(&quot;setrlimit(RLIMIT_MEMLOCK, RLIM_INFINITY)&quot;);
    return 1;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Chargement du programme eBPF&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;// load the bpf kern file
  if (load_bpf_file(filename)) {
    printf(&quot;error %s&quot;, bpf_log_buf);
    return 1;
  }

  if (!prog_fd[0]) {
    printf(&quot;load_bpf_file: %s\n&quot;, strerror(errno));
    return 1;
  }

  // add sig handlers
  signal(SIGINT, int_exit);
  signal(SIGTERM, int_exit);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, on charge le fichier  &lt;code&gt;xdp_ip_filter_kern.o&lt;/code&gt; (qui contient notre fichier précédent compilé), et on ajoute le handler &lt;code&gt;int_exit&lt;/code&gt; sur les signaux &lt;code&gt;SIGINT&lt;/code&gt; et &lt;code&gt;SIGTERM&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Ajout de l&amp;#8217;IP à filtrer dans la map&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il faut maintenant ajouter l&amp;#8217;IP que nous voulons filtrer dans la map nommée &lt;code&gt;ip_map&lt;/code&gt; que nous avons utilisée dans le fichier &lt;code&gt;xdp_ip_filter_kern.c&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  // set the first element of the first map to the ip passed as a parameter
  int result = bpf_map_update_elem(map_fd[0], &amp;amp;key, &amp;amp;ip, BPF_ANY);
  if (result != 0) {
    fprintf(stderr, &quot;bpf_map_update_elem error %d %s \n&quot;, errno, strerror(errno));
    return 1;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, on met à jour la map avec la fonction &lt;code&gt;bpf_map_update_elem&lt;/code&gt;. &lt;code&gt;map_fd[0]&lt;/code&gt; retourne la première map définie dans le fichier &lt;code&gt;kern&lt;/code&gt;, qui est bien notre map &lt;code&gt;ip_map&lt;/code&gt; (l&amp;#8217;ordre de déclaration des maps a donc de l&amp;#8217;importance !). La map contiendra donc maintenant pour la clé &lt;code&gt;0&lt;/code&gt; l&amp;#8217;IP à filtrer (et donc le programme &lt;code&gt;kern&lt;/code&gt; pourra la récupérer comme vu précédemment).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ebpf_xdp/ebpf_maps_3.png&quot; alt=&quot;ebpf update map&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Ajout du programme XDP sur une interface&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans la fonction &lt;code&gt;int_exit&lt;/code&gt; vue précédemment, nous appelions &lt;code&gt;bpf_set_link_xdp_fd&lt;/code&gt; pour stopper le programme XDP, en utilisant notamment la variable &lt;code&gt;ifindex&lt;/code&gt;. En fait, un programme XDP est lié à une interface (et dans &lt;code&gt;int_exit&lt;/code&gt;, nous le détachions donc de l&amp;#8217;interface).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il faut donc dans notre &lt;code&gt;main&lt;/code&gt; l&amp;#8217;attacher à l&amp;#8217;interface dont nous voulons filtrer les paquets:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;// link the xdp program to the interface
  if (bpf_set_link_xdp_fd(ifindex, prog_fd[0], xdp_flags) &amp;lt; 0) {
    printf(&quot;link set xdp fd failed\n&quot;);
    return 1;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, on attachons à l&amp;#8217;interface &lt;code&gt;localhost&lt;/code&gt; notre programme XDP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Collecte des statistiques&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A partir de ce moment, notre programme XDP est démarré, et commence à filtrer des paquets. Nous voulons savoir combien de paquets ont été filtrés, en récupérant pour chaque core de notre CPU la valeur dans la map &lt;code&gt;counter_map&lt;/code&gt; vue précédemment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  int i, j;

  // get the number of cpus
  unsigned int nr_cpus = bpf_num_possible_cpus();
  __u64 values[nr_cpus];

  // &quot;infinite&quot; loop
  for (i=0; i&amp;lt; 1000; i++) {
    // get the values of the second map into values.
    assert(bpf_map_lookup_elem(map_fd[1], &amp;amp;key, values) == 0);
    printf(&quot;%d\n&quot;, i);
    for (j=0; j &amp;lt; nr_cpus; j++) {
      printf(&quot;cpu %d, value = %llu\n&quot;, j, values[j]);
    }
    printf(&quot;\n\n&quot;);
    sleep(2);
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rappelez vous, la map &lt;code&gt;counter_map&lt;/code&gt; est par core (type &lt;code&gt;BPF_MAP_TYPE_PERCPU_ARRAY&lt;/code&gt;). Nous récupérons notre nombre de core via &lt;code&gt;bpf_num_possible_cpus&lt;/code&gt;, puis nous créons deux boucles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Une pour périodiquement récupérer les valeurs de la map, toutes les 2 secondes. &lt;code&gt;bpf_map_lookup_elem&lt;/code&gt; est appelé sur la map numéro 2 (&lt;code&gt;map_fd[1]&lt;/code&gt;, donc &lt;code&gt;counter_map&lt;/code&gt;), pour la clé &lt;code&gt;0&lt;/code&gt; pour réaliser cela. Les valeurs sont stockées dans le tableau &lt;code&gt;values&lt;/code&gt; (car il y a une valeur par core).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Une qui va intérer sur le tableau &lt;code&gt;values&lt;/code&gt; pour afficher à l&amp;#8217;écran les statistiques pour chaque core.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ebpf_xdp/ebpf_maps_4.png&quot; alt=&quot;ebpf update map&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Ici, on voit que bpf_map_lookup_elem récupère pour chaque map &quot;counter_map&quot; de chaque core la valeur à l&amp;#8217;index 0 et la stocke dans un tableau nommé values, où l&amp;#8217;index du tableau est le numéro du core.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Fin du programme&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la fin du programme, on détache le programme de l&amp;#8217;interface localhost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  printf(&quot;end\n&quot;);
  // unlink the xdp program
  bpf_set_link_xdp_fd(ifindex, -1, xdp_flags);
  return 0;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est maintenant terminé, place à la compilation et aux tests !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tester_le_programme&quot;&gt;Tester le programme&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lancer &lt;code&gt;make samples/bpf/&lt;/code&gt;, cela devrait compiler sans erreurs votre programme. Vous pouvez maintenant le tester. Par exemple, filtrons tous les paquets venant de l&amp;#8217;IP &lt;code&gt;192.168.1.78&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd samples/bpf/
sudo ./xdp_ip_filter -i &quot;192.168.1.78&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;output devrait être le suivant:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;the ip to filter is 192.168.1.78/1308731584
0
cpu 0, value = 0
cpu 1, value = 0
cpu 2, value = 0
cpu 3, value = 0
cpu 4, value = 0
cpu 5, value = 0
cpu 6, value = 0
cpu 7, value = 0
cpu 8, value = 0
cpu 9, value = 0
cpu 10, value = 0
cpu 11, value = 0
cpu 12, value = 0
cpu 13, value = 0
cpu 14, value = 0
cpu 15, value = 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez vérifier que votre programme &lt;code&gt;kern&lt;/code&gt; est bien attaché à l&amp;#8217;interface localhost en appelant &lt;code&gt;ip link list&lt;/code&gt;. une ligne &lt;code&gt;prog/xdp&lt;/code&gt; devrait être rajoutée sur l&amp;#8217;interface:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ip link list
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 xdpgeneric qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    prog/xdp id 69 tag 1ddc7360e5987edf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez d&amp;#8217;ailleurs à tout moment détacher les programmes XDP de votre interface via la commande &lt;code&gt;ip link set dev lo xdp off&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Testons maintenant si notre programme marche. Pour cela, j&amp;#8217;utilise &lt;a href=&quot;https://scapy.net/&quot;&gt;scapy&lt;/a&gt; pour crafter des paquets réseaux. Installez le (via &lt;code&gt;pip&lt;/code&gt; ou via le gestionnaire de paquet de votre distribution). Puis en root, ouvrez un interpréteur python avec &lt;code&gt;python&lt;/code&gt; et envoyez un paquet ICMP ayant comme source &lt;code&gt;192.168.1.78&lt;/code&gt; vers &lt;code&gt;localhost&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from scapy.all import  *
conf.L3socket=L3RawSocket
sr1(IP(src=&quot;192.168.1.78&quot;, dst=&quot;127.0.0.1&quot;)/ICMP())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La réponse n&amp;#8217;arrivera jamais, car le paquet a été filtré par notre programme ! D&amp;#8217;ailleurs, l&amp;#8217;output de votre programme devrait être:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cpu 0, value = 0
cpu 1, value = 0
cpu 2, value = 0
cpu 3, value = 0
cpu 4, value = 0
cpu 5, value = 0
cpu 6, value = 0
cpu 7, value = 0
cpu 8, value = 0
cpu 9, value = 1
cpu 10, value = 0
cpu 11, value = 0
cpu 12, value = 0
cpu 13, value = 0
cpu 14, value = 0
cpu 15, value = 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, mon core numéro 9 a filtré le paquet. Réessayez, et vous verrez les compteurs s&amp;#8217;incrémenter !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez également consulter les logs du program &lt;code&gt;kern&lt;/code&gt; (l&amp;#8217;output de &lt;code&gt;bpf_printk&lt;/code&gt;) en allant lire le fichier &lt;code&gt;/sys/kernel/debug/tracing/trace&lt;/code&gt;, n&amp;#8217;hésitez pas à rajouter plus de logs si besoin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai appris beaucoup de choses sur eBPF et XDP en écrivant ce programme. C&amp;#8217;est définitivement une technologie puissante, très intéressante, mais pas forcément évidente à utiliser (surtout pour quelqu&amp;#8217;un n&amp;#8217;ayant pas d&amp;#8217;expérience en développement kernel).
Certains projets comme &lt;a href=&quot;https://github.com/iovisor/bcc&quot;&gt;bcc&lt;/a&gt; ou &lt;a href=&quot;https://github.com/iovisor/bpftrace&quot;&gt;bpftrace&lt;/a&gt; ont l&amp;#8217;air plus accessibles, mais écrire un peu de C permet de rentrer rapidement dans le vif du sujet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce ne sera sûrement pas mon seul article sur le sujet, mon prochain projet sera peut être d&amp;#8217;écrire un petit outil pour collecter une métrique quelconque de mon système par exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sun, 03 Mar 2019 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-02-15-kubernetes-overdose/
</guid>
<link>
https://mcorbin.fr/posts/2019-02-15-kubernetes-overdose/
</link>
<title>
Kubernetes overdose
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sur le net, en conférence, en entreprise, tout le monde en parle: Kubernetes est sur toutes les lèvres. Il permet de résoudre tous nos problèmes, réchauffement climatique et faim dans le monde inclus (surtout couplé à une architecture microservice !). Quand est-il vraiment en réalité ? Existe-il des alternatives ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_docker&quot;&gt;Docker&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La route vers Kubernetes commence généralement par Docker. Les entreprises veulent absolument packager leurs applications avec Docker, pour différentes raisons. Parfois, elles pensent que cela simplifiera le packaging de leurs applications (pas de dépendances système, image immutable&amp;#8230;&amp;#8203;), parfois le déploiement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je trouve que Docker est une technologie intéressante, mais comme toute technologie ce n&amp;#8217;est pas la solution à tout. J&amp;#8217;aimerais que les gens ayant un existant et voulant se tourner vers Docker se posent déjà ces questions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Avez vous une plateforme d&amp;#8217;intégration continu ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pouvez vous mettre en production vos applications à tout moment ? Changer rapidement la version d&amp;#8217;une application sur un environnement ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Etes vous capable de reconstruire rapidement un environnement semblable à la prod &quot;from scratch&quot; ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pouvez vous facilement provisioner de nouveaux serveurs ? Votre infrastructure est-elle totalement automatisée ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Etes vous tolérant aux pannes ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitorez-vous vos applications et serveurs (logs, metriques, alertes en cas d&amp;#8217;incidents&amp;#8230;&amp;#8203;) ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous répondez &quot;non&quot; à ces questions, vous n&amp;#8217;avez probablement pas la maturité suffisante pour faire des conteneurs en production. Pensez vous vraiment que rajouter Docker à une architecture bancale réglera vos soucis ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour l&amp;#8217;anecdote personnelle, j&amp;#8217;ai connu une entreprise qui voulait se mettre à Docker, par contre les outils d&amp;#8217;automatisations comme Ansible étaient interdit car &lt;code&gt;trop avancés/compliqués&lt;/code&gt;. Et ça, c&amp;#8217;est le problème numéro un de Docker: la technologie est souvent utilisée car &quot;aujourd&amp;#8217;hui il faut tout passer sur Docker&quot;, sans vraiment de justifications.&lt;br&gt;
En passant, c&amp;#8217;est la même chose pour les architectures microservices que l&amp;#8217;on voit fleurir un peu partout on ne sait trop pourquoi (et qui d&amp;#8217;ailleurs viennent souvent avec Kubernetes).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_orchestrateurs&quot;&gt;Orchestrateurs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ca y est, l&amp;#8217;entreprise commence à build ses premiers conteneurs, il faut maintenant les déployer. Pas question de lancer des &lt;code&gt;docker run&lt;/code&gt; à la main (ou avec Ansible ou autre) sur les machines, il faut un orchestrateur pour les gérer !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Premier problème: aujourd&amp;#8217;hui, Kubernetes a littéralement cannibalisé l&amp;#8217;écosystème conteneur: Rancher s&amp;#8217;est tourné vers Kubernetes, Docker Swarm se rend compatible Kubernetes, on entend plus trop parler non plus de Mesos/Marathon, le seul orchestrateur faisant un peu de résistance étant &lt;code&gt;Nomad&lt;/code&gt; de &lt;code&gt;Hashicorp&lt;/code&gt; (mais qui reste largement moins populaire que Kubernetes).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;espère que d&amp;#8217;autres solutions arriveront à tirer leurs épingles du jeu. Je ne veux personnellement pas être forcé à utiliser Kubernetes pour l&amp;#8217;unique raison que c&amp;#8217;est la seule solution sur le marché.
De plus, comme je le montrerais ensuite, Kubernetes est une solution complexe à mettre en oeuvre.&lt;br&gt;
Je suis persuadé qu&amp;#8217;il existe un marché pour un orchestrateur simple, permettant de déployer des conteneurs sur quelques dizaines ou centaines de noeuds (ce qui couvrirait le besoin de 99 % des entreprises).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_intégration_de_kubernetes_dans_un_existant&quot;&gt;L&amp;#8217;intégration de Kubernetes dans un existant&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enfin, vous décidez de partir sur Kubernetes. Un grand nombre de gens arrêtent leur analyse ici quand il s&amp;#8217;agit de déployer Kubernetes en production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pourtant, Kubernetes va amener plein de nouvelles problématiques, par exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Comment je monitore les composants de mon cluster ainsi que les conteneurs tournant dessus ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment je gère les logs de mes conteneurs ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment le gère le cycle de vie de mon Cluster Kubernetes (déploiement, montée de version, ajout/suppression de noeuds&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment je gère mes manifests et le déploiement de ces manifests sur le cluster ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment je construis mes images Docker ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment je gère le réseau de mon cluster/route vers mes pods/m&amp;#8217;intègre avec les services qui sont hors du cluster ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/k8s_overdose/pelote.png&quot; alt=&quot;etes vous prêt à dérouler la pelote de laine Kubernetes ?&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Etes vous prêt à dérouler la pelote Kubernetes jusqu&amp;#8217;au bout ?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous n&amp;#8217;utilisiez pas Prometheus pour le monitoring de vos applications ? Pas de chance, c&amp;#8217;est plus ou moins l&amp;#8217;unique solution aujourd&amp;#8217;hui pour monitorer Kubernetes. Votre solution de collecte de logs a du mal à travailler avec Kubernetes ? Là aussi, on vous dira de passer sur fluentd, outil conseillé par la Cloud Native Computing Foundation (CNCF).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sans trop vous en rendre compte, vous commencez à refondre l&amp;#8217;intégralité de votre SI pour intégrer &lt;strong&gt;une&lt;/strong&gt; techno. Ce n&amp;#8217;est pas Kubernetes qui s&amp;#8217;adaptera à vous, c&amp;#8217;est à vous de vous adapter à Kubernetes, et ce coût d&amp;#8217;adaptation est généralement élevé.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_gestion_du_cluster&quot;&gt;Gestion du cluster&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et ensuite, il vous restera à trouver comment déployer et mettre à jour le cluster. Je ne crois pas du tout aux solutions comme &lt;code&gt;kops&lt;/code&gt; ou &lt;code&gt;kubespray&lt;/code&gt;. Ces solutions sont le meilleur moyen de se retrouver avec un cluster configuré de la mauvaise façon: en gros, c&amp;#8217;est comme ça qu&amp;#8217;on finit avec son cluster ouvert sur Internet.&lt;br&gt;
Ce &lt;a href=&quot;https://stripe.com/blog/operating-kubernetes&quot;&gt;super article&lt;/a&gt; de Julia Evans me confirme dans mon opinion que ces solutions de déploiement de cluster ne sont pas faites pour de la production. C&amp;#8217;est seulement en déployant vous même Kubernetes que vous comprendrez comment tous ses composants s&amp;#8217;assemblent et se paramètrent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite, amusez vous bien avec la gestion des permissions (RBAC). J&amp;#8217;espère aussi que vous avez un bon ingénieur réseau sous la main (Calico, Flannel, BGP, VXLAN &amp;#8230;&amp;#8203; ça vous parle ?).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais c&amp;#8217;est pas fini ! Il faut aussi que vous passiez sur Istio/Envoy comme Ingress (c&amp;#8217;est votre archi revenant de $CONFERENCE qui vous l&amp;#8217;a dit), que vous ajoutiez un outil de tracing (bah oui, sinon comment vous allez analyser performances dans tout ce machin) etc&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_buzzword_driven_development&quot;&gt;Buzzword driven development&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La communauté est responsable de cela.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jamais on ne parle aux conférences de la difficulté de maintenir un cluster Kubernetes en production, des problématiques de monitoring, des problèmes réseaux ou même des problèmes qu&amp;#8217;apportent les systèmes distribués de façon générale&amp;#8230;&amp;#8203;&lt;br&gt;
Non, on veut faire du &quot;Wahoo&quot;, on montre que nous on peut &quot;scaler&quot;, on présente de beaux dashboards&amp;#8230;&amp;#8203; Peut être aussi parce que pas mal de gens présentant Kubernetes ne l&amp;#8217;utilisent en fait pas en production ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On parle également rarement du &lt;code&gt;pourquoi Kubernetes&lt;/code&gt;. Ou alors on l&amp;#8217;évoque en disant &lt;code&gt;comme ça je peux déployer facilement plusieurs instances de mon application&lt;/code&gt;. Très bien, mais on sait faire cela depuis très longtemps. Qu&amp;#8217;apporte vraiment Kubernetes ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quand je vais à une conférence et que les talks sur Kubernetes s&amp;#8217;enchainent toute la journée, je comprends également que les gens aient l&amp;#8217;impression d&amp;#8217;être &quot;à la traine&quot; si ils ne font pas eux même du Kubernetes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est le problème avec le buzzword driven dévelopment: ça s&amp;#8217;auto alimente. On a des gens qui vont faire du Kubernetes car c&amp;#8217;est la techno du moment, et ces gens là parleront ensuite de Kubernetes à des gens qui se diront &lt;code&gt;ah mais moi j&amp;#8217;en fais pas, faut que je m&amp;#8217;y mette aussi !&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Puis les entreprises s&amp;#8217;y mêlent (rien ne me fait plus marrer que les boites qui se vendent en disant &lt;code&gt;&lt;strong&gt;nous&lt;/strong&gt;, on fait du Kubernetes et du microservice&lt;/code&gt; comme si c&amp;#8217;était un gage de qualité). On commence à voir des offres d&amp;#8217;emplois demandant de l&amp;#8217;expérience en Kubernetes, les nouveaux projets partent directement sur Kubernetes pour attirer le chaland, et la boucle est bouclée.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On ne parle également jamais des solutions alternatives qui ont fait leurs preuves. Pourquoi cette course en avant sur Docker et Kubernetes alors qu&amp;#8217;il est tout à fait possible d&amp;#8217;avoir des architectures robustes (et beaucoup plus simples) sans tout cela ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pense également qu&amp;#8217;une partie du problème est que ces technologies sont généralement poussées voir mises en place par des développeurs. Quand j&amp;#8217;étais en société de service, il était rare de voir de vrais profils &lt;code&gt;ops&lt;/code&gt; sur les projets. On avait donc les devs n&amp;#8217;ayant jamais gêré un serveur de leur vie qui poussaient allègrement Kubernetes en production.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/k8s_overdose/dev_prod.jpg&quot; alt=&quot;Enfin, les développeurs ont pris le contrôle de la production&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Enfin, les développeurs ont pris le contrôle de la production !&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela se voit aussi aux conférences &quot;mainstream&quot; (du moins en France): généralement pas d&amp;#8217;ops dans les speakers ni dans le public. Le devops en 2019, c&amp;#8217;est un développeur Java faisant vite fait du Docker, du Jenkins et qui sait écrire un playbook Ansible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_commencer_par_le_commencement&quot;&gt;Commencer par le commencement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Essayez déjà de répondre aux questions que je pose en début d&amp;#8217;article. Mettez en place une plateforme de continuous delivery, gérez vos logs et métriques correctement, automatisez le provisioning de votre infrastructure et vos déploiements&amp;#8230;&amp;#8203;&lt;br&gt;
Cela est 100 % réalisable sans conteneurs et sans Kubernetes (ce sera probablement l&amp;#8217;occasion d&amp;#8217;un prochain article de ma part).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus, faire tourner Kubernetes ne vous dispensera pas de provisioner votre infrastructure de façon automatisée, d&amp;#8217;avoir du monitoring solide, une plateforme d&amp;#8217;intégration continue efficace&amp;#8230;&amp;#8203; Kubernetes viendra &lt;code&gt;en plus&lt;/code&gt; de tout cela.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce que vous ferez ne sera pas perdu. Vous aurez également &lt;code&gt;toujours&lt;/code&gt; des applications qui tourneront en dehors du cluster, qui elles aussi devront être correctement déployées.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_kubernetes_as_a_service&quot;&gt;Kubernetes as a service&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La majorité des entreprises n&amp;#8217;ont selon moi pas le besoin (et souvent pas les compétences) de déployer du Kubernetes par elles même. L&amp;#8217;avenir est-il sur les solutions de Kubernetes as a service que l&amp;#8217;on rencontre de plus en plus ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Peut être, mais je ne crois pas au &lt;code&gt;tout Kubernetes&lt;/code&gt; Il y aura toujours des services et applications en dehors du cluster (car certains trucs n&amp;#8217;ont pas d&amp;#8217;intêret à être &quot;Dockerisés&quot;). Vouloir partir sur du Kubernetes trop vite est clairement une erreur selon moi.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kubernetes est une technologie intéressante, et je suis sûr qu&amp;#8217;elle résout de nombreux problêmes dans de nombreuses entreprises.
Sauf que tout le monde n&amp;#8217;a pas les mêmes besoins que Netflix, et ce n&amp;#8217;est pas une solution miracle.&lt;br&gt;
Il est également de notre responsabilité de proposer à nos entreprises et clients les technologies permettant de mener à bien un projet, et non de se construire un CV (pratique malheureusement courante).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;les grands gagnants de tout cela ? Les sociétés de service. Entre la réécriture des applications monolithiques en microservice, les passages sur Kubernetes, le déploiement et maintien de tout ça en production, c&amp;#8217;est le jackpot. Il y a quelques années, la vache à lait était le Big Data et le NoSQL, on peut maintenant rajouter Kubernetes et les microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le projet avec une architecture simple et efficace qui devrait demander 5 personnes en demande 50 aujourd&amp;#8217;hui, pour un truc souvent compliqué à maintenir en prod.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/k8s_overdose/money.jpg&quot; alt=&quot;personnes dormant sur un lit de billet&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Les commerciaux de votre société de service quand le client accepte la refonte de son application legacy en microservice.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;la mode dans pas mal de groupes étant de ne plus recruter de profils technique en interne et de tout déléguer aux sociétés de service n&amp;#8217;arrange rien: les entreprises ne sont même plus capables de juger si ce qu&amp;#8217;on leur vend est pertinent ou pas. Ce sujet mériterait d&amp;#8217;ailleurs un article à lui tout seul&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, ne sautez pas trop vite dans le train Kubernetes. Choisissez vos technologies pour de bonnes raisons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A suivre.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Fri, 15 Feb 2019 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2018-12-03-golang-tomb/
</guid>
<link>
https://mcorbin.fr/posts/2018-12-03-golang-tomb/
</link>
<title>
Golang: gérez l'arrêt de vos systèmes avec Tomb
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On cite souvent Go comme un langage de programmation facilitant la programmation concurrente et parallèle via les goroutines. Les goroutines ne sont pourtant pas si faciles que ça à utiliser correctement. Voyons comment utiliser la bibliothèque &lt;code&gt;tomb&lt;/code&gt; pour les contrôler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_une_goroutine_réalisant_des_requêtes_http&quot;&gt;Une goroutine réalisant des requêtes HTTP&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici un simple programme réalisant plusieurs choses:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Un channel nommé &lt;code&gt;stop&lt;/code&gt; est initialisé.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Une goroutine est démarrée. Cette goroutine va réaliser une requête HTTP sur &lt;code&gt;&lt;a href=&quot;https://mcorbin.fr&quot; class=&quot;bare&quot;&gt;https://mcorbin.fr&lt;/a&gt;&lt;/code&gt; toutes les 2 secondes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Une deuxième goroutine est démarrée. Cette goroutine écoute les signaux &lt;code&gt;SIGTERM&lt;/code&gt; envoyés à l&amp;#8217;application et poussera une valeur dans le channel &lt;code&gt;stop&lt;/code&gt; lors de la réception d&amp;#8217;un signal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;#8592;stop&lt;/code&gt; bloquera tant qu&amp;#8217;une valeur n&amp;#8217;aura pas été poussée dans ce channel (ce qui ne se produit qu&amp;#8217;en cas de réception d&amp;#8217;un &lt;code&gt;SIGTERM&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;package main

import (
	&quot;fmt&quot;
	&quot;net/http&quot;
	&quot;os&quot;
	&quot;os/signal&quot;
	&quot;syscall&quot;
	&quot;time&quot;
)

func main() {
	stop := make(chan string)
	go func() {
		for {
			time.Sleep(2 * time.Second)

			r, err := http.Get(&quot;https://mcorbin.fr&quot;)
			if err != nil {
				fmt.Println(err)
			}
			fmt.Printf(&quot;%d\n&quot;, r.StatusCode)
		}
	}()
	go func() {
		sig := make(chan os.Signal, 1)
		signal.Notify(sig, syscall.SIGTERM)
		s := &amp;lt;-sig
		fmt.Printf(&quot;received signal %s\n&quot;, s)
		stop &amp;lt;- &quot;done&quot;
	}()
	&amp;lt;-stop
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous compilez et lancez ce programme, vous devrez avoir cet output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./example
200
200
200
200
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En récupérant le PID du processus (avec &lt;code&gt;ps aux&lt;/code&gt; par exemple), vous pouvez envoyer un signal &lt;code&gt;SIGTERM&lt;/code&gt; avec la commande &lt;code&gt;kill PID&lt;/code&gt;. L&amp;#8217;output de votre programme devrait être:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
200
received signal terminated&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce programme semble fonctionner comme attendu mais présente un défaut majeur. Ici, la goroutine réalisant les requêtes HTTP sera terminée brutalement lors de l&amp;#8217;arrêt du programme. Ce n&amp;#8217;est pas très grave, mais imaginons que votre goroutine fasse des choses plus importantes. Peut être aimeriez-vous la terminer proprement ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela serait par exemple possible en utilisant un autre channel qui lui contrôlera l&amp;#8217;arrêt de la goroutine. Le programme suivant réalise cela:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;fmt&quot;
	&quot;net/http&quot;
	&quot;os&quot;
	&quot;os/signal&quot;
	&quot;syscall&quot;
	&quot;time&quot;
)

func main() {
	stop := make(chan string)
	done := make(chan string)
	go func() {
		for {
			time.Sleep(2 * time.Second)
			select {
			case &amp;lt;-done:
				fmt.Println(&quot;terminate the goroutine&quot;)
				stop &amp;lt;- &quot;done&quot;
				return
			default:
				r, err := http.Get(&quot;https://mcorbin.fr&quot;)
				if err != nil {
					fmt.Println(err)
				}
				fmt.Printf(&quot;%d\n&quot;, r.StatusCode)
			}
		}
	}()
	go func() {
		sig := make(chan os.Signal, 1)
		signal.Notify(sig, syscall.SIGTERM)
		s := &amp;lt;-sig
		fmt.Printf(&quot;received signal %s\n&quot;, s)
		done &amp;lt;- &quot;done&quot;
	}()
	&amp;lt;-stop
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, la goroutine gérant les signaux poussera une valeur dans le channel &lt;code&gt;done&lt;/code&gt; en cas de &lt;code&gt;SIGTERM&lt;/code&gt;. Ce channel est ensuite utilisé dans la première goroutine, qui captera cette valeur, poussera une nouvelle valeur dans le channel &lt;code&gt;stop&lt;/code&gt; ce qui terminera le programme.
De cette façon, vous avez la garantie que le traitement dans la clause &lt;code&gt;default&lt;/code&gt; du &lt;code&gt;select&lt;/code&gt; se terminera avant l&amp;#8217;arrêt du programme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;inconvénient de ce genre de système est la multiplication des channels, et le manque de gestion d&amp;#8217;erreurs (la goroutine ne peut pas informer si elle s&amp;#8217;est correctement terminée ou non).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tomb&quot;&gt;Tomb&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://godoc.org/gopkg.in/tomb.v2&quot;&gt;Tomb&lt;/a&gt; est une petite bibliothèque permettant de gérer de façon efficace l&amp;#8217;arrêt de vos goroutines. Voici le programme précédent réécrit en utilisant &lt;code&gt;tomb&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;package main

import (
	&quot;fmt&quot;
	&quot;net/http&quot;
	&quot;os&quot;
	&quot;os/signal&quot;
	&quot;syscall&quot;
	&quot;time&quot;

	&quot;gopkg.in/tomb.v2&quot;
)

func main() {
	var t tomb.Tomb
	t.Go(func() error {
		for {
			time.Sleep(2 * time.Second)
			select {
			case &amp;lt;-t.Dying():
				fmt.Println(&quot;terminate the goroutine&quot;)
				return nil
			default:
				r, err := http.Get(&quot;https://mcorbin.fr&quot;)
				if err != nil {
					fmt.Println(err)
				}
				fmt.Printf(&quot;%d\n&quot;, r.StatusCode)
			}
		}
	})
	t.Go(func() error {
		sig := make(chan os.Signal, 1)
		signal.Notify(sig, syscall.SIGTERM)
		s := &amp;lt;-sig
		fmt.Printf(&quot;received signal %s\n&quot;, s)
		t.Kill(nil)
		return nil
	})
	err := t.Wait()
	if err != nil {
		fmt.Println(err)
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout d&amp;#8217;abord, une variable &lt;code&gt;t tomb.Tomb&lt;/code&gt; est déclarée. Pas besoin de plus pour initialiser une tomb, les valeurs par défaut suffisent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit ensuite que les goroutines sont démarrées via &lt;code&gt;t.Go(&amp;#8230;&amp;#8203;)&lt;/code&gt;. Cette fonction est semblable à la fonction &lt;code&gt;go&lt;/code&gt; de Golang, sauf qu&amp;#8217;ici la tomb &quot;controlera&quot; la goroutine. De plus, l&amp;#8217;argument de &lt;code&gt;t.Go(&amp;#8230;&amp;#8203;)&lt;/code&gt; doit forcément être une fonction retournant une erreur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Autre changement, nous vérifions si notre goroutine se termine en consommant le channel &lt;code&gt;t.Dying()&lt;/code&gt;.&lt;br&gt;
Ensuite, dans notre goroutine gérant les signaux, la fonction &lt;code&gt;t.Kill(nil)&lt;/code&gt; est appelé en cas de &lt;code&gt;SIGTERM&lt;/code&gt;. Cette fonction placera la tomb dans l&amp;#8217;état &lt;code&gt;dying&lt;/code&gt;, et fermera le channel &lt;code&gt;t.Dying()&lt;/code&gt; (ce qui terminera donc notre première goroutine).&lt;br&gt;
Le paramètre de la fonction &lt;code&gt;Kill&lt;/code&gt; est la raison de l&amp;#8217;état de l&amp;#8217;arrêt de la goroutine, et doit être une &lt;code&gt;error&lt;/code&gt; ou &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_gestion_des_erreurs&quot;&gt;Gestion des erreurs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La fonction passée en paramètre de &lt;code&gt;t.Go&lt;/code&gt; doi, comme dit précédemment, forcément retourner une erreur. D&amp;#8217;ailleurs, voici ce que la documentation de &lt;code&gt;tomb&lt;/code&gt; indique à son sujet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;If f returns a non-nil error, t.Kill is called with that error as the death reason parameter.&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est donc possible de terminer une tomb en retournant une erreur depuis la goroutine, la fonction &lt;code&gt;Kill&lt;/code&gt; n&amp;#8217;a donc pas pas être appelée explicitement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La raison (e.g l&amp;#8217;erreur) de la mort de la goroutine peut donc avoir deux sources: l&amp;#8217;appel manuel à &lt;code&gt;t.Kill&lt;/code&gt; en passant une valeur non &lt;code&gt;nil&lt;/code&gt;, ou bien via une goroutine retournant une erreur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans mon code précédent, j&amp;#8217;appelle également &lt;code&gt;err := t.Wait()&lt;/code&gt;. La fonction &lt;code&gt;Wait()&lt;/code&gt; va bloquer jusqu&amp;#8217;à ce que la tomb meurt, et que &lt;code&gt;toutes les goroutines&lt;/code&gt; gérées par la tomb soient terminées. La fonction retourne ensuite la raison de la mort de la goroutine.&lt;br&gt;
Cette fonction a l&amp;#8217;avantage de nous garantir que les goroutines sont bien terminées lorsqu&amp;#8217;elle se &quot;débloque&quot; (mais attention aux deadlocks !).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;autres fonctions existent, comme &lt;code&gt;Alive&lt;/code&gt; ou &lt;code&gt;Dead&lt;/code&gt;, et sont très bien expliquées dans la  &lt;a href=&quot;https://godoc.org/gopkg.in/tomb.v2&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Petite précision sur &lt;code&gt;Wait()&lt;/code&gt;: la fonction bloquera pour toujours si aucune goroutine n&amp;#8217;est managée par la tomb (cf &lt;a href=&quot;https://github.com/go-tomb/tomb/issues/17&quot;&gt;cette issue&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_context&quot;&gt;Context !&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Go, on utilise généralement les &lt;a href=&quot;https://golang.org/pkg/context/&quot;&gt;context&lt;/a&gt; pour annuler/arrêter une requêtes, gérer des timeouts etc&amp;#8230;&amp;#8203; Cet article n&amp;#8217;a pas vocation à présenter les context en détail, mais il est à noter que &lt;code&gt;tomb&lt;/code&gt; supporte les context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le bloc &lt;code&gt;default&lt;/code&gt; de notre première goroutine pourrait par exemple ressembler à ça:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;ctx := t.Context(nil)
timeoutCtx, cancel := context.WithTimeout(ctx, 3*time.Second)
defer cancel()
req, err := http.NewRequest(&quot;GET&quot;, &quot;https://mcorbin.fr&quot;, nil)
if err != nil {
	return err
}
req = req.WithContext(timeoutCtx)
client := http.DefaultClient
r, err := client.Do(req)
if err != nil {
	return err
}
fmt.Printf(&quot;%d\n&quot;, r.StatusCode)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, nous créons un premier context depuis la tomb, puis un second context (gérant le timeout) depuis le premier context.&lt;br&gt;
Lorsque la tomb sera tuée, le context sera automatiquement terminé également, ce qui peut s&amp;#8217;avérer utile pour être sûr que certains appels (ici notre appel HTTP) soient terminés le plus vite possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pourrez par exemple voir ce genre de messages lorsque vous envoyez un &lt;code&gt;SIGTERM&lt;/code&gt; à l&amp;#8217;application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./example
200
received signal terminated
Get https://mcorbin.fr: context canceled&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;tomb&lt;/code&gt; est une bibliothèque extrêmement pratique, et est une brique de base pour mes projets Go. N&amp;#8217;hésitez pas à utiliser plusieurs tomb dans vos programmes, rien de nous force à contrôler toutes vos goroutines avec la même tomb (ce qui peut s&amp;#8217;avérer dangereux).&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;espère vous avoir convaincu de l&amp;#8217;utilité de cette bibliothèque ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Mon, 03 Dec 2018 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2018-05-12-ansible-naming/
</guid>
<link>
https://mcorbin.fr/posts/2018-05-12-ansible-naming/
</link>
<title>
Ansible naming conventions
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using Ansible, it&amp;#8217;s important to define naming conventions and to apply them for all your roles and playbooks. Here are mine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_all_variables_should_be_snake_case&quot;&gt;All variables should be snake_case&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The easiest rule:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;myappBindIp: &quot;127.0.0.1&quot; # not good
myapp_bin_Ip: &quot;127.0.0.1&quot; # not good
myapp_bind_ip: &quot;127.0.0.1&quot; # good&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_roles_and_groups_names&quot;&gt;Roles and groups names&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I use kebab-case for my roles and groups names (&lt;code&gt;haproxy&lt;/code&gt;, &lt;code&gt;kafka-manager&lt;/code&gt;&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_variables_defined_in_a_role&quot;&gt;Variables defined in a role&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All variables defined in a role (&lt;code&gt;defaults/main.yml&lt;/code&gt;, &lt;code&gt;vars/main.yml&lt;/code&gt;) should be prefixed with the role name. It prevents collisions between variables and also allows to instantly know at what role a variable belongs to. For example, a role installing HAProxy will probably need a variable specifying the version in &lt;code&gt;defaults/main.yml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;version: &quot;1.8&quot; # not good
haproxy_version: &quot;1.8&quot; # good&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes, it&amp;#8217;s tempting to use the same variable name in two roles if the variables should always have the same value (because being overrided somewhere). I think it&amp;#8217;s better to create one variable per role no matter what. For example, if we have &lt;code&gt;role-a&lt;/code&gt; and &lt;code&gt;role-b&lt;/code&gt;, and each one need to know a (common) database name, we could do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;role-a/defaults/main.yml&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;role_a_database_name: &quot;foo&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;role-b/defaults/main.yml&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;role_b_database_name: &quot;foo&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;group_vars/app.yml&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;database_name: &quot;foo&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;group_vars/role-a.yml&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;role_a_database_name: &quot;{{ database_name }}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;group_vars/role-b.yml&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;role_b_database_name: &quot;{{ database_name }}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;inventories/hosts&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;[app:children]
role-a
role-b

[role-a]
host1

[role-b]
host2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, each role has a specific variable defined for the database name. If the database name should always be the same, i can define a parent group (&lt;code&gt;app&lt;/code&gt;) and two child groups (one for each role, &lt;code&gt;role-a&lt;/code&gt; and &lt;code&gt;role-b&lt;/code&gt;). I can now share a variable between groups in the &lt;code&gt;group_vars&lt;/code&gt; files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach avoids side effects between roles, and simplifies future refactoring.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_registered_variables&quot;&gt;Registered variables&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I usually prefix registered variables by &lt;code&gt;_&amp;lt;rolename&amp;gt;&lt;/code&gt;, to differentiate them from defaults variables.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_handlers_names&quot;&gt;Handlers names&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s also important to name correctly your handlers. My convention is: &lt;code&gt;&amp;lt;target&amp;gt; | &amp;lt;action&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;- name: haproxy | reload
  become: true
  service:
    name: haproxy
    state: reloaded

- name: apt | update cache
  become: true
  apt:
    update_cache: yes&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Naming is super important. This will greatly simplify the maintenance of your Ansible projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sat, 12 May 2018 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2018-02-08-spring-generateur/
</guid>
<link>
https://mcorbin.fr/posts/2018-02-08-spring-generateur/
</link>
<title>
Spring, générateurs, des amis qui vous veulent du bien
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aujourd&amp;#8217;hui, j&amp;#8217;ai vu passer un tweet qui fut la goutte d&amp;#8217;eau après des mois de frustrations avec Spring. Il faut que je vous parle de Spring. Spring ? C&amp;#8217;est LE framework web Java. Il faut dire que c&amp;#8217;est tellement simple, surtout avec Spring Boot et un générateur du type JHipster. Simple, rly ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_simple_rly&quot;&gt;Simple, rly ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On le sait tous au fond de nous, Spring n&amp;#8217;est pas simple. Sous le capot, ça fait beaucoup, beaucoup de choses.&lt;br&gt;
Des états mutables partout, rapidement des dizaine de classes dans le projet (surtout quand on rajoute bonne vieille archi N tiers resources services repository DAO DTO VO WTF, et les mappers entre chaque classe), un arbre de dépendance chaotique avec des conflits permanents entre dépendances (merci les spring boot starter pour rajouter un peu plus de chaos dans l&amp;#8217;arbre de dépendance), toujours 10 façons de faire les choses, des montées de versions compliquées, des surcouches de surcouches, l&amp;#8217;injection de dépendance qui devient vite un bordel sans nom&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Même les experts sur la techno passeront de longues heures de debugging dans les tréfonds du framework et de Stackoverflow, car au fond personne ne sait vraiment pourquoi son bean est à null.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/spring/fine.jpg&quot; alt=&quot;everything is fine&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt; Cette image de Kyle Kingsbury tirée d&amp;#8217;un talk sur &lt;a href=&quot;http://jepsen.io/&quot;&gt;jepsen&lt;/a&gt; résume bien la situation &lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rajoutez à tout ça du Spring Security, du Spring Data, un Spring Cloud, des abstractions louches du type Spring Kafka, un peu d&amp;#8217;AspectJ ou encore un bon vieux Hibernate des familles, et bienvenue en enfer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bon, au moins, vous aurez le temps de prendre votre café le temps que votre microservice démarre.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_générateurs&quot;&gt;Les générateurs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais heureusement, les générateurs type JHipster sont là pour nous sauver. En un clic, j&amp;#8217;ai un projet qui démarre.&lt;br&gt;
Un projet qui démarre, mais avec une archi prédifinie probablement non adaptée à votre use case et difficilement modifiable sans tout péter. Un projet qui utilise vous ne savez quoi comme librairie, configuré vous ne savez comment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Votre pom fait également maintenant plus de 1000 lignes, vous tirez des dizaines de dépendances, un gros tas de plugins Maven. Vous ne maitrisez plus votre projet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La slide suivante, tirée du célèbre &lt;a href=&quot;https://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;Simple Made Easy&lt;/a&gt; de Rich Hickey résume là encore parfaitement la situation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/spring/simple.jpg&quot; alt=&quot;simple made easy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Spring et les générateurs sont faciles. Vous avez une appli qui boot en 2 minutes, mais je reste persuadé que sur le long terme, vous êtes perdant (du vécu sur un gros projet).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, une autre citation du talk est parfaitement dans le sujet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So the word in this case is about being familiar.&lt;br&gt;
&lt;br&gt;
I think that, collectively, we are infatuated with these two notions of easy. We are just so self-involved in these two aspects; it&amp;#8217;s hurting us tremendously. Right? All we care about is, you know, can I get this instantly and start running it in five seconds? It could be this giant hairball that you got, but all you care is, you know, can you get it.
 [&amp;#8230;&amp;#8203;]&lt;br&gt;
&lt;br&gt;
In particular, if you want everything to be familiar, you will never learn anything new because it can&amp;#8217;t be significantly different from what you already know and not drift away from the familiarity.
[&amp;#8230;&amp;#8203;]&lt;br&gt;
&lt;br&gt;
And it is, and I think you really have to ask yourself, you know, are you programming with a loom? You know, you&amp;#8217;re having a great time. You&amp;#8217;re throwing that shuttle back and forth. And what&amp;#8217;s coming out the other side is this knotted, you know, mess. I mean it may look pretty, but you have this problem. Right? What is the problem? The problem is the knitted castle problem. Right?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bon je vais m&amp;#8217;arrêter là avec les citations du talk car en fait je me rend compte que je pourrais mettre ici tout le transcript.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un projet informatique, c&amp;#8217;est pas une conférence où je montre que je peux boot une appli en 30 minutes sous les applaudissements de la salle.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_lock_in&quot;&gt;Lock in&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous avez commencé votre projet avec Spring, et maintenant vous voulez changer sans tout péter car Spring ne vous convient plus.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On entre dans le fameux débat framework vs librairie. Un framework comme Spring conditionnera votre façon de coder, posera un cadre extrêmement rigide sur ce que vous pouvez faire, et il sera très dur de sortir de ce cadre. C&amp;#8217;est généralement à ce moment que les gros hacks pour contourner le framework apparaissent dans le projet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous êtes malheureusement condamné à utiliser Spring jusqu&amp;#8217;à la mort du projet, deal with it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_spring_5&quot;&gt;Spring 5&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Bob, revenant du DevoxxFR&lt;/strong&gt;: Mais Spring 5 arrive, c&amp;#8217;est reactive !&lt;br&gt;
&lt;strong&gt;Alice&lt;/strong&gt;: Oui mais peut être que ce paradigme-&lt;br&gt;
&lt;strong&gt;Bob&lt;/strong&gt;: Non mais mon programme sera reactive ! Spring en reactive c&amp;#8217;est génial ! En plus je peux le faire en Kotlin !&lt;br&gt;
&lt;strong&gt;Alice&lt;/strong&gt;: &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Oui, j&amp;#8217;aurais pû mettre des balises &amp;lt;rant&amp;gt;&amp;lt;/rant&amp;gt; autour de ce post, et c&amp;#8217;est peut être légèrement (?) exagéré. Vous ne serez probablement pas d&amp;#8217;accord avec moi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pas grave, suis un sysadmin au quotidien, donc Spring ou pas Spring finalement&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/gif/dontcare.gif&quot; alt=&quot;i don&amp;#8217;t care&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 08 Feb 2018 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2018-01-26-ansible-templating/
</guid>
<link>
https://mcorbin.fr/posts/2018-01-26-ansible-templating/
</link>
<title>
Ansible role configuration: best practice
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s take for example HAProxy. This wonderful piece of software can be configured with hundreds of options. How to write an Ansible role to handle this, AND share this role accross multiple projects/teams/companies ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_naive_solution_the_boss_template&quot;&gt;The naive solution: the boss template&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use Ansible, you may have met the boss template: a big template, with dozens of variables (frequently nested) to handle all available configuration options, {% if %} and {% for %} jinja2 everywhere&amp;#8230;&amp;#8203; And when someone needs a new option, a new variable is added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Theses roles are nightmares to maintain. For &lt;a href=&quot;https://www.haproxy.org/download/1.8/doc/configuration.txt&quot;&gt;HAproxy&lt;/a&gt;, your template will be huge. Same thing for other softwares (softwares like Kafka, Elasticsearch&amp;#8230;&amp;#8203; also have a lot of configuration options).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, these roles are impossible to share between teams/open source, because they are often designed for a specific company use case, with a specific configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_move_configuration_outside_of_the_role&quot;&gt;Move configuration outside of the role.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s continue with HAProxy. Just write a simple HAProxy role: installing HAProxy, templating a default configuration, and dealing with restart/reload on configuration change. But let the person using the role override the default configuration files.&lt;br&gt;
You can see my HAProxy role &lt;a href=&quot;https://github.com/mcorbin/haproxy-ansible-role&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;code&gt;defaults/main.yml&lt;/code&gt;, define a variable containing a list of templates (HAProxy does not support loading configuration from a directory, so these files will be assembled together by the role):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;haproxy_templates:
  - src: haproxy.config.j2
    dest: 01_haproxy_config&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;haproxy.config.j2&lt;/code&gt; contains the default HAProxy configuration (the same you have when you install HAProxy using &lt;code&gt;apt-get&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, in &lt;code&gt;playbook_dir&lt;/code&gt; you will probably have this arborescence:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;playbook.yml
group_vars/
    haproxy.yml
templates/
    haproxy/
         my-config.j2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The user can now provide his own configuration for HAProxy, by overriding &lt;code&gt;haproxy_templates&lt;/code&gt; in &lt;code&gt;group_vars/haproxy.yml&lt;/code&gt; for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;haproxy_templates:
  - src: haproxy/my-config.j2
    dest: 01_my_config&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The user can put everything he wants in &lt;code&gt;my-config.j2&lt;/code&gt;, use his own configuration variables in the file without polluting the role.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The role stay simple and the user can do everything he wants.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moving the configuration out of a role is often the right thing to do. Just let the user override the whole role templates, and don&amp;#8217;t over conplexify the role itself. Simplicity is the key.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Fri, 26 Jan 2018 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-12-03-velocity-1/
</guid>
<link>
https://mcorbin.fr/posts/2017-12-03-velocity-1/
</link>
<title>
Velocity Londres 2017: jour 1
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;étais à O&amp;#8217;Reilly Velocity Londres les 19 et 20 Octobre 2017, et cet article résumera ma première journée de conférence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je ne parlerais pas forcément de tous les talks ou keynotes que j&amp;#8217;ai vu, mais ceux qui furent selon moi les plus intéressants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_organisation_de_la_conférence&quot;&gt;L&amp;#8217;organisation de la conférence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout d&amp;#8217;abord, bravo aux organisateurs !
La conférence est parfaitement organisée.
Elle se déroulait à l&amp;#8217;hôtel Hilton Métropole, et on sent le professionnalisme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y a de l&amp;#8217;espace, les salles sont grandes, bien équipées, l&amp;#8217;image et le son sont parfaits. Il y avait en tout 6 salles de conférences (donc 6 talks en parallèle), et les keynotes étaient réalisées dans une énorme salle (en fait 2 salles classiques rassemblées).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y avait également un grande salle contenant l&amp;#8217;espace sponsor avec des stands. C&amp;#8217;est aussi dans cette salle que l&amp;#8217;on prenait le repas du midi notamment.
J&amp;#8217;ai d&amp;#8217;ailleurs trouvé ce repas assez moyen, mais bon ce n&amp;#8217;est pas le plus important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Concernant les sujets des talks et keynotes, c&amp;#8217;est technique, assez spécialisé, et pile dans mon domaine. En même temps, une conférence qui titre &lt;code&gt;Build &amp;amp; maintain complex distributed systems&lt;/code&gt;, ça ne pouvait que m&amp;#8217;intéresser :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_keynotes&quot;&gt;Keynotes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Après être arrivé assez tôt, avoir pris mon petit déjeuner (gratuit chaque matin de conférence) et participé à un speed networking (histoire de faire connaissance avec d&amp;#8217;autres participants et de parler un peu anglais), je m&amp;#8217;installe confortablement pour les keynotes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_cloud_native_security_threat_or_opportunity&quot;&gt;Cloud native: Security threat or opportunity?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une Keynote intéressante fut celle de Liz Rice sur la sécurité des architectures dites &lt;strong&gt;Cloud natives&lt;/strong&gt;: les vm, conteneurs, orchestrateurs, et tout ce qui va avec.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout d&amp;#8217;abord, Liz Rice nous explique qu&amp;#8217;aujourd&amp;#8217;hui, on le sait pas forcément où le code tourne.
On a des centaines de VM/serveurs, certaines applications sont composées de dizaines de microservices, et les containers et orchestrateurs rajoutent une couche de complexité au dessus de tout ça.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La speaker expliquait aussi la différence entre &lt;strong&gt;l&amp;#8217;ancien temps&lt;/strong&gt; (ou le présent si vous travaillez pour un grand groupe Français ^^) où les serveurs étaient patchés (à la main ?) et maintenus en vie sur de longues périodes, là ou aujourd&amp;#8217;hui on va plutôt essayer de mettre en place des infrastructures immuables (en gros on pète et on reconstruit).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais quid de la sécurité dans ces nouvelles architectures ? Vu la multiplicité des briques logicielles et la complexité des architectures, elle doit être intégrée directement dans le pipeline de déploiement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par exemple, on peut scanner nos containers avant et après le build pour rechercher des vulnérabilités: voir les versions des produits déployés, vérifier que l&amp;#8217;utilisateur lançant un process n&amp;#8217;est pas root, vérifier l&amp;#8217;isolation du container par rapport à l&amp;#8217;host&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Concernant l&amp;#8217;host, des OS spécialisés pour faire tourner des containers (CoreOS, RancherOS&amp;#8230;&amp;#8203;) peuvent également être une solution. Je n&amp;#8217;ai personnellement pas d&amp;#8217;avis sur ces OS, ne les ayant jamais utilisés.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bien sûr, les IDS traditionnels peuvent toujours être utilisés si besoin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Concernant le réseau, là aussi il faut sécuriser les communications, que ce soit au niveau chiffrement, authentification, ou restrictions (j&amp;#8217;évite que des services qui n&amp;#8217;ont pas à discuter entre eux puissent le faire).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enfin, des protections &quot;au runtime&quot; comme SELinux ou AppArmor ont été évoquées.
La présentation s&amp;#8217;est finie sur une petite démo de la faille Shellshock où un serveur httpd pouvait exécuter du code arbitraire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, une keynote intéressante, mais un détail méritait d&amp;#8217;être évoqué et ne l&amp;#8217;a pas été selon moi. La meilleure sécurité, c&amp;#8217;est quand même d&amp;#8217;essayer d&amp;#8217;avoir une architecture la plus simple et comprehensible possible avec les contraintes de scalabilité/tolérance aux pannes de notre produit. Restez simple !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_why_an_interactive_picture_is_worth_a_thousand_numbers&quot;&gt;Why an interactive picture is worth a thousand numbers ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Peut être ma keynote préférée des deux jours, ça envoyait du lourd ! Sara-Jane Dunn travaille pour Microsoft Research, et nous expliquait ici l&amp;#8217;importance des visualisations par rapport notamment à des chiffres bruts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aujourd&amp;#8217;hui, on a de plus en plus de données, de logs&amp;#8230;&amp;#8203; On calcule souvent des statistiques sur ces données, mais ces statistiques sont parfois trompeuses !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deux jeux de données peuvent produire des statistiques (moyennes, médianes&amp;#8230;&amp;#8203;) semblables alors que les données n&amp;#8217;ont rien à voir.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus, on doit parfois partager ces données avec des collègues, pas forcément de notre domaine (par exemple avec des scientifiques en biologie alors que nous on est informaticien).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est là que les visualisations interviennent.
Pouvoir représenter et explorer des données de façon graphique est devenu indispensable aujourd&amp;#8217;hui.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La speaker, à l&amp;#8217;aide de nombreux exemples, nous montrait comment des visualisations aident à résoudre des problèmes parfois très complexes. Les exemples venaient du monde de la biologie, où un chercheur a même avoué que sans l&amp;#8217;outil de visualisation développé par la speaker, ces recherches n&amp;#8217;auraient probablement pas abouties.
Les visualisations lui avaient permis de voir son problème sous un angle totalement différent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/velocity/visu1.jpg&quot; alt=&quot;Exemples de deux visualisations représentant les mêmes données mais où une est meilleure.&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Ici, on voit clairement que la visualisation 2 (avec les courbes) est plus parlante que la première (avec les couleurs).&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La speaker présentait ensuite quelques techniques pour créer des visualisations pertinentes. Cette slide montre bien par exemple qu&amp;#8217;une visualisation à base de formes/graphes est largement plus pertinente qu&amp;#8217;une visualisation à base de couleurs.
L&amp;#8217;intéractivité est aussi aujourd&amp;#8217;hui la clé de visualisations pertinentes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, investissez du temps pour créer les outils permettant de visualiser vos données !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_talks&quot;&gt;Talks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_consumer_driven_contract_testing_with_pact_and_docker&quot;&gt;Consumer-driven contract testing with Pact and Docker&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce talk, donné par Harry Winser, expliquait les stratégies et les outils et process développés pour valider des API HTTP dans une architecture microservice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les problèmes pour les API HTTP sont toujours les mêmes. Comment gérer la montée de version d&amp;#8217;un service ? Comment je m&amp;#8217;assure que les clients d&amp;#8217;une version antérieure sont toujours compatibles avec la nouvelle version ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une solution peut être les &lt;strong&gt;consumer driven contracts&lt;/strong&gt;. On définit un contrat d&amp;#8217;interface pour notre API. Cela permet aux équipes de travailler de manière indépendantes, et d&amp;#8217;écrire des tests pour valider nos contrats.
Une phrase prononcée intéressante était &lt;strong&gt;write your consumer first&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attention, ces contrats ne concernent que la partie API, et ne permet donc pas de vérifier la logique métier des applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le speakeur utilisait dans son entreprise un format appelé Pact, Ce format permet de décrire une requête HTTP, et s&amp;#8217;intègre facilement dans des pipelines de déploiements grâce à une intégration avec de nombreux langages/plateformes (comme par exemple la JVM).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les contrats Pact sont stockés dans une base appelée &lt;strong&gt;Pact broker&lt;/strong&gt;. Quand une application est build, son artifact (comme par exemple son .jar pour une application Java) est poussée dans un Nexus ou autre, et les contrats Pact de cette application (et pour cette version) dans le broker.
Il est aussi important de stocker des stubs/mock de l&amp;#8217;API de l&amp;#8217;application, qui seront ensuite utilisés par la suite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans l&amp;#8217;intégration continue des consumers d&amp;#8217;une API, on utilise les stubs de l&amp;#8217;API générés précédemment et les fichiers Pact présent dans le broker pour vérifier que l&amp;#8217;API correspond bien à un ou des contrats Pact et si les clients peuvent communiquer avec.&lt;br&gt;
Par exemple, un client communiquant avec 3 API pourra tester si il valide le contrat Pact pour ces 3 services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est aussi possible de tester différentes versions de l&amp;#8217;API, pour voir si on garde une rétrocompatibilité en cas d&amp;#8217;une montée de version par exemple.
Ensuite, le résultat de ces tests sont publiés pour être exploités.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce talk était intéressant. Je n&amp;#8217;avais jamais entendu parler de Pact, le format et l&amp;#8217;écosystème autour semblent prometteurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;../../pdf/velocity_2017/pact_docker.pdf&quot;&gt;Slides&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_real_world_consistency_explained&quot;&gt;Real-world consistency explained&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attention, on passe au meilleur talk des deux jours !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce talk, donné par Uwe Friedrichsen, parlait de systèmes distribués, de consensus, de niveaux d&amp;#8217;isolations dans les base de données&amp;#8230;&amp;#8203; Bref, d&amp;#8217;un sujet super important mais que l&amp;#8217;on ne croise pas souvent.&lt;br&gt;
je consacrerais d&amp;#8217;ailleurs un article sur ces sujets prochainement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_le_passé&quot;&gt;Le &quot;passé&quot;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le speaker commence tout d&amp;#8217;abord à parler du &quot;passé&quot; (les guillemets sont importante).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a donc depuis longtemps des bases de données relationnelles, avec des propriétés ACID (Atomicité, Cohérence, Isolation, Durabilité), Ces base de données fonctionnent très bien, il est facile de raisonner avec (ACID apporte sur le papier des propriétés fortes intéressantes).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais (car il y a toujours un mais), ACID != Serializability (en résumé que les transactions sont exécutées sans se marcher dessus) ! Des anomalies peuvent apparaîtres, et les transactions ne sont pas si isolées qu&amp;#8217;on ne le pense (d&amp;#8217;où les différents niveaux d&amp;#8217;isolations dans les bases de données: read commited, snapshot isolation, serializability&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/velocity/write_skew.jpg&quot; alt=&quot;exemple de write skew&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Exemple de write skew tiré de l&amp;#8217;excellent &lt;a href=&quot;https://dataintensive.net/&quot;&gt;Designing Data-Intensive Applications&lt;/a&gt; de Martin Kleppmann. Ici, deux transactions se chevauchent et provoquent un bug dans le système (plus aucun médecin n&amp;#8217;est d&amp;#8217;asteinte). Cette erreur peut se produire en snapshot isolation.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;le problème du mode serializable dans une base de donnée est la grande perte de performance associée (il faut par exemple parfois locker complètement les tables pour avoir ce niveau d&amp;#8217;isolation, ce qui diminue fortement les performances).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus, les configurations par défaut des bases de données n&amp;#8217;activent pas la sérialization.&lt;br&gt;
Ces configurations par défaut, couplées à une méconnaissance des différents niveaux d&amp;#8217;isolations des bases de données, peuvent causer de sérieux soucis (et difficilement détectables) en production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, les bases de données ACID sont très utiles, fournissent un certain nombre de garanties, mais il faut faire attention car des problèmes de cohérences peuvent toujours se produire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/velocity/consistencyfull.jpg&quot; alt=&quot;Les différents niveaux d isolations des transactions dans une base de données&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Vous croyez le monde des transactions facile ?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_le_présent&quot;&gt;Le &quot;présent&quot;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cloud, NoSQL, microservices&amp;#8230;&amp;#8203; On a maintenant des architectures distribués. Et cela &lt;strong&gt;doit&lt;/strong&gt; vous inquiéter ! Notamment les architectures microservices, où un mauvais découpage peut avoir des conséquences désastreuses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Parlons maintenant un peu de NoSQL. On avait avant les propriétés ACID pour les bases de données traditionnelles, on parle parfois de BASE (Basically Available, Soft state, Eventual consistency) pour les base de données NoSQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais en dehors de l&amp;#8217;aspect technologique, un gros problème de ces base de données est le marketing et le buzz qui font que les gens l&amp;#8217;utilisent sans n&amp;#8217;avoir aucune connaissance sur la technologie ou des systèmes distribués en général.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les choix de base de données se font donc pour des raisons non techniques, ce qui conduit inévitablement à la catastrophe.
Anecdote personnelle, mais j&amp;#8217;ai déjà vu des décideurs hésiter entre entre Couchbase et Cassandra (wtf) ou entre Cassandra et Redis (wtf^10000), sans même vraiment connaître ni le besoin ni ces technos !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un grand nombre de projets n&amp;#8217;ont pas besoin de bases NoSQL. Le speaker donnait l&amp;#8217;exemple de MySQL qui peut très bien traiter plusieurs milliards d&amp;#8217;enregistrements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les base de données NoSQL ont des use cases, mais il est limité ! Il faut également très bien comprendre les garanties (et l&amp;#8217;absence de garanties) qu&amp;#8217;offrent les base de données NoSQL, notamment les garanties de cohérences des données et de disponibilité de la base.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le speaker a ensuite présenté différents problèmes pouvant se produire dans une base de données distribuée, comme par exemple le fameux &lt;strong&gt;read your own write&lt;/strong&gt;, ou alors que contrairement à une croyance populaire, définir un quorum en lecture ne veut pas dire avoir un état cohérent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Etait également présenté quelques techniques pour gérer ces problèmes de cohérences, comme par exemple le &lt;strong&gt;read repair&lt;/strong&gt;. Etait évoqué également les difficultés à travailler côté développement avec une base de données BASE, où l&amp;#8217;absence de transactions et les joies des systèmes distribués peuvent causer des surprises.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_en_conclusion&quot;&gt;En conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe aujourd&amp;#8217;hui une multitude d&amp;#8217;outils, ces derniers étant quelque part  entre ACID et BASE niveau cohérence des données, le choix des technologies doit donc se faire de manière intelligence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attention au marketing et aux promesses des vendeurs qui viennent vous vendre du rêve.
Attention aux base de données NoSQL et aux architectures distribuées en général, et toujours se poser la question &lt;strong&gt;&quot;est ce que j&amp;#8217;ai vraiment besoin de ça ?&quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il faut également comprendre son système, et les différents incidents qui peuvent se produire.
Même les personnes d&amp;#8217;administrant pas mais utilisant les outils doivent le comprendre, comme par exemple les développeurs.
Ces derniers doivent connaître les potentiels problèmes pouvant se produire avec des bases de données NoSQL (ou même SQL avec un niveau d&amp;#8217;isolation faible) pour pouvoir les requêter correctement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et surtout, surtout, &lt;strong&gt;pas&lt;/strong&gt; de transactions entre différents services/outils de storage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Encore merci au speaker pour ce talk génial, que l&amp;#8217;on devrait diffuser à chaque personne prononçant les mots &lt;strong&gt;NoSQL&lt;/strong&gt; et &lt;strong&gt;microservice&lt;/strong&gt; en entreprise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;../../pdf/velocity_2017/real_world_consistency.pdf&quot;&gt;Slides&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_surviving_failure_in_rabbitmq&quot;&gt;Surviving failure in RabbitMQ&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce talk donné par  Lorna Mitchell traitait des queues de messages et plus particulièrement de RabbitMQ.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La speakeur commençait par décrire l&amp;#8217;utilité d&amp;#8217;une queue de message: asynchronisme/communication entre applications, mise en place assez facile, nombre de workers ajustables en fonction de la charge&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais comme d&amp;#8217;habitude, on peut avoir des erreurs. Un message peut ne pas être traité. Il faut donc se poser la question les garanties de traitement de notre système (at least once, at most once&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ces garanties de traitements nous forcent donc à réaliser du code défensif (par exemple avec une garantie &lt;strong&gt;at least once&lt;/strong&gt; au niveau du broker, il est possible d&amp;#8217;éviter de traiter deux fois le même message en faisant le travail côté application).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est également possible d&amp;#8217;essayer de récupérer des erreurs en poussant un message traité comme erreur dans un exchange particulier du broker (dead letter dans RabbitMQ), pour éventuellement le traiter ultérieurement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La speakeur insistait également sur l&amp;#8217;obligation de monitorer les queues de messages, comme par exemple en reportant le nombre de messages dans les différentes queues, ou encore le temps de traitement des messages par les workers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configurer une taille de queue maximale et un TTL sur les messages pour éviter qu&amp;#8217;une queue grandisse pour toujours peut également être intéressant. De plus, les messages rejetés peuvent éventuellement être injectés dans l&amp;#8217;exchange &lt;strong&gt;dead letter&lt;/strong&gt; et traités ensuite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, un talk intéressant sur les queues de messages, avec RabbitMQ comme exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_traefik_make_load_balancing_great_again&quot;&gt;Traefik: Make load balancing great again&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce talk donné par Emile Vauge nous présentait Traefik. Tout d&amp;#8217;abord, ça fait du bien d&amp;#8217;enfin voir un speaker Français ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Emile nous expliquait donc ce qu&amp;#8217;est &lt;a href=&quot;https://traefik.io/&quot;&gt;Traefik&lt;/a&gt;, que je connaissais déjà très bien pour connaître l&amp;#8217;équipe autour et avoir déjà utilisé Traefik.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/img/velocity/traefik.png&quot; alt=&quot;logo de Traefik&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traefik est donc un reverse proxy conçu pour les infrastructures d&amp;#8217;aujourd&amp;#8217;hui, c&amp;#8217;est à dire où les serveurs et applications vont et viennent.
Les solutions de load balancing traditionnelles ne sont pas vraiment prévues pour ce genre d&amp;#8217;infrastructures (bien que beaucoup d&amp;#8217;efforts sont actuellement fait sur des produits comme HAproxy pour que ce soit le cas).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traefik peut donc se brancher sur un backend (un orchestrateur comme Kubernetes ou Mesos, Docker Swarm, Consul, Etcd&amp;#8230;&amp;#8203;) et générer sa configuration à partir de celà. En cas de changement sur le backend (par exemple, un nouveau pod démarre sur votre cluster Kubernetes), Traefik mettra automatiquement à jour sa configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traefik supporte également nativement &lt;a href=&quot;https://letsencrypt.org&quot;&gt;Let&amp;#8217;s Encrypt&lt;/a&gt; pour générer des certificats.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Plusieurs slides étaient consacrés aux dernières releases de Traefik, et la quantité de nouveautés à chaque release est impressionnante: Custom headers, statd/datadog integration, proxy protocol, HTTP2, Websockets&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a également eu droit à une démo où on pouvait voir la réactivité de Traefik lorsque la configuration du backend change, et des stickers ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bravo à Emile et à toute la team de &lt;a href=&quot;https://containo.us/&quot;&gt;Containous&lt;/a&gt; pour le travail accompli. Je suis sûr que Traefik est un produit que l&amp;#8217;on rencontrera de plus en plus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;../../pdf/velocity_2017/traefik.pdf&quot;&gt;Slides&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette première journée s&amp;#8217;est ensuite terminée dans un bar/restaurant privatisé pour l&amp;#8217;occasion avec pizza/bières gratuites ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;j&amp;#8217;ai aussi découvert ce superbe nom de restaurant sur le chemin du retour vers mon Airbnb:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/velocity/chien.jpg&quot; alt=&quot;Un restaurant nommé les couilles du chien&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;aimerais conclure par la chose qui m&amp;#8217;a le plus plût durant cette conférence: les gens (speaker comme spectateurs) savaient de quoi ils parlaient et connaissaient les tradeoff des différentes technologies qu&amp;#8217;ils ou elles utilisent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Personne ne vendait de solutions miracles, et beaucoup de gens étaient très critiques envers le &lt;strong&gt;buzzword driven development&lt;/strong&gt;. Et ça, ça fait plaisir !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sun, 03 Dec 2017 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-08-09-coalesce/
</guid>
<link>
https://mcorbin.fr/posts/2017-08-09-coalesce/
</link>
<title>
A tour of Riemann : Coalesce
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A small article about the Riemann coalesce stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_it_works&quot;&gt;How it works ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;http://riemann.io/api/riemann.streams.html#var-coalesce&quot;&gt;API doc&lt;/a&gt; is pretty clear. Coalesce remembers the most recent event for each host/service, and send every N seconds a vector containing the most recent states.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(streams
  (with :ttl 60
    (coalesce 10
     #(info %))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At time &lt;strong&gt;t = 1&lt;/strong&gt;  : Riemann receives `&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:host &quot;foo&quot; :service &quot;bar&quot; :metric 10 :time 1}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Coalesce instantly emits :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;[{:host &quot;foo&quot; :service &quot;bar&quot; :metric 20 :time 1}]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Coalesce will always emit the first event it receives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At time &lt;strong&gt;t = 4&lt;/strong&gt;  : Riemann receives&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:host &quot;foo&quot; :service &quot;foobar&quot; :metric 12 :time 4}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At time &lt;strong&gt;t = 7&lt;/strong&gt;  : Riemann receives&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:host &quot;foo&quot; :service &quot;bar&quot; :metric 30 :time 7}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At time &lt;strong&gt;t = 11&lt;/strong&gt; : Coalesce emits&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;[{:host &quot;foo&quot; :service &quot;foobar&quot; :metric 12 :time 4} {:host &quot;foo&quot; :service &quot;bar&quot; :metric 30 :time 7}]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, coalesce emits the last event seen for each host/service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At time &lt;strong&gt;t = 13&lt;/strong&gt; : Riemann receives&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:host &quot;foo&quot; :service &quot;bar&quot; :metric 40 :time 13}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At time &lt;strong&gt;t = 21&lt;/strong&gt; : Coalesce emits&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;[{:host &quot;foo&quot; :service &quot;foobar&quot; :metric 12 :time 4} {:host &quot;foo&quot; :service &quot;bar&quot; :metric 40 :time 13}]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, coalesce emits the last states for each host and service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, an example.
I want to monitor a Cassandra cluster, and fire an email if the &lt;code&gt;cpu mean&lt;/code&gt; of the cluster is greater than 60.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_code&quot;&gt;The code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, create a &lt;code&gt;mycorp/system/cpu.clj&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns mycorp.system.cpu
  &quot;check cpu&quot;
  (:require [riemann.config :refer :all]
            [riemann.streams :refer :all]
            [riemann.test :refer :all]
            [riemann.folds :as folds]
            [mycorp.output.email :as email]
            [clojure.tools.logging :refer :all]))

(def cpu-mean-alert-cassandra
  &quot;A stream checking if the cpu mean for all hosts with service = `cpu` and tagged `cassandra` is &amp;gt; to 60&quot;
  ;; filter by services and tags
  (where (and (tagged &quot;cassandra&quot;) (service &quot;cpu&quot;))
  ;; every 10 seconds, send the last state for each host/service
  ;; :service will always be &quot;cpu&quot; so we only have differents hosts on events
    (coalesce 10
      ;; apply mean using smap to compute the cpu mean
      (smap folds/mean
        ;; update the event, remove :host and update the description
        (with {:host nil :service &quot;cassandra-cpu-mean&quot;}
          ;; check if mean &amp;gt; 60
          (where (&amp;gt; (:metric event) 60)
            ;; send email
            (io (email/email &quot;foo@mcorbin.fr&quot;))
            ;; tap for tests
            (tap :cpu-mean-alert-tap)))))))

(tests
  (deftest cpu-mean-alert-test
    (let [result (inject! [mycorp.system.cpu/cpu-mean-alert-cassandra]
                          [{:host &quot;foo&quot;
                            :service &quot;cpu&quot;
                            :metric 65
                            :tags [&quot;cassandra&quot;]
                            :ttl 60
                            :time 1}
                           {:host &quot;bar&quot;
                            :service &quot;cpu&quot;
                            :metric 50
                            :tags [&quot;cassandra&quot;]
                            :ttl 50
                            :time 2}
                           ;; not tagged
                           {:host &quot;baz&quot;
                            :service &quot;cpu&quot;
                            :metric 99
                            :tags []
                            :ttl 60
                            :time 3}
                           {:host &quot;foobar&quot;
                            :service &quot;cpu&quot;
                            :metric 95
                            :tags [&quot;cassandra&quot;]
                            :ttl 60
                            :time 12}
                           {:host &quot;foobar&quot;
                            :service &quot;riemann&quot;
                            :metric 95
                            :tags []
                            :ttl 60
                            :time 22}])]
      (is (= (:cpu-mean-alert-tap result)
            [{:service &quot;cassandra-cpu-mean&quot;
              :metric 65
              :tags [&quot;cassandra&quot;]
              :ttl 60
              :time 1}
             {:service &quot;cassandra-cpu-mean&quot;
              :metric 70
              :tags [&quot;cassandra&quot;]
              :ttl 60
              :time 12}])))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(Don&amp;#8217;t forget to add &lt;code&gt;cpu.clj&lt;/code&gt; file in your riemann.config file ;))&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;code&gt;cpu-mean-alert-cassandra&lt;/code&gt; stream, i first filter Cassandra/cpu events with &lt;code&gt;where&lt;/code&gt;, and use &lt;code&gt;coalesce 10&lt;/code&gt; (so coalesce will emit a vector of events every 10 seconds).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After that, i use &lt;code&gt;smap&lt;/code&gt; to apply &lt;code&gt;folds/mean&lt;/code&gt; on the vector of events emitted by coalesce. I now have an event representing the &lt;code&gt;cpu mean&lt;/code&gt; of the cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I use &lt;code&gt;with&lt;/code&gt; to update the event, and &lt;code&gt;where&lt;/code&gt; again to check the mean value against a threshold.
If the mean is &amp;gt; to 60, i fire an email.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Easy !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_more_use_cases&quot;&gt;More use cases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use coalesce when you want to aggregate common events from multiple hosts.
In the previous example, i used &lt;code&gt;folds/mean&lt;/code&gt; to calculate the mean, but i could do anything i want, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get max, min etc&amp;#8230;&amp;#8203; values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check for unbalanced values between hosts, for example : why do i have 10 nodes at 30 % CPU but one constantly at 95 % ? I used coalesce to detects unbalanced partitions in Kafka topics (caused by a bad partition key) for example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_event_expiration&quot;&gt;Event expiration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Coalesce takes care to expire events. From the &lt;a href=&quot;http://riemann.io/api/riemann.streams.html#var-coalesce&quot;&gt;API&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;When events expire, they are included in the emitted sequence of events once, and removed from the state table thereafter.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This stream is perfect for monitoring distributed systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code &lt;a href=&quot;https://github.com/mcorbin/riemann-configuration-example&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 09 Aug 2017 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-05-21-riemann-by-stream/
</guid>
<link>
https://mcorbin.fr/posts/2017-05-21-riemann-by-stream/
</link>
<title>
A tour of Riemann : check disk, by, throttle, email
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How tu use the (by) stream in Riemann ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_problem&quot;&gt;The problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I now want to monitor disk usage.
If a filesystem is 80 % full, fire an email.
But i don&amp;#8217;t want to be spammed , so i want at most 2 mails every hours &lt;strong&gt;for each distinct full filesystem&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will receive events in Riemann like this one :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:host &quot;debian-mathieu.corbin&quot;
 :service &quot;df-root/percent_bytes-used&quot;
 :state nil
 :description nil
 :metric 73.04872131347656
 :tags []
 :time 1495380355
 :ttl 20.0}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, the &lt;code&gt;root&lt;/code&gt; fs is 73 % full for host &lt;code&gt;debian-mathieu.corbin&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_email&quot;&gt;Email&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can &lt;a href=&quot;http://riemann.io/howto.html#send-email&quot;&gt;send email&lt;/a&gt; using Riemann.
Let&amp;#8217;s define a stream to send email.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a file &lt;code&gt;mycorp/output/email.clj&lt;/code&gt; :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns mycorp.output.email
  &quot;send email&quot;
  (:require [riemann.config :refer :all]
            [riemann.streams :refer :all]
            [riemann.test :refer :all]
            ;; we should import riemann.email
            [riemann.email :refer :all]
            [clojure.tools.logging :refer :all]))

;; this stream can be used to send email
(def email (mailer {:from &quot;me@mcorbin.fr&quot;
                    :host &quot;mail.foo.com&quot;
                    :user &quot;foo&quot;
                    :password &quot;bar&quot;}))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, we use &lt;code&gt;def&lt;/code&gt; to define a new stream named email.
We will use it to send emails.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_throttle&quot;&gt;Throttle&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will use &lt;code&gt;throttle&lt;/code&gt; to limit the number of email.
Take a look at &lt;a href=&quot;http://riemann.io/howto.html#roll-up-and-throttle-events&quot;&gt;the Riemann howto&lt;/a&gt; for more informations about throttle&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_solution&quot;&gt;Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_tests&quot;&gt;Tests&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s create a file &lt;code&gt;mycorp/system/disk.clj&lt;/code&gt; and write the tests for our use case:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns mycorp.system.disk
  &quot;Check disk&quot;
  (:require [riemann.config :refer :all]
            [riemann.streams :refer :all]
            [riemann.test :refer :all]
            [mycorp.output.email :as email]
            [clojure.tools.logging :refer :all]))

(def disk-stream)

(tests
 (deftest disk-stream-test
   ;; i inject test events only in disk-stream
   (let [result (inject! [mycorp.system.disk/disk-stream]
                         [;; ok
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;df-root/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 73
                           :tags []
                           :time 1
                           :ttl 20.0}
                          ;; random event
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;random_service&quot;
                           :state nil
                           :description nil
                           :metric 100
                           :tags []
                           :time 1
                           :ttl 20.0}
                          ;; debian-mathieu.corbin/root full
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;df-root/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 90
                           :tags []
                           :time 3
                           :ttl 20.0}
                          ;; debian-mathieu.corbin/var-log full
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;df-var-log/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 90
                           :tags []
                           :time 4
                           :ttl 20.0}
                          ;; debian-mathieu.corbin/root full
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;df-root/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 90
                           :tags []
                           :time 4
                           :ttl 20.0}
                          ;; debian-mathieu.corbin/root full
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;df-root/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 91
                           :tags []
                           :time 4
                           :ttl 20.0}
                          ;; guixsd-mathieu.corbin/root full
                          {:host &quot;guixsd-mathieu.corbin&quot;
                           :service &quot;df-root/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 90
                           :tags []
                           :time 4
                           :ttl 20.0}
                          ;; debian-mathieu.corbin/root full
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;df-root/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 93
                           :tags []
                           :time 3605
                           :ttl 20.0}])]
     ;; :disk-stream-tap-1 should contains all events indicating a full fs
     (is (= (:disk-stream-tap-1 result)
            [{:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 3
              :ttl 20.0}
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-var-log/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 4
              :ttl 20.0}
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 4
              :ttl 20.0}
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 91
              :tags []
              :time 4
              :ttl 20.0}
             {:host &quot;guixsd-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 4
              :ttl 20.0}
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 93
              :tags []
              :time 3605
              :ttl 20.0}]))
     ;; :disk-stream-tap-2 should contains all events passed to the email stream.
     ;; for each host/service, we want maximum 2 mails every 3600 seconds
     (is (= (:disk-stream-tap-2 result)
            [ ;; first debian-mathieu/root
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 3
              :ttl 20.0}
             ;; first debian-mathieu/var-log
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-var-log/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 4
              :ttl 20.0}
             ;; second debian-mathieu/root
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 4
              :ttl 20.0}
             ;; first debian-mathieu/guixsd
             {:host &quot;guixsd-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 4
              :ttl 20.0}
             ;; next window (time = 3605), first debian-mathieu/root
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 93
              :tags []
              :time 3605
              :ttl 20.0}])))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this test suite, we have 2 &lt;code&gt;:tap&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first one, &lt;code&gt;:disk-stream-tap-1&lt;/code&gt;, will contain all events representing a fs &amp;gt; to 80 %.
The second, &lt;code&gt;:disk-stream-tap-2&lt;/code&gt;, all events actually send by email.
The distinction is important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remember, we only want 2 email per hour for &lt;strong&gt;each distinct full filesystem&lt;/strong&gt; to not be spammed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Look at the &lt;code&gt;:disk-stream-tap-2&lt;/code&gt; tests.
We injected 3 events commented &lt;code&gt;debian-mathieu.corbin/root full&lt;/code&gt;, but in &lt;code&gt;:disk-stream-tap-2&lt;/code&gt; we only had 3, because of &lt;code&gt;throttle&lt;/code&gt; (2 in the first 3600 seconds, 1 after).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don&amp;#8217;t forget to add in riemann.config the new files :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(include &quot;mycorp/output/email.clj&quot;)
(include &quot;mycorp/system/ram.clj&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_first_incorrect_solution&quot;&gt;First (incorrect) solution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We saw in a previous article how to perform a simple check. Why not reuse it with &lt;code&gt;throttle&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(def disk-stream
  &quot;Check if disk if &amp;gt; to 80 %, email if it is. Send only 2 email for each alert type.&quot;
  ;; #&quot;percent_bytes-used$&quot; is a regex, we only want events where :service match the regex
  (where (and (service #&quot;percent_bytes-used$&quot;)
              ;; Test if disk is 80 % full
              (&amp;gt; (:metric event) 80))
    (tap :disk-stream-tap-1)
    ;; 2 events max every 3600 secondes using throttle
    (throttle 2 3600
      (tap :disk-stream-tap-2)
      ;; send email using the email stream defined in mycorp.output.email
      (io (email/email &quot;foo@mcorbin.fr&quot;)))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Launch &lt;code&gt;riemann test riemann.config&lt;/code&gt;. It fails in the second test (&lt;code&gt;:disk-stream-tap-2&lt;/code&gt;).
Why ? because in this solution, we only send 2 email &lt;strong&gt;regardless the host/service fields&lt;/strong&gt;.
If we have 10 alerts for 10 differents filesystem, with this solution we will send &lt;strong&gt;only&lt;/strong&gt; 2 emails for the 2 first alerts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We want to have independant &lt;code&gt;throttle&lt;/code&gt; for each host/filesystem.
And for this, we will use &lt;a href=&quot;http://riemann.io/howto.html#distinct-streams-for-each-host-service-etc&quot;&gt;the by stream&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_final_solution&quot;&gt;Final solution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We just need to add &lt;code&gt;(by)&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(def disk-stream
  &quot;Check if disk if &amp;gt; to 80 %, email if it is. Send only 2 email for each alert type.&quot;
  ;; #&quot;percent_bytes-used$&quot; is a regex, we only want events where :service match the regex
  (where (and (service #&quot;percent_bytes-used$&quot;)
              ;; Test if disk is 80 % full
              (&amp;gt; (:metric event) 80))
    (tap :disk-stream-tap-1)
    ;; use (by) to have independant streams for each host/service couple
    (by [:host :service]
      ;; 2 events max every 3600 secondes using throttle
      (throttle 2 3600
        (tap :disk-stream-tap-2)
        ;; send email using the email stream defined in mycorp.output.email
        (io (email/email &quot;foo@mcorbin.fr&quot;))))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;riemann test riemann.config&lt;/code&gt; is now passing !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You now know how to send email, and how to use &lt;code&gt;by&lt;/code&gt; and &lt;code&gt;throttle&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code &lt;a href=&quot;https://github.com/mcorbin/riemann-configuration-example&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sun, 21 May 2017 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-05-04-simple-check/
</guid>
<link>
https://mcorbin.fr/posts/2017-05-04-simple-check/
</link>
<title>
A tour of Riemann : A simple check
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How to create a simple check with Riemann ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_basic_riemann_configuration&quot;&gt;A basic Riemann configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a basic &lt;code&gt;riemann.config&lt;/code&gt; file (it should be in &lt;code&gt;/etc/riemann/riemann.config&lt;/code&gt; if you have installed Riemann using rpm/deb).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(logging/init {:file &quot;/var/log/riemann/riemann.log&quot;})

(let [host &quot;0.0.0.0&quot;]
  (tcp-server {:host host})
  (udp-server {:host host}))

(periodically-expire 10)

(streams)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, i initialize logging, start a tcp and a udp server, and configure index expiration every 10 seconds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;(streams)&lt;/code&gt; do nothing actually.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_check_if_metric_to_a_threshold&quot;&gt;Check if metric &amp;gt; to a threshold&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a file named &lt;code&gt;mycorp/system/ram.clj&lt;/code&gt;.
We want a stream which:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Filter all events excepts events about RAM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write the event in the log file if the RAM is &amp;gt; to 90 %.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will simulate these events using Riemann test API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/tour/ramperc.png&quot; alt=&quot;ram graph&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s define a basic &lt;code&gt;mycorp/system/ram.clj&lt;/code&gt; (doing nothing):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns mycorp.system.ram
  (:require [riemann.config :refer :all]
            [riemann.streams :refer :all]
            [riemann.test :refer :all]
            [clojure.tools.logging :refer :all]))

(def threshold 90)

(def ram-stream)

(tests
  (deftest ram-stream-test))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have imported Riemann essentials namespaces, defined a threshold variable, a ram-stream variable (which will contain our stream), and a test.
Let&amp;#8217;s complete the test part:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(tests
 (deftest ram-stream-test
   (let [result (inject! [mycorp.system.ram/ram-stream]
                         [{:host &quot;foo&quot;
                           :service &quot;memory/percent-used&quot;
                           :metric 60
                           :time 1}
                          {:host &quot;foo&quot;
                           :service &quot;ramdom-event&quot;
                           :metric 4000
                           :time 3}
                          {:host &quot;foo&quot;
                           :service &quot;memory/percent-used&quot;
                           :metric 95
                           :time 11}
                          {:host &quot;foo&quot;
                           :service &quot;memory/percent-used&quot;
                           :metric 80
                           :time 21}
                           {:host &quot;foo&quot;
                           :service &quot;foobar&quot;
                           :metric 3100
                           :time 24}
                          {:host &quot;foo&quot;
                           :service &quot;memory/percent-used&quot;
                           :metric 92
                           :time 31}])]
     (is (= (:ram-stream-tap result)
            [{:host &quot;foo&quot;
              :service &quot;memory/percent-used&quot;
              :metric 95
              :time 11}
             {:host &quot;foo&quot;
              :service &quot;memory/percent-used&quot;
              :metric 92
              :time 31}])))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, i will inject into &lt;code&gt;mycorp.system.ram/ram-stream&lt;/code&gt; a serie of events. Some are RAM events (and are represented by the previous graph), and some random events.
I store the &lt;code&gt;inject!&lt;/code&gt; result into &lt;code&gt;result&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;code&gt;tap&lt;/code&gt; is a point where you can observe events. Take a look at the &lt;a href=&quot;http://riemann.io/howto.html#writing-tests&quot;&gt;writing tests&lt;/a&gt; section in the Riemann howto to learn more about tap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my test, i get the value of the tap named &lt;code&gt;:ram-stream-tap&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Obviously, my test will fail because &lt;code&gt;ram-stream&lt;/code&gt; is not defined.
Let&amp;#8217;s define it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(def ram-stream
  (where (service &quot;memory/percent-used&quot;)
    (where (&amp;gt; (:metric event) threshold)
      (io #(info %))
      (tap :ram-stream-tap))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I use &lt;code&gt;where&lt;/code&gt; to filter events whose name is not &quot;ram-used&quot; and &lt;code&gt;where&lt;/code&gt; again to filter events with a &lt;code&gt;:metric&lt;/code&gt; &amp;lt; to threshold. I print remaining events in the log file using &lt;code&gt;info&lt;/code&gt; and push them into a tap for testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I could also use only one &lt;code&gt;where&lt;/code&gt; stream:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(def ram-stream
  (where (and (service &quot;memory/percent-used&quot;)
              (&amp;gt; (:metric event) threshold))
    (io #(info %))
    (tap :ram-stream-tap)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, import your &lt;code&gt;ram.clj&lt;/code&gt; file in riemann.config:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(include &quot;mycorp/system/ram.clj&quot;)

(require '[riemann.test :refer :all]
         '[mycorp.system.ram :as ram])

;; rest of the file&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Launch your tests:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;riemann test /etc/riemann/riemann.config

Ran 1 tests containing 1 assertions.
0 failures, 0 errors.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good job ! You can now use this stream in your configuration. Add it in riemann.config:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(streams
 ram/ram-stream)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And that&amp;#8217;s it. You have a stream checking the ram.
Not very useful (just a threshold), but it&amp;#8217;s something :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next article, things will be more interesting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code &lt;a href=&quot;https://github.com/mcorbin/riemann-configuration-example&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 04 May 2017 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-04-10-installing-riemann/
</guid>
<link>
https://mcorbin.fr/posts/2017-04-10-installing-riemann/
</link>
<title>
A tour of Riemann : Installing
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How to install Riemann ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_installing_riemann&quot;&gt;Installing Riemann&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to &lt;a href=&quot;http://riemann.io/&quot; class=&quot;bare&quot;&gt;http://riemann.io/&lt;/a&gt; and download Riemann for your platform.
You will also need a JDK (OpenJDK 8 for example).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuring_riemann_jvm&quot;&gt;Configuring Riemann JVM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On &lt;code&gt;Debian&lt;/code&gt;, takes a look at &lt;code&gt;/etc/default/riemann&lt;/code&gt;.
On RHEL, it should be on &lt;code&gt;/etc/sysconfig/riemann&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this tutorial, you don&amp;#8217;t need to modify this file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Riemann is just a jar, so that&amp;#8217;s it, you have installed Riemann :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Mon, 10 Apr 2017 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-04-09-a-tour-of-riemann/
</guid>
<link>
https://mcorbin.fr/posts/2017-04-09-a-tour-of-riemann/
</link>
<title>
A tour of Riemann
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog posts serie, i will present Riemann, an amazing monitoring tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do you know  &lt;a href=&quot;http://riemann.io/&quot;&gt;Riemann&lt;/a&gt; ?
It&amp;#8217;s an &lt;strong&gt;amazing&lt;/strong&gt; tool, a stream processing engine to monitor your infrastucture.
Flexible, powerful, it can detects complex problems on your infrastructure, calculate statistics and fire alerts.
It integrates with many tools (InfluxDB, Kafka, Elasticsearch, Pagerduty&amp;#8230;&amp;#8203;) and is highly costumizable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Riemann configuration is code (real code, it&amp;#8217;s &lt;a href=&quot;https://clojure.org&quot;&gt;Clojure&lt;/a&gt;).
You will quickly understand why Clojure is Riemann strength compared to a DSL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will not present Clojure, i advice you to get Clojure basics using these tutorials:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://riemann.io/clojure.html&quot;&gt;Just enough Clojure to work with Riemann&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://aphyr.com/tags/Clojure-from-the-ground-up&quot;&gt;Clojure from the ground up&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.braveclojure.com/clojure-for-the-brave-and-true/&quot;&gt;Clojure for the brave and true&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some useful links to work with Riemann. I will mostly show use cases on my tutorials,
it&amp;#8217;s a complement of the Riemann howto and not a replacement.
I will write unit tests for each use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The official &lt;a href=&quot;http://riemann.io/howto.html&quot;&gt;howto&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;http://riemann.io/api.html&quot;&gt;Riemann API&lt;/a&gt;, especially the &lt;code&gt;streams&lt;/code&gt; and &lt;code&gt;folds&lt;/code&gt; sections.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will use &lt;a href=&quot;https://collectd.org/&quot;&gt;collectd&lt;/a&gt; with the &lt;code&gt;write_riemann&lt;/code&gt; plugin to gather system metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s go !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code &lt;a href=&quot;https://github.com/mcorbin/riemann-configuration-example&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>
Sun, 09 Apr 2017 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-04-05-a-propos-clojure/
</guid>
<link>
https://mcorbin.fr/posts/2017-04-05-a-propos-clojure/
</link>
<title>
A propos de Clojure
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ça fait maintenant plus de 2 ans que je me suis mis à &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt;.
Bien m&amp;#8217;en a pris.
C&amp;#8217;est aujourd&amp;#8217;hui le langage où je suis le plus à l&amp;#8217;aise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je tâcherais dans cet article d&amp;#8217;expliquer pourquoi Clojure est un langage à la fois simple, puissant, et extrêmement fun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_histoire&quot;&gt;Histoire&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La version 1.0 de Clojure est sortie en 2009.
Le langage fonctionne sur la JVM (sa cible initiale) mais compile également en Javascript (via le projet ClojureScript).
Un port de Clojure sur CLR existe également, mais moins populaire que les version Java/JS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La force de Clojure est qu&amp;#8217;il s&amp;#8217;interface parfaitement avec sa plateforme cible, c&amp;#8217;est à dire qu&amp;#8217;il est très facile d&amp;#8217;utiliser l&amp;#8217;énorme écosystème (libraries, frameworks, outils&amp;#8230;&amp;#8203;) de ces plateformes depuis Clojure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_syntaxe&quot;&gt;Syntaxe&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure est inspiré de LISP.
Pour un développeur habitué à C, Java, Python&amp;#8230;&amp;#8203; cela peut faire peur.
Pourtant la syntaxe de Clojure (et de LISP en général) est une de ses plus grandes forces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici une explication simple de la syntaxe de Clojure :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1 + 1

foo(bar)

foo(bar, baz)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(+ 1 1)

(foo bar)

(foo bar baz)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On se rend compte facilement qu&amp;#8217;en Clojure, l&amp;#8217;opérateur (ou la fonction, le mot clé&amp;#8230;&amp;#8203;) se trouve en premier (après une parenthèse) suivi de ses arguments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Allons un peu plus loin :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public int addFive(int number) {
    return number + 5;
}

public int addFiveIfOdd(int number) {
    if (number % 2 == 0) {
        return number + 5;
    }
    return number;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(defn add-five
  [number]
  (+ number 5))

(defn add-five-if-odd
  [number]
  (if (odd? number)
    (+ 5 number)
    number))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit ici que la syntaxe de Clojure respecte toujours le même format.
Une ouverture de parenthèse, un mot clé, et une suite d&amp;#8217;arguments.
Quelle que soit l&amp;#8217;action à réaliser (un if, une définition de fonction, un appel de fonction&amp;#8230;&amp;#8203;), la syntaxe reste la même.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je trouve personnellement cela très intéressant, et une fois l&amp;#8217;habitude prise, lire du Clojure est très agréable (je vous promets que les parenthèses, vous ne les verrez plus ;)).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, en parlant de parenthèses, comparez les deux codes suivants :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;List&amp;lt;Integer&amp;gt; mylist =
    Arrays.asList(1, 2, 3, 4);
myList.stream()
   .map( x -&amp;gt; x + 1)
   .mapToInt(x -&amp;gt; x)
   .sum();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(reduce + (map inc [1 2 3 4]))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comptez le nombre de symboles différents dans le code Java.
On a &lt;code&gt;(){}&amp;lt;&amp;gt;,&amp;#8594;;.&lt;/code&gt;, et beaucoup plus de parenthèses que dans la version Clojure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_immutabilité&quot;&gt;Immutabilité&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Clojure, (presque) tout est immutable.
Cela se voit dès que l&amp;#8217;on touche au langage :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;riemann.bin&amp;gt; (def foo [1 2])
#'riemann.bin/foo
riemann.bin&amp;gt; (conj foo 3)
[1 2 3]
riemann.bin&amp;gt; (conj foo 4)
[1 2 4]
riemann.bin&amp;gt; foo
[1 2]
riemann.bin&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La même chose s&amp;#8217;applique lors de passage de paramètre à des fonctions :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;riemann.bin&amp;gt; (defn my-fn [my-vec] (conj my-vec 10))
#'riemann.bin/my-fn
riemann.bin&amp;gt; (my-fn foo)
[1 2 10]
riemann.bin&amp;gt; (my-fn foo)
[1 2 10]
riemann.bin&amp;gt; (my-fn [1 2 3])
[1 2 3 10]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il n&amp;#8217;y a plus à s&amp;#8217;inquiéter des effets de bords, toutes les structures de données de Clojure sont immutables.
Attention par contre si vous utilisez des objets Java (en utilisant l&amp;#8217;intéropérabilité Clojure/Java), le code perdra cette propriété.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_repl_développement_intéractif&quot;&gt;REPL, développement intéractif&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;adore Clojure car la façon de coder en Clojure correspond bien à ma façon de réfléchir.
Lorsque je code en Clojure, j&amp;#8217;ai toujours le REPL (l&amp;#8217;interpréteur Clojure) ouvert. Je peux comme cela coder dans mon fichier .clj, le charger dans le REPL et le &quot;tester&quot; en live.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela est très intéressant et permet d&amp;#8217;avoir très rapidement un retour sur ce qu&amp;#8217;on écrit.
C&amp;#8217;est vraiment la technique ultime pour expérimenter, tester rapidement plusieurs solutions à un problème.
C&amp;#8217;est aussi très bien pour apprendre le langage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour résumer, mon workflow quand je code en Clojure c&amp;#8217;est :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Explorer les solutions à un problème avec le REPL. En faisant cela, je comprends mieux mon problème, les différentes solutions qui s&amp;#8217;offrent à moi, comment je peux découper le code&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ecrire des tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refactorer ma solution (qui est souvent bancale et ne passe pas mes tests).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les aficionados du TDD ne seraient pas forcément d&amp;#8217;accord avec moi, mais je trouve que manipuler un peu le problème avant d&amp;#8217;écrire des tests apporte une énorme plus value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le REPL est également agréable à utiliser grâce à la syntaxe simple et expressive de Clojure. Parait que Java 9 aura également un REPL, cool, mais je me vois mal taper dans un REPL à longueur de journée :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;ArrayList&amp;lt;String&amp;gt; foolist = new ArrayList&amp;lt;String&amp;gt;();
list.add(&quot;foo&quot;);
list.add(&quot;bar&quot;);
list.add(&quot;baz&quot;);
Map&amp;lt;Integer, &amp;lt;List&amp;lt;String&amp;gt;&amp;gt; foomap = new HashMap&amp;lt;&amp;gt;();
foomap.put(20, foolist)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et vous ? Pour information, l&amp;#8217;équivalent Clojure est &lt;code&gt;&lt;code&gt;{20 [&quot;foo&quot; &quot;bar&quot; &quot;baz&quot;]}&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le fait que les fonctions prennent et retournent généralement des structures de données immutables aide aussi.
Pour tout ce qui est état (connexions aux base de données, web servers&amp;#8230;&amp;#8203;)
des outils comme &lt;a href=&quot;https://github.com/tolitius/mount&quot;&gt;mount&lt;/a&gt; permettent de définir et recharger en une commande l&amp;#8217;intégralité du programme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le REPL est probablement ce qui me manque le plus dans d&amp;#8217;autres langages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_programmation_concurrente&quot;&gt;Programmation concurrente&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure fournit plusieurs outils permettant de partager facilement des ressources entre threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un &lt;a href=&quot;https://clojure.org/reference/atoms&quot;&gt;atom&lt;/a&gt; permet de définir une variable où chaque opération sera atomique. Exemple :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;riemann.bin&amp;gt; (def foo (atom [1 2]))
#'riemann.bin/foo
riemann.bin&amp;gt; foo
#atom[[1 2] 0x58749e6e]
riemann.bin&amp;gt; @foo
[1 2]
riemann.bin&amp;gt; (swap! foo conj 3)
[1 2 3]
riemann.bin&amp;gt; @foo
[1 2 3]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, je définis un atom foo. &lt;code&gt;@foo&lt;/code&gt; permet de déférencer l&amp;#8217;atom, c&amp;#8217;est à dire récupérer sa valeur. &lt;code&gt;swap!&lt;/code&gt; permet d&amp;#8217;appliquer une opération sur un atom (ici en y ajoutant la valeur 3).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les atom ont donc un état (et ne sont pas immutables). L&amp;#8217;intêret des atom est qu&amp;#8217;ils sont thread safe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaginons que 2 threads appellent &lt;code&gt;swap!&lt;/code&gt; simultanément sur un atom, par exemple &lt;code&gt;(swap! foo conj 3)&lt;/code&gt; sur le thread 1 puis &lt;code&gt;(swap! foo conj 4)&lt;/code&gt; sur le thread 2.
Si l&amp;#8217;atom valait initialement &lt;code&gt;[1 2]&lt;/code&gt;, les &quot;bonnes&quot; réponses possibles sont &lt;code&gt;[1 2 3 4]&lt;/code&gt;
 ou &lt;code&gt;[1 2 4 3]&lt;/code&gt; une fois l&amp;#8217;opération exécutée.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaginons que l&amp;#8217;opération 1 se termine. L&amp;#8217;atom vaudra donc &lt;code&gt;[1 2 3]&lt;/code&gt;.
Pas de chance, pendant ce temps là sur le thread 2, l&amp;#8217;opération swap! produit &lt;code&gt;[1 2 4]&lt;/code&gt; (les deux opérations ayant été lancés au même moment, l&amp;#8217;état de l&amp;#8217;atom en entrée était le même pour les deux).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous ne voulons surtout pas que le résultat final soit &lt;code&gt;[1 2 4]&lt;/code&gt;.
Heureusement, &lt;code&gt;swap!&lt;/code&gt; détectera que l&amp;#8217;atom a changé pendant qu&amp;#8217;il réalisait l&amp;#8217;opération, et va donc re-réaliser l&amp;#8217;opération en prenant le nouveau état comme paramètre d&amp;#8217;entrée.
On obtiendra donc comme résultat final &lt;code&gt;[1 2 3 4]&lt;/code&gt;. Le tout sans lock :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un peu de la même façon, les &lt;a href=&quot;https://clojure.org/reference/refs&quot;&gt;refs&lt;/a&gt; permettent de définir des opérations entre plusieurs variables mutables partagées entre plusieurs threads de manière safe, grâce à un système de transaction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les atom et les ref viennent en plus avec des fonctionnalités intéressantes, comme le fait de pouvoir définir des fonctions qui seront appelées (avec en paramètre l&amp;#8217;ancien et le nouveau état de l&amp;#8217;atom ou de la ref) une fois une action réalisée.
Des fonctions de validations peuvent également être liées aux refs ou atom pour refuser certains états.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure implémente également d&amp;#8217;autres mécanismes pour la gestion de la concurrence (comme les &lt;a href=&quot;https://clojure.org/reference/agents&quot;&gt;agents&lt;/a&gt;, ou bien &lt;a href=&quot;https://github.com/clojure/core.async&quot;&gt;core.async&lt;/a&gt; qui permet de créer plusieurs processes qui communiqueront avec des channels (un peu à la Go)).
Et évidemment, tout ce qui tourne sur la JVM (donc java.util.concurrent par exemple) est également disponible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_macros&quot;&gt;Macros&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une liste se définit de cette façon en Clojure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;riemann.bin&amp;gt; '(1 2 3)
(1 2 3)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Définissons une nouvelle liste (rappel: de part sa nature dynamique, une liste en Clojure peut contenir tout et n&amp;#8217;importe quoi) :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;riemann.bin&amp;gt; '(defn my-fn [my-vec] (conj my-vec 10))
(defn my-fn [my-vec] (conj my-vec 10))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ma liste contient ici la définition de la fonction &lt;code&gt;my-fn&lt;/code&gt; !
En clojure (et en LISP de façon plus générale), le code est une structure de données manipulable via un mécanisme appelé macros.
Par exemple, &lt;code&gt;defn&lt;/code&gt; lui même est une macro:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;riemann.bin&amp;gt; (macroexpand '(defn my-fn2 [my-vec] (conj my-vec 10)))
(def my-fn2 (clojure.core/fn ([my-vec] (conj my-vec 10))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;macroexpand&lt;/code&gt; retourne la forme &quot;réelle&quot; d&amp;#8217;une expression Clojure.
On voit ici que defn est en fait un assemblage des mots-clés &lt;code&gt;def&lt;/code&gt; et &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les macros sont un outil très puissant (mais à utiliser avec modération), permettant de définir par exemple des DSL.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure n&amp;#8217;est pas parfait.
Il reste beaucoup à faire, comme par exemple les messages d&amp;#8217;erreurs (qui sont des stacktrace Java peu expressives) qui ont tendances à faire fuir les nouveaux venus dans le langage.
La façon de travailler avec le REPL n&amp;#8217;est pas également facile à acquérir seul.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais le langage est solide, cohérent, et a complètement changé ma façon de programmer (en bien).
La philosophie du langage (immutabilité, manipulation facile de structures de données, REPL, fonctions/librairies versus frameworks&amp;#8230;&amp;#8203;) correspond parfaitement à ma façon de développer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous ne l&amp;#8217;avez pas encore fait, vous DEVEZ jeter un oeil à Clojure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_ressources&quot;&gt;Ressources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://aphyr.com/tags/Clojure-from-the-ground-up&quot;&gt;Clojure from the group up&lt;/a&gt; de Aphyr : une série de tutoriel sur le langage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.braveclojure.com/clojure-for-the-brave-and-true/&quot;&gt;Brave Clojure&lt;/a&gt; : Un tutoriel complet existant également au format livre.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 05 Apr 2017 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2016-08-10-logs-ansible/
</guid>
<link>
https://mcorbin.fr/posts/2016-08-10-logs-ansible/
</link>
<title>
Use your Ansible logs ! / Exploitez vos logs Ansible !
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;English version &lt;a href=&quot;https://mcorbin.fr/pages/logs-ansible-en/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
J&amp;#8217;utilise Ansible au quotidien. Tous les jours, mes collègues et moi même l&amp;#8217;utilisons pour configurer nos serveurs et déployer nos applications, sur de nombreux environnements. Nous utilisons Jenkins pour piloter Ansible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout cela génère une &lt;strong&gt;énorme&lt;/strong&gt; quantité de logs, dont nous ne faisons pas grand chose à part une consultation après un déploiement via l&amp;#8217;interface de Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;expliquerais dans cet article une façon d&amp;#8217;exploiter ces logs, en s&amp;#8217;appuyant sur les plugins callback d&amp;#8217;Ansible. Grâce à ces plugins, il est possible d&amp;#8217;obtenir des logs beaucoup plus détaillés que les logs Ansible de base, ainsi que de facilement les manipuler pour en tirer un maximum d&amp;#8217;informations et de statistiques.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_callbacks_plugins_d_ansible&quot;&gt;Les callbacks plugins d&amp;#8217;Ansible&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_présentation_générale_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Présentation générale&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ansible peut être &quot;étendu&quot; avec des plugins. Je vais présenter ici les plugins de type callback &lt;a href=&quot;http://docs.ansible.com/ansible/developing_plugins.html=callbacks&quot;&gt;(documentation)&lt;/a&gt;. Les examples ici concernent Ansible 1.X, mais le fonctionnement est quasiment identique en version 2 et plus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce plugin permet de définir un objet dont les fonctions seront appelées à différents moments lors de l&amp;#8217;exécution d&amp;#8217;Ansible. Exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;class CallbackModule(object):

    def on_any(self, *args, *kwargs):
        pass

    def runner_on_failed(self, host, res, ignore_errors=False):
        pass

    def runner_on_ok(self, host, res):
        pass

    def runner_on_skipped(self, host, item=None):
        pass

    def playbook_on_start(self):
        pass

    def playbook_on_task_start(self, name, is_conditional):
        pass

    = etc...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un callback plugin est donc juste une classe implémentant un certain nombre de méthodes. J&amp;#8217;en ai mis quelques unes dans cet exemple, mais il en existe beaucoup plus pour tout type d&amp;#8217;événements (vous pouvez retrouver ces fonctions dans la doc d&amp;#8217;Ansible ou dans les plugins callbacks fournis avec Ansible).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_fonctionnement_détaillé_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Fonctionnement détaillé&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par exemple, la fonction &lt;strong&gt;runner_on_failed&lt;/strong&gt; sera appelé quand une task Ansible échouera. De la même façon, &lt;strong&gt;runner_on_ok&lt;/strong&gt; sera appelé lorsque qu&amp;#8217;une tâche sera en succès, &lt;strong&gt;runner_on_skipped&lt;/strong&gt; lors d&amp;#8217;une tâche ignorée etc&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les fonctions de type &lt;strong&gt;playbook_on_&lt;/strong&gt; seront elles exécutées lors d&amp;#8217;évènements liés aux playbooks (&lt;strong&gt;playbook_on_start&lt;/strong&gt; lors du démarrage du playbook etc&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Toutes ces fonctions recoivent des paramètres. C&amp;#8217;est là que ça devient intéressant. Par exemple, nous disposons dans &lt;strong&gt;runner_on_ok&lt;/strong&gt; des variables &lt;strong&gt;self&lt;/strong&gt;, &lt;strong&gt;host&lt;/strong&gt;, et &lt;strong&gt;res&lt;/strong&gt; :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Commençons par la variable &lt;strong&gt;host&lt;/strong&gt;. Comme son nom l&amp;#8217;indique, cette variable contient l&amp;#8217;host sur lequel s&amp;#8217;applique la task.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La variable &lt;strong&gt;res&lt;/strong&gt; contient les différentes informations sur la machine comme par exemple les variables de type &lt;strong&gt;fact&lt;/strong&gt;, ainsi que quelques informations sur la task (état &lt;strong&gt;changed&lt;/strong&gt;, module appelé&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L&amp;#8217;objet callback &lt;strong&gt;self&lt;/strong&gt; contient un grand nombre d&amp;#8217;informations sur l&amp;#8217;exécution en cours. Rajoutons par exemple &lt;strong&gt;import pdb; pdb.set_trace();&lt;/strong&gt; dans la fonction &lt;strong&gt;runner_on_ok&lt;/strong&gt; (pour utiliser le débugger Python) et lançons un déploiement. Un &lt;strong&gt;pp dir(self)&lt;/strong&gt; pour lister les champs de l&amp;#8217;objet donne:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(Pdb) pp dir(self)
['__class__',
 '__delattr__',
 '__dict__',
 '__doc__',
 '__format__',
 '__getattribute__',
 '__hash__',
 '__init__',
 '__module__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__weakref__',
 'on_any',
 'play',
 'playbook',
 'playbook_on_import_for_host',
 'playbook_on_no_hosts_matched',
 'playbook_on_no_hosts_remaining',
 'playbook_on_not_import_for_host',
 'playbook_on_notify',
 'playbook_on_play_start',
 'playbook_on_setup',
 'playbook_on_start',
 'playbook_on_stats',
 'playbook_on_task_start',
 'playbook_on_vars_prompt',
 'runner_on_async_failed',
 'runner_on_async_ok',
 'runner_on_async_poll',
 'runner_on_failed',
 'runner_on_no_hosts',
 'runner_on_ok',
 'runner_on_skipped',
 'runner_on_unreachable',
 'state',
 'task']&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;objet &lt;strong&gt;self&lt;/strong&gt; est une vraie mine d&amp;#8217;or ! A coup de pdb (&lt;code&gt;pp dir(self.task)&lt;/code&gt;, &lt;code&gt;pp dir(self.play)&lt;/code&gt; etc&amp;#8230;&amp;#8203;) on se rend compte que l&amp;#8217;on a accès à une énorme quantité d&amp;#8217;informations sur notre déploiement. Détail de la tâche en cours (nom, rôle associé&amp;#8230;&amp;#8203;), variables, informations sur le playbook&amp;#8230;&amp;#8203; Il ne reste plus qu&amp;#8217;à piocher dans ce qui nous intéresse ! Bien sûr, chaque fonction du plugin callback aura des paramètres différents (même si l&amp;#8217;on retrouve des similarités, comme par exemple entre &lt;strong&gt;runner_on_failed&lt;/strong&gt; et &lt;strong&gt;runner_on_ok&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_playbook_on_start_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;playbook on start&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La méthode &lt;strong&gt;playbook_on_start&lt;/strong&gt; s&amp;#8217;exécute, comme son nom l&amp;#8217;indique, au lancement d&amp;#8217;un playbook. Je voulais initialiser quelques variables à partir d&amp;#8217;extra_vars, j&amp;#8217;ai donc utilisé cette fonction pour le faire. Voici un exemple basique (je considère qu&amp;#8217;une fonction &lt;strong&gt;get_timestamp&lt;/strong&gt; me retourne le timestamp actuel) :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def playbook_on_start(self):
        extra_vars = self.playbook.extra_vars
        self.project = extra_vars[&quot;project&quot;]
        self.version = extra_vars[&quot;version&quot;]
        self.environment = extra_vars[&quot;environment&quot;]
        self.start_timestamp = get_timestamp()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, je récupère trois variables que je sais présentes en extra_vars. Une variable &lt;strong&gt;projet&lt;/strong&gt; (le projet à déployer), une variable &lt;strong&gt;version&lt;/strong&gt; (la version à déployer), une variable &lt;strong&gt;environment&lt;/strong&gt; (dev, préprod, prod&amp;#8230;&amp;#8203;), et le timestamp du démarrage du déploiement. J&amp;#8217;utilise ces quatres informations pour identifier précisément un déploiement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bref, il est très facile de pouvoir rendre accessibles certaines variables en enrichissant &lt;strong&gt;self&lt;/strong&gt; lors de l&amp;#8217;exécution des fonctions (l&amp;#8217;objet callback étant toujours le même dans un déploiement). Les autres variables de &lt;strong&gt;self&lt;/strong&gt; sont bien sûr également accessibles si besoin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_playbook_on_stats_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;playbook on stats&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une autre fonction intéressante est &lt;strong&gt;playbook_on_stats&lt;/strong&gt;. Cette fonction est appelée à la fin du déploiement, et contient le résumé du déploiement. Voici par exemple la façon de récupérer le résumé (contenant les tasks unreachable, skipped, changed&amp;#8230;&amp;#8203;) du déploiement par host :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def playbook_on_stats(self, stats):
    hosts = stats.processed.keys()
    for h in hosts:
        summary = stats.summarize(h)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je récupère personnellement le résumé du déploiement par host, mais aussi un résumé global en additionnant chaque type de task (ok, skipped&amp;#8230;&amp;#8203;) de chaque host.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_strong_la_génération_des_logs_strong&quot;&gt;&lt;strong&gt;La génération des logs&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il ne vous reste plus qu&amp;#8217;à compléter les différentes fonctions du plugin callback pour générer des logs au format souhaité. Voici par exemple un exemple tout bête qui envoie (via http en utilisant le package &lt;strong&gt;requests&lt;/strong&gt;) un log à un web server lorsqu&amp;#8217;une task échoue:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def runner_on_failed(self, host, res, ignore_errors=False):
    task = self.task
    result = {
        &quot;timestamp&quot;: get_timestamp(),
        &quot;host&quot;: host,
        &quot;type&quot;: &quot;task_failed&quot;,
        &quot;task&quot;: task.name,
        &quot;role&quot;: task.role_name,
        &quot;result&quot;: json.dumps(res),
        &quot;version&quot;: self.version,  # Cette variable et les suivantes sont initialisées comme précédemment
        &quot;environment&quot;: self.environment,
        &quot;project&quot;: self.project,
        &quot;start_timestamp&quot;: self.start_timestamp
    }
    requests.post(url_web_server, data=json.dumps(result))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On aura ici accès au timestamp, à l&amp;#8217;host, au type d&amp;#8217;évènement (task_failed), au nom de la task, au rôle associé à la task si il existe, au résultat détaillé de l&amp;#8217;exécution de la task, et enfin aux variables définies plus tôt dans &lt;strong&gt;playbook_on_start&lt;/strong&gt; (ces variables sont communes à tous les logs d&amp;#8217;un même déploiement et permettent ensuite d&amp;#8217;identifier les logs pour un déploiement donné).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il ne reste plus qu&amp;#8217;à écrire un code similaire dans les autres fonctions du plugin callback (en l&amp;#8217;adaptant à chaque fois), et on arrive déjà sans grand effort à collecter des logs très intéressants !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_strong_collectez_et_stockez_vos_logs_strong&quot;&gt;&lt;strong&gt;Collectez et stockez vos logs&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les possibilités avec les plugins Ansible sont infinies. J&amp;#8217;ai choisi de les envoyer comme dans l&amp;#8217;exemple précédent dans un service web (9 lignes de Python avec Flask + kafka-python). Ce service ne réalise qu&amp;#8217;une seule chose : après réception d&amp;#8217;un log, il l&amp;#8217;envoie dans Kafka. Un Logstash collecte ensuite les logs de Kafka pour les indexer dans Elasticsearch. J&amp;#8217;ai essayé d&amp;#8217;envoyer directement du plugin dans kafka, mais Ansible semble gérer bizarrement le cycle de vie de ses objets, ce qui posait quelques soucis avec kafka-python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ansible_log.png&quot; alt=&quot;logs ansible&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pourriez très bien écrire les logs sur disque, ou les envoyer dans une base de données&amp;#8230;&amp;#8203; Tout dépend de ce que voulez en faire. L&amp;#8217;avantage d&amp;#8217;Elasticsearch est qu&amp;#8217;il est très facile ensuite de réaliser des requêtes complexes/des graphes sur les logs via Kibana/Grafana.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_strong_exploitation_des_logs_strong&quot;&gt;&lt;strong&gt;Exploitation des logs&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rien qu&amp;#8217;avec les informations fournies précédemment par le plugin callback, je peux :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Réaliser des recherches complexes dans Kibana (exemple : récupérer les tasks en échec pour le rôle HAproxy d&amp;#8217;un projet donné ces 90 derniers jours sur la préprod). De plus, tous les logs sont centralisés au même endroit, ça évite d&amp;#8217;avoir à se balader de jobs Jenkins en jobs Jenkins pour visualiser les logs (qui sont souvent illisibles avec l&amp;#8217;option &lt;strong&gt;-vvvv&lt;/strong&gt; d&amp;#8217;Ansible)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dans Grafana, par projet:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Résumé des derniers déploiements (heure de début, environnement, succès ou non, nombre de tasks skipped/changed/unreachable etc&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Liste des déploiements lancés (ceux en cours sont donc lancés mais non terminés).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nombre de déploiements terminés sur une période de temps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nombre de déploiements lancés sur une période de temps (permet de comparer avec le nombre de déploiements terminés).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nombre de task pour chaque rôle sur une période de temps en fonction du type de la task (skipped, changed&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nombre de fois qu&amp;#8217;un rôle a été en échec.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rôles les moins fiables (le plus souvent en échec).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Temps d&amp;#8217;exécution de chaque rôle rôle (minimum, maximum, moyenne&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dans Grafana, tous les graphes cités précédemment mais de façon globale (donc sans la notion de projet).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ansible_grafana1.png&quot; alt=&quot;Exemple de graphes avec Grafana&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ansible_grafana2.png&quot; alt=&quot;Exemple de graphes avec Grafana&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Ces deux images présentent quelques graphes Grafana (anonymisées) générés via les statistiques récoltées par le plugin. Liens vers les images en tailles réelles &lt;a href=&quot;/img/ansible_grafana1.png&quot;&gt;ici&lt;/a&gt; et &lt;a href=&quot;/img/ansible_grafana2.png&quot;&gt;ici&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le temps par rôle peut être calculé assez simplement. Lors de l&amp;#8217;exécution d&amp;#8217;une task, on a accès dans le plugin au rôle associé à la task. J&amp;#8217;initialise un dictionnaire où la clé est le nom du rôle, et la valeur un tableau de deux élements. Le premier élément est le timestamp de la première task du rôle. Je mets ensuite à jour le second élément (la date de fin du rôle) à chaque nouvelle task.
J&amp;#8217;envoie ensuite ces statistiques pour chaque rôle (si il n&amp;#8217;y a pas eu de plantage pouvant causer de fausses durées) en fin de déploiement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pensez également à pré-traiter certains logs, comme par exemple les paramètres &lt;strong&gt;res&lt;/strong&gt; des fonctions. Ces paramètres peuvent être trèèèèès longs (des dizaines de milliers de caractères), notamment lors de téléchargements volumineux avec Ansible en mode &lt;strong&gt;-vvvv&lt;/strong&gt;. Je remplace généralement les résultats trop longs par un message de type &lt;strong&gt;résultat trop long&lt;/strong&gt; (ce sont généralement des données inexploitables).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_strong_ansible_2_strong&quot;&gt;&lt;strong&gt;Ansible 2&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le &lt;a href=&quot;https://docs.ansible.com/ansible/porting_guide_2.0.html&quot;&gt;porting guide&lt;/a&gt; d&amp;#8217;Ansible livre quelques informations pour porter les plugins Callback en Ansible 2. Malheureusement, le fonctionnement interne d&amp;#8217;Ansible ayant bougé, il faudra réadapter le code. En vrac :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Les extra_vars ne sont plus accessibles dans &lt;strong&gt;playbook_on_start&lt;/strong&gt; mais seulement à partir de &lt;strong&gt;v2_playbook_on_play_start&lt;/strong&gt;, et d&amp;#8217;une façon un peu différente :&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;extra_vars = play.get_variable_manager().extra_vars&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Le nom du rôle est accessible dans &lt;strong&gt;v2_playbook_on_task_start&lt;/strong&gt;. Pour garder une certaine compatibilité avec du code Ansible 1.X, vous pouvez faire :&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;if task._role is not None:  # on verifie si c'est un role ou non
    task.role_name = task._role._role_name&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_strong_conclusion_strong&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les possibilités du plugin callback sont infinies. Je pense sincèrement qu&amp;#8217;en prenant le temps, il est possible de réaliser de nombreuses statistiques sur les déploiements (ainsi que de l&amp;#8217;alerting, de la corrélation avec d&amp;#8217;autres métriques comme des métriques systèmes&amp;#8230;&amp;#8203;), surtout avec des outils puissants comme Kibana/Grafana. Bref, à creuser !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 10 Aug 2016 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2016-04-22-lesspipe/
</guid>
<link>
https://mcorbin.fr/posts/2016-04-22-lesspipe/
</link>
<title>
One day one manpage / Un jour une manpage : lesspipe
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;English version &lt;a href=&quot;https://mcorbin.fr/pages/lesspipe-en/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Le concept de &quot;un jour une manpage&quot; est simple : je choisis une manpage aléatoirement et j&amp;#8217;explore la commande associée.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aujourd&amp;#8217;hui, c&amp;#8217;est la commande &lt;strong&gt;lesspipe&lt;/strong&gt; qui sera passée à la loupe. Tout d&amp;#8217;abord, regardons ce que raconte un &lt;strong&gt;man lesspipe&lt;/strong&gt; :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;lessfile, lesspipe - &quot;input preprocessor&quot; for  less.
lessfile and lesspipe are programs that can be used to modify the  way  the contents of a file are displayed in less&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette commande permet donc de manipuler le contenu d&amp;#8217;un fichier avant de l&amp;#8217;envoyer à &lt;strong&gt;less&lt;/strong&gt;. Pourquoi faire ? Essayez de lancer &lt;strong&gt;less&lt;/strong&gt; sur une image, un .deb ou un .tar.gz&amp;#8230;&amp;#8203; Vous aurez quelques soucis. Lesspipe permet donc (entre autre) d&amp;#8217;enrichir less pour explorer de nouveaux types de fichier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour l&amp;#8217;activer, il suffit de lancer (ou de rajouter dans son .bashrc ou équivalent) :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eval &quot;$(lesspipe)&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_comment_ça_marche&quot;&gt;Comment ça marche ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lançons juste &lt;strong&gt;lesspipe&lt;/strong&gt; dans un terminal. On obtient :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export LESSOPEN=&quot;| /usr/bin/lesspipe %s&quot;;
export LESSCLOSE=&quot;/usr/bin/lesspipe %s %s&quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deux variables sont donc définies: LESSOPEN et LESSCLOSE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La man page de &lt;strong&gt;less&lt;/strong&gt; indique, dans la partie &lt;strong&gt;INPUT PREPROCESSOR&lt;/strong&gt;, que la variable LESSOPEN sert à activer un préprocesseur pour less. Ce préprocesseur reçoit en paramètre le nom du fichier envoyé à less, crée un fichier temporaire et renvoie en sortie le nom de ce fichier temporaire. Le nom du fichier temporaire sera ensuite utilisé par less.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le préprocesseur peut également envoyer directement à &lt;strong&gt;less&lt;/strong&gt; des informations sans créer de fichiers temporaires. Dans ce cas là, tout ce qui sera envoyé sur la sortie standard du script appelé par LESSOPEN sera transmis à &lt;strong&gt;less&lt;/strong&gt;.
La man page de &lt;strong&gt;less&lt;/strong&gt; indique à ce sujet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is also possible to set up an input preprocessor to pipe the file  data  directly to less, rather than putting the data into a replacement file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[&amp;#8230;&amp;#8203;] To use an input pipe, make the first character in the LESSOPEN environment variable a vertical bar (|) to  signify  that  the  input  pre-processor is an input pipe.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On remarque que lesspipe ne créera pas de fichiers temporaires (le script commence par un &lt;strong&gt;|&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans notre cas, quand &lt;strong&gt;less&lt;/strong&gt; sera appelée, le script &lt;code&gt;/usr/bin/lesspipe&lt;/code&gt; sera appelé avec comme paramètre le nom du fichier sur lequel less est appelé.
Essayons d&amp;#8217;appeler &lt;code&gt;/usr/bin/lesspipe&lt;/code&gt; manuellement, par exemple sur une image :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lesspipe myimage.png
myimage.png PNG 254x29 1920x1080+12+134 8-bit sRGB 3.69KB 0.000u 0:00.000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit que lesspipe retourne certaines informations sur l&amp;#8217;image. Ces informations seront passées à &lt;strong&gt;less&lt;/strong&gt; et affichées.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour LESSCLOSE, voici une partie intéressante de la man page de less :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
When less closes a file opened in such a way, it will call another program, called  the  input  postprocessor,  which  may perform any desired clean-up action.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LESSCLOSE sert donc à faire le nettoyage. Le script référencé par LESSCLOSE reçoit deux paramètres : le nom du fichier original (sur lequel on a appelé &lt;strong&gt;less&lt;/strong&gt;), et le nom du fichier temporaire (généré par le script LESSOPEN).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On peut maintenant utiliser &lt;strong&gt;less&lt;/strong&gt; sur de nombreux types de fichiers. Par exemple, less sur un .zip affichera les fichiers contenus dans cette archive. Même chose pour de nombreux autres formats comme tar, deb, rpm, iso, pdf&amp;#8230;&amp;#8203; Et même des images !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_source_highlight&quot;&gt;source-highlight&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans le même genre, source-highlight permet de rajouter de la coloration syntaxique à less. Pour l&amp;#8217;installer (sur Debian), c&amp;#8217;est simple :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install source-highlight&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On se retrouve ensuite avec un script dans &lt;strong&gt;/usr/share/source-highlight/src-hilite-lesspipe.sh&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De la même façon que pour lesspipe, utilisons ce script comme préprocesseur :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export LESSOPEN=&quot;| /usr/share/source-highlight/src-hilite-lesspipe.sh %s&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;less -R [votre fichier]&lt;/strong&gt; vous ouvrira le fichier avec la coloration syntaxique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, grâce aux deux variables d&amp;#8217;environnements (LESSOPEN and LESSCLOSE) vues précédemment, vous pouvez même facilement écrire vos propres scripts pour enrichir less.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Fri, 22 Apr 2016 00:00:00 +0200
</pubDate>
</item>
</channel>
</rss>
